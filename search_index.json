[["index.html", "The TAME Toolkit for Introductory Data Science, Chemical-Biological Analyses, Predictive Modeling, and Database Mining for Environmental Health Research Preface", " The TAME Toolkit for Introductory Data Science, Chemical-Biological Analyses, Predictive Modeling, and Database Mining for Environmental Health Research Kyle Roell, Lauren Koval, Rebecca Boyles, Grace Patlewicz, Caroline Ring, Cynthia Rider, Cavin Ward-Caviness, David M. Reif, Ilona Jaspers, Rebecca C. Fry, and Julia E. Rager Preface Background Research in exposure science, toxicology, and environmental health is becoming increasingly reliant upon data science and computational methods that can more efficiently extract information from complex datasets. These methods can be leveraged to better identify relationships between exposures to chemicals in the environment and human disease outcomes. Still, there remains a critical gap surrounding the training of researchers on these in silico methods. Objectives We aimed to address this critical gap by developing the inTelligence And Machine lEarning (TAME) Toolkit, promoting trainee-driven data generation, management, and analysis methods to “TAME” data in environmental health studies. This toolkit encompasses training modules, organized as chapters within this Github Bookdown site. All underlying code (in RMarkdown), input files, and imported graphics for these modules can be found at the parent UNC-SRP Github Page. Module Development Overview Training modules were developed to provide applications-driven examples of data organization and analysis methods that can be used to address environmental health questions. Target audiences for these modules include students and professionals in academia, government, and industry that are interested in expanding their skillset. Modules were developed by study coauthors using annotated script formatted for R/RStudio coding language and interface and were organized into three chapters. The first group of modules focused on introductory data science, which included the following topics: setting up R/RStudio and coding in the R environment; data organization basics; finding and visualizing data trends; high-dimensional data visualizations with heat maps; and Findability, Accessibility, Interoperability, and Reusability (FAIR) data management practices. The second chapter of modules incorporated chemical-biological analyses and predictive modeling, spanning the following methods: dose-response modeling; machine learning and predictive modeling; mixtures analyses; -omics analyses; toxicokinetic modeling; and read-across toxicity predictions. The last chapter of modules was organized to provide examples on environmental health database mining and integration, including chemical exposure, health outcome, and environmental justice data. The overall organization of this TAME toolkit is summarized below. Modules are organized into three chapters, that are listed on the left side of this website. Concluding Remarks Together, this valuable resource provides unique opportunities to obtain introductory-level training on current data analysis methods applicable to 21st century exposure science, toxicology, and environmental health. These modules serve as applications-based examples on how to “TAME” data within the environmental health research field, expanding the toolbox for career development and cross-training of scientists in multiple specialties, as well as supporting the next generation of data scientists. Funding This study was supported by the National Institutes of Health (NIH) from the National Institute of Environmental Health Sciences, including the following grant funds and associated programs: P42ES031007: The University of North Carolina (UNC)-Superfund Research Program (SRP) seeks to develop new solutions for reducing exposure to inorganic arsenic and prevent arsenic-induced diabetes through mechanistic and translational research. The UNC-SRP is Directed by Dr. Rebecca C. Fry. The UNC-SRP Data Analysis and Management Core (UNC-SRP-DMAC) provides the UNC-SRP with critical expertise in bioinformatics, statistics, data management, and data integration. Dr. Julia E. Rager is a Leader of the UNC-SRP-DMAC. T32ES007126: The UNC Curriculum in Toxicology and Environmental Medicine (CiTEM) seeks to provide a cutting edge research and mentoring environment to train students and postdoctoral fellows in environmental health and toxicology. Towards this goal, the CiTEM has a T32 Training Program for Pre- and Postdoctoral Training in Toxicology to support the development of future investigators in environmental health and toxicology. This training program has received supplement funds to expand training efforts centered on data management and data science practices to address current health issues in toxicology and environmental science. The UNC CiTEM is Directed by Dr. Ilona Jaspers. Support was additionally provided through the Institute for Environmental Health Solutions (IEHS) at the University of North Carolina (UNC) Gillings School of Global Public Health. The IEHS is aimed at protecting those who are particularly vulnerable to diseases caused by environmental factors, putting solutions directly into the hands of individuals and communities of North Carolina and beyond. The IEHS is Directed by Dr. Rebecca C. Fry. Author Affiliations Kyle Roell1,†, Lauren Koval1,2,†, Rebecca Boyles3, Grace Patlewicz4, Caroline Ring4, Cynthia Rider5, Cavin Ward-Caviness6, David M. Reif7, Ilona Jaspers1,2,8,9,10, Rebecca C. Fry1,2,8, and Julia E. Rager1,2,8,9 1The Institute for Environmental Health Solutions, Gillings School of Global Public Health, The University of North Carolina at Chapel Hill, Chapel Hill, North Carolina, USA 2Department of Environmental Sciences and Engineering, Gillings School of Global Public Health, The University of North Carolina at Chapel Hill, Chapel Hill, North Carolina, USA 3Research Computing, RTI International, Durham North Carolina, USA 4Center for Computational Toxicology and Exposure, US Environmental Protection Agency, Chapel Hill, North Carolina, USA 5Division of the National Toxicology Program, National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA 6Center for Public Health and Environmental Assessment, US Environmental Protection Agency, Chapel Hill, North Carolina, USA 7Bioinformatics Research Center, Department of Biological Sciences, North Carolina State University, Raleigh, North Carolina, USA 8Curriculum in Toxicology and Environmental Medicine, School of Medicine, University of North Carolina, Chapel Hill, North Carolina, USA 9Center for Environmental Medicine, Asthma and Lung Biology, School of Medicine, University of North Carolina, Chapel Hill, North Carolina, USA 10Department of Pediatrics, Microbiology and Immunology, School of Medicine, University of North Carolina, Chapel Hill, North Carolina, USA †These authors have contributed equally to this work and share first authorship "],["introduction-to-coding-in-r.html", "1.1 Introduction to Coding in R Introduction to Training Module R Packages Scripting Basics Concluding Remarks", " 1.1 Introduction to Coding in R This training module was developed by Dr. Kyle Roell and Dr. Julia E. Rager Fall 2021 Introduction to Training Module What is R? Computer script can be used to increase data analysis reproducibility, transparency, and methods sharing, and is becoming increasingly incorporated into exposure science, toxicology, and environmental health research. One of the most utilized coding language in this research field is the R coding language. Some advantages of using R include the following: Free, open-source programming language that is licensed under the Free Software Foundation’s GNU General Public License Can be run across all major platforms and operating systems, including Unix, Windows, and MacOS Publicly available packages help you carry out analyses efficiently (without you having to code for everything yourself) Large, diverse collection of packages Comprehensive documentation When code is efficiently tracked during development/execution, it promotes reproducible analyses Because of these advantages, R has emerged as an avenue for world-wide collaboration in data science. Downloading and Installing R First, users should download R by navigating to the following website: https://www.r-project.org/ And then clicking the ‘download R’ link: This link will navigate you to the CRAN mirror website. Click on the CRAN mirror location that seems closest to your usual location: This will lead you to the selected CRAN Network website (here, https://archive.linux.duke.edu/cran/), where you will again select a download option: Then, select the top (representing the most recent) available .pkg file to download, and then install according to your computer’s typical program installation steps. Downloading and Installing R Studio What is R Studio? RStudio is an Integrated Development Environment (IDE) for R, which makes it more ‘user friendly’ when developing and using R script. RStudio Desktop is a desktop application that can be downloaded for free, online. To download RStudio: Navigate to: https://rstudio.com/products/rstudio/download/ Select the free RStudio Desktop option, and click “DOWNLOAD” Then download the top (most recent) RStudio Desktop option for your operating system Here is a screenshot of what R script looks like within RStudio: R Packages One of the major benefits to coding in the R language is access to the continually expanding resource of thousands of user-developed packages that aid in improved data analyses and methods sharing. Packages have varying utilities, spanning basic organization and manipulation of data, visualizing data, and more advanced approaches to parse and analyze data, with examples included in all of the proceeding training modules. In brief, packages represent compilations of code fitted for a specialized focus or purpose. These are often written by R users and submitted to the CRAN, or another host such as BioConductor or Github. Examples of some common packages that we’ll be using throughout these training modules include the following: + tidyverse: A collection of open source R packages that share an underlying design philosophy, grammar, and data structures of tidy data. For more information on the tidyverse package, see its associated CRAN webpage, primary webpage, and peer-reviewed article released in 2018. + ggplot2: A system for declaratively creating graphics. Users provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and ggplot2 drafts corresponding visualizations. For more information on the ggplot2 package, see its associated CRAN webpage and R Documentation. More information on these packages, as well as many others, is included throughout the training modules. Downloading/Installing R Packages R packages often do not need to be downloaded from a website. Instead, you can just load packages through running script in R, like: install.packages(“tidyverse”) library(tidyverse) It is worth noting that a function can be queried in RStudio by typing a question mark before the name of the function. For example: ?install.packages This will bring up documentation in the viewer window. Scripting Basics Comments R allows for scripts to contain non-code elements, called comments, that will not be run or interpreted. Comments are commonly included when annotating code, or describing what your code does, where your data came from, and just general textual reminders throughout the script. To make a comment, simply use a # followed by the comment. A # only comments out a single line of code. In other words, only that line will be commented and therefore not be run, but lines directly above/below it still will be # This is an R comment! Comments are useful to help make code more interpretable for others or to add reminders of what and why parts of code may have been written. Starting Code RStudio will autofill function names, variable names, etc. by pressing tab while typing.If multiple matches are found, RStudio will provide you with a drop down list to select from, which may be useful when searching through newly installed packages or trying to quickly type variable names in an R script. One of the first lines of code in any script will likely include the loading of packages needed to run the script. Here is an example line of code to load a package: # Loading ggplot2 package (should already be installed as a base package) library(ggplot2) Many packages also exist as part of the baseline configuration of an R working environment, and do not require manual loading each time you launch R. These include the following packages: + datasets + graphics + methods + stats + utils Setting Your Working Directory Another step that is commonly done at the very beginning of your code is setting your working direction. This points you to where you have files that you want to upload / where the default is to deposit output files produced during your scripted activities. You must set the working directory to a local directory where data are located or output files will be saved. To view where your current working directory is (by default), run the following: Show your working directory getwd() To set the location of your working directory, run the following: Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Note that in macOS, filepaths use “/” as folder separaters; whereas in PCs, filepaths use \"\". Importing Files After setting the working directory, importing and exporting files can be done using various functions based on the type of file being read or written. Often, it is easiest to import data into R that are in a comma separated values / comma delimited file (.csv) or tab / text delimited file (.txt). Other datatypes such as SAS data files, large .csv files, etc. may require different functions to be more efficiently read in and some of these file formats will be discussed in future modules. # Read in the .csv data that&#39;s located in our working directory csv.dataset &lt;- read.csv(&quot;Module1_1/Module1_1_ExampleData.csv&quot;) # Read in the .txt data txt.dataset &lt;- read.table(&quot;Module1_1/Module1_1_ExampleData.txt&quot;) These datasets now appear as saved dataframes (“csv.dataset” and “txt.dataset”) in our working environment in R. Viewing Data After data have been loaded into R, or created within R, you will likely want to view what these datasets look like. Datasets can be viewed in their entirety, or datasets can be subsetted to quickly look at part of the data. Here’s some example script to view just the beginnings of a dataframe, using the “head” function in R (a part of the baseline packages) head(csv.dataset) ## Sample Var1 Var2 Var3 ## 1 sample1 1 2 1 ## 2 sample2 2 4 4 ## 3 sample3 3 6 9 ## 4 sample4 4 8 16 ## 5 sample5 5 10 25 Here, you can see that this automatically brings up a view of the first five rows of the dataframe. Another way to view the first five rows of a dataframe is to run the following: csv.dataset[1:5,] ## Sample Var1 Var2 Var3 ## 1 sample1 1 2 1 ## 2 sample2 2 4 4 ## 3 sample3 3 6 9 ## 4 sample4 4 8 16 ## 5 sample5 5 10 25 Expanding on this, to view the first 5 rows x 2 columns, run the following: csv.dataset[1:5,1:2] ## Sample Var1 ## 1 sample1 1 ## 2 sample2 2 ## 3 sample3 3 ## 4 sample4 4 ## 5 sample5 5 To view the entire dataset in RStudio, use the “View” function: View(csv.dataset) Exporting Data Now that we have these datasets saved as dataframes, we can use these as examples to export data files from the R environment back into our local directory. There are many ways to export data in R. Data can be written out into a .csv file, tab delimited .txt file, RData file, etc. There are also many functions within packages that write out specific datasets generated by that package. To write out to a .csv file: write.csv(csv.dataset, &quot;Module1_1_SameCSVFileNowOut.csv&quot;) To write out a .txt tab delimited file: write.table(txt.dataset, &quot;Module1_1_SameTXTFileNowOut.txt&quot;) R also allows objects to be saved in RData files. These files can be read into R, as well, and will load the object into the current workspace. Entire workspaces are also able to be saved. # Read in saved single R data object (note that this file is not provided, just example code is for future reference) r.obj = readRDS(&quot;data.rds&quot;) # Write single R object to file (note that this file is not provided, just example code is for future reference) saveRDS(object, &quot;single_object.rds&quot;) # Read in multiple saved R objects (note that this file is not provided, just example code is for future reference) load(&quot;multiple_data.RData&quot;) # Save multiple R objects (note that this file is not provided, just example code is for future reference) save(object1, object2, &quot;multiple_objects.RData&quot;) # Save entire workspace save.image(&quot;entire_workspace.RData&quot;) # Load entire workspace load(&quot;entire_workspace.RData&quot;) Concluding Remarks Together, this training module provides introductory level information on installing and loading packages in R. Scripting basics are also included, such as setting a working directory, importing and exporting files, and viewing data within the R console / RStudio environment. Additional resources that provide introductory-level information on coding in R include the following: Coursera provides lots of materials on learning how to program in R: https://www.coursera.org/learn/r-programming &amp; https://www.coursera.org/courses?query=r Stack overflow is an online community of coders that discuss coding problems and how they’ve addressed them: https://stackoverflow.com/questions/1744861/how-to-learn-r-as-a-programming-language Wonderful tutorials are available online, like this one on ‘R for Data Science’: https://r4ds.had.co.nz/ BioConductor provides package-specific help: https://www.bioconductor.org/ An abundance of other resources are available online just by googling! "],["data-organization-basics.html", "1.2 Data Organization Basics Introduction to Training Module Data Manipulation using Base R Syntax Introduction to Tidyverse Concluding Remarks", " 1.2 Data Organization Basics This training module was developed by Dr. Kyle Roell and Dr. Julia E. Rager Fall 2021 Introduction to Training Module Data within the fields of exposure science, toxicology, and public health are very rarely prepared and ready for all statistical analyses/visualization code. The beginning of almost any scripted analysis includes important formatting steps. These steps largely encompass data organization, manipulation, and other steps in preparation for actual statistical analyses/visualizations. Data organization and manipulation generally refers to organizing and formatting data in a way that makes it easier to read and work with. This can be done through several approaches, including: Base R operations and functions, or A collection of packages (and philosophy) known as Tidyverse. In this training tutorial we will go over some of the most common ways you can organize and manipulate data, including: + Merging data + Filtering and subsetting data + Melting and casting data These approaches will first be taught using the basic operations and functions in R. Then, the exact same approaches will be taught using the Tidyverse package and associated functions and syntax. These data manipulation and organization methods are demonstrated using an example environmentally relevant human cohort dataset. This cohort was generated by creating data distributions randomly pulled from our previously published cohorts, resulting in a bespoke dataset for these training purposes with associated demographic data and variable environmental exposure metrics from metal levels obtained using sources of drinking water and human urine samples. Set your working directory In preparation, first let’s set our working directory to the folderpath that contains our input files setwd(&quot;/filepath to where your input files are&quot;) Note that in macOS, filepaths use “/” as folder separaters; whereas in PCs, filepaths use \"\". Importing example datasets Then let’s read in our example datasets demo.data &lt;- read.csv(&quot;Module1_2/Module1_2_DemographicData.csv&quot;) chem.data &lt;- read.csv(&quot;Module1_2/Module1_2_ChemicalData.csv&quot;) Viewing example datasets Let’s see what these datasets look like, starting with the chemical measures: dim(chem.data) ## [1] 200 7 The chemical measurement dataset includes 200 rows x 7 columns chem.data[1:10,1:7] ## ID DWAs DWCd DWCr UAs UCd UCr ## 1 1 6.426464 1.292941 51.67987 10.192695 0.7537104 42.60187 ## 2 2 7.832384 1.798535 50.10409 11.815088 0.9789506 41.30757 ## 3 3 7.516569 1.288461 48.74001 10.079057 0.1903262 36.47716 ## 4 4 5.906656 2.075259 50.92745 8.719123 0.9364825 42.47987 ## 5 5 7.181873 2.762643 55.16882 9.436559 1.4977829 47.78528 ## 6 6 9.723429 3.054057 51.14812 11.589403 1.6645837 38.26386 ## 7 7 6.268547 1.218410 52.08578 8.887948 0.6347667 39.45535 ## 8 8 6.718448 1.414975 54.96740 9.304968 0.6658849 45.09987 ## 9 9 9.074928 2.727755 55.72826 10.818153 1.6585757 42.58577 ## 10 10 5.771691 2.410993 47.06552 8.747217 1.7354305 34.80661 These data are organized according to subject ID (first column), followed by measures of: DWAs (drinking water arsenic levels in µg/L) DWCd (drinking water cadmium levels in µg/L) DWCr (drinking water chromium levels in µg/L) UAs (urinary arsenic levels in µg/L) UCd (urinary cadmium levels in µg/L) UCr (urinary chromium levels in µg/L) Now let’s view the demographic data: dim(demo.data) ## [1] 200 6 The subject demographic dataset includes 200 rows x 6 columns demo.data[1:10,1:6] ## ID BMI MAge MEdu BW GA ## 1 1 27.7 22.99928 3 3180.058 34 ## 2 2 26.8 30.05142 3 3210.823 43 ## 3 3 33.2 28.04660 3 3311.551 40 ## 4 4 30.1 34.81796 3 3266.844 32 ## 5 5 37.4 42.68440 3 3664.088 35 ## 6 6 33.3 24.94960 3 3328.988 40 ## 7 7 24.8 29.54798 3 3061.949 30 ## 8 8 16.9 24.94954 3 3332.539 38 ## 9 9 36.9 33.58589 3 3260.482 39 ## 10 10 21.7 39.29018 3 3141.723 35 These data are organized according to subject ID (first column) followed by the following subject information: BMI (body mass index) MAge (maternal age, years) MEdu (maternal education, 1= “less than high school”; 2= “high school or some college”; 3= “college or greater”) BW (body weight, grams) GA (gestational age, week) Data Manipulation using Base R Syntax Merging Data using Base R Syntax Merging datasets represents the joining together of two or more datasets, while connecting the datasets using a common identifier (generally some sort of ID). This is useful if you have multiple datasets describing different aspects of the study, different variables, or different measures across the same samples. Samples could correspond to the same study participants, animals, cell culture samples, environmental media samples, etc, depending on the study design. In the current example, we will be joining human demographic data and environmental metals exposure data collected from drinking water and human urine samples. Let’s start by merging the example demographic data with the chemical measurement data using the base R function of “merge”. To learn more about this function, you can type the following: ?merge which brings up helpful information in the R console To merge these datasets using the merge function, use the following code: full.data &lt;- merge(demo.data, chem.data, by=&quot;ID&quot;) # note that we specify to merge these datasets by their shared ID column dim(full.data) ## [1] 200 12 This merged dataframe contains 200 rows x 12 columns Viewing this merged dataframe full.data[1:10, 1:12] ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs ## 1 1 27.7 22.99928 3 3180.058 34 6.426464 1.292941 51.67987 10.192695 ## 2 2 26.8 30.05142 3 3210.823 43 7.832384 1.798535 50.10409 11.815088 ## 3 3 33.2 28.04660 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 ## 4 4 30.1 34.81796 3 3266.844 32 5.906656 2.075259 50.92745 8.719123 ## 5 5 37.4 42.68440 3 3664.088 35 7.181873 2.762643 55.16882 9.436559 ## 6 6 33.3 24.94960 3 3328.988 40 9.723429 3.054057 51.14812 11.589403 ## 7 7 24.8 29.54798 3 3061.949 30 6.268547 1.218410 52.08578 8.887948 ## 8 8 16.9 24.94954 3 3332.539 38 6.718448 1.414975 54.96740 9.304968 ## 9 9 36.9 33.58589 3 3260.482 39 9.074928 2.727755 55.72826 10.818153 ## 10 10 21.7 39.29018 3 3141.723 35 5.771691 2.410993 47.06552 8.747217 ## UCd UCr ## 1 0.7537104 42.60187 ## 2 0.9789506 41.30757 ## 3 0.1903262 36.47716 ## 4 0.9364825 42.47987 ## 5 1.4977829 47.78528 ## 6 1.6645837 38.26386 ## 7 0.6347667 39.45535 ## 8 0.6658849 45.09987 ## 9 1.6585757 42.58577 ## 10 1.7354305 34.80661 We can see that the merge function retained the first column in each original dataframe (ID), though did not replicate it since it was used as the identifier to merge off of. All other columns include their original data, just merged together by the IDs in the first column. These datasets were actually quite easy to merge, since they had the same exact column identifier and number of rows. You can edit your script to include more specifics in instances when these may differ across datasets that you would like to merge. For example: full.data &lt;- merge(demo.data, chem.data, by.x=&quot;ID&quot;, by.y=&quot;ID&quot;) # this option allows you to edit the column header text that is used in each datadrame. Here, these are still the same &quot;ID&quot;, but you can see that adding this script allows you to specify instances when differ header text is used. Filtering and Subsetting Data using Base R Syntax Filtering and subsetting data are useful tools when you need to focus your dataset to highlight data you are interested in analyzing downstream. These could represent, for example, specific samples or participants that meet certain criteria that you are interested in evaluating. It is also useful for simply removing particular variables or samples from dataframes as you are working through your script. These methods are illustrated here. For this example, let’s first define a vector of columns that we want to keep in our analysis subset.columns &lt;- c(&quot;BMI&quot;, &quot;MAge&quot;, &quot;MEdu&quot;) subset.columns ## [1] &quot;BMI&quot; &quot;MAge&quot; &quot;MEdu&quot; Now we can simply subset our data using those columns subset.data1 &lt;- full.data[,subset.columns] #subsetting the data by selecting the columns represented in the defined &#39;subset.columns&#39; vector head(subset.data1) #viewing the top of this subsetted dataframe ## BMI MAge MEdu ## 1 27.7 22.99928 3 ## 2 26.8 30.05142 3 ## 3 33.2 28.04660 3 ## 4 30.1 34.81796 3 ## 5 37.4 42.68440 3 ## 6 33.3 24.94960 3 Conversely, if we want to remove all columns except those that we are interested in within the ‘subset.columns’ vector, we can write the code as follows (to achieve the same results). Note that we have to first create a vector of TRUE/FALSE’s here to execute the removal script written below: remove.columns &lt;- colnames(full.data) %in% subset.columns # first specify which columns we would like to remove remove.columns # viewing this new vector ## [1] FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE This creates a vector of TRUE/FALSE’s denoting whether or not each column is included in the ‘subset.columns’ vector Now we can subset our dataset. Here, we decide to keep those that are labeled ‘FALSE’ in the remove.columns vector. This will remove the columns that are NOT contained in the subset.columns vector subset.data2 &lt;- full.data[,!remove.columns] head(subset.data2) # viewing the top of this dataframe ## ID BW GA DWAs DWCd DWCr UAs UCd UCr ## 1 1 3180.058 34 6.426464 1.292941 51.67987 10.192695 0.7537104 42.60187 ## 2 2 3210.823 43 7.832384 1.798535 50.10409 11.815088 0.9789506 41.30757 ## 3 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 0.1903262 36.47716 ## 4 4 3266.844 32 5.906656 2.075259 50.92745 8.719123 0.9364825 42.47987 ## 5 5 3664.088 35 7.181873 2.762643 55.16882 9.436559 1.4977829 47.78528 ## 6 6 3328.988 40 9.723429 3.054057 51.14812 11.589403 1.6645837 38.26386 We can also easily subset data based on row numbers. For example, to keep only the first 100 rows: subset.data3 &lt;- full.data[1:100,] dim(subset.data3) # viewing the dimensions of this new dataframe ## [1] 100 12 To remove the first 100 rows: subset.data4 &lt;- full.data[-c(1:100),] dim(subset.data4) # viewing the dimensions of this new dataframe ## [1] 100 12 To filter data using conditional statements: subset.data5 &lt;- full.data[which(full.data$BMI &gt; 25 &amp; full.data$MAge &gt; 31),] head(subset.data5) # viewing the top of this new dataframe ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs ## 4 4 30.1 34.81796 3 3266.844 32 5.906656 2.0752589 50.92745 8.719123 ## 5 5 37.4 42.68440 3 3664.088 35 7.181873 2.7626433 55.16882 9.436559 ## 9 9 36.9 33.58589 3 3260.482 39 9.074928 2.7277549 55.72826 10.818153 ## 13 13 33.7 33.82961 3 3481.293 36 7.101634 0.8443918 47.11677 9.967185 ## 22 22 25.7 37.08028 3 3387.046 43 7.207447 2.8088453 48.08648 9.446643 ## 31 31 28.4 47.85761 3 3173.033 30 6.032807 2.1929549 45.71856 9.917588 ## UCd UCr ## 4 0.9364825 42.47987 ## 5 1.4977829 47.78528 ## 9 1.6585757 42.58577 ## 13 -0.3466431 36.74220 ## 22 1.9891049 34.16921 ## 31 1.1194851 37.82297 Filtering data based on conditions can also be done using the subset function: subset.data6 &lt;- subset(full.data, BMI &gt; 25 &amp; MAge &gt; 31) Additionally, we can subset and select specific columns we would like to keep, using ‘select’ within the subset function: subset.data7 &lt;- subset(full.data, BMI &lt; 22 | BMI &gt; 27, select=c(&quot;BMI&quot;, &quot;MAge&quot;, &quot;MEdu&quot;)) For more information on the subset function, see its associated RDocumentation website. Melting and Casting Data using Base R Syntax Melting and casting refers to the coversion of data to “long” or “wide” form. You will often see data within the environmental health field in wide format; though long format is necessary for some procedures, such as plotting with ggplot2. Here, we’ll illustrate some example script to melt and cast data using the reshape2 package. Let’s first load the reshape2 library: library(reshape2) Using the fully merged dataframe, let’s remind ourselves what these data look like in the current dataframe format: head(full.data) ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs ## 1 1 27.7 22.99928 3 3180.058 34 6.426464 1.292941 51.67987 10.192695 ## 2 2 26.8 30.05142 3 3210.823 43 7.832384 1.798535 50.10409 11.815088 ## 3 3 33.2 28.04660 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 ## 4 4 30.1 34.81796 3 3266.844 32 5.906656 2.075259 50.92745 8.719123 ## 5 5 37.4 42.68440 3 3664.088 35 7.181873 2.762643 55.16882 9.436559 ## 6 6 33.3 24.94960 3 3328.988 40 9.723429 3.054057 51.14812 11.589403 ## UCd UCr ## 1 0.7537104 42.60187 ## 2 0.9789506 41.30757 ## 3 0.1903262 36.47716 ## 4 0.9364825 42.47987 ## 5 1.4977829 47.78528 ## 6 1.6645837 38.26386 These data are represented by single subject identifiers listed as unique IDs per row, with associated environmental measures and demographic data organized across the columns. Thus, this dataframe is currently in wide (also known as casted) format. Let’s convert this dataframe to long (also known as melted) format: full.melted &lt;- melt(full.data, id=&quot;ID&quot;) # here, we are saying that we want a row for each unique sample ID - variable measure pair head(full.melted) # viewing this new dataframe ## ID variable value ## 1 1 BMI 27.7 ## 2 2 BMI 26.8 ## 3 3 BMI 33.2 ## 4 4 BMI 30.1 ## 5 5 BMI 37.4 ## 6 6 BMI 33.3 You can see here that each measure that was originally contained as a unique column has been reoriented, such that the original column header is now listed throughout the second column labeled “variable”. Then, the third column contains the value of this variable. Let’s see an example view of the middle of this new dataframe full.melted[1100:1110,1:3] ## ID variable value ## 1100 100 DWAs 7.928885 ## 1101 101 DWAs 8.677403 ## 1102 102 DWAs 8.115183 ## 1103 103 DWAs 7.134189 ## 1104 104 DWAs 8.816142 ## 1105 105 DWAs 7.487227 ## 1106 106 DWAs 7.541973 ## 1107 107 DWAs 6.313516 ## 1108 108 DWAs 6.654474 ## 1109 109 DWAs 7.564429 ## 1110 110 DWAs 7.357122 Here, we can see a different variable (DWAs) now being listed. This continues throughout the entire dataframe, which has the following dimensions: dim(full.melted) ## [1] 2200 3 Thus, this dataframe is clearly melted, in long format. Let’s now re-cast this dataframe back into wide format using the ‘dcast’ function full.cast &lt;- dcast(full.melted, ID ~ variable) # here, we are telling the dcast function to give us a sample (ID) for every variable in the column labeled &#39;variable&#39;. Then it automatically fills the dataframe with values from the &#39;value&#39; column head(full.cast) ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs ## 1 1 27.7 22.99928 3 3180.058 34 6.426464 1.292941 51.67987 10.192695 ## 2 2 26.8 30.05142 3 3210.823 43 7.832384 1.798535 50.10409 11.815088 ## 3 3 33.2 28.04660 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 ## 4 4 30.1 34.81796 3 3266.844 32 5.906656 2.075259 50.92745 8.719123 ## 5 5 37.4 42.68440 3 3664.088 35 7.181873 2.762643 55.16882 9.436559 ## 6 6 33.3 24.94960 3 3328.988 40 9.723429 3.054057 51.14812 11.589403 ## UCd UCr ## 1 0.7537104 42.60187 ## 2 0.9789506 41.30757 ## 3 0.1903262 36.47716 ## 4 0.9364825 42.47987 ## 5 1.4977829 47.78528 ## 6 1.6645837 38.26386 Here, we can see that this dataframe is back in its original casted (or wide) format. Introduction to Tidyverse Tidyverse is a collection of packages that are commonly used to more efficiently organize and manipulate datasets in R. This collection of packages has its own specific type of syntax, dataset and formatting protocols that slightly differ from the Base R functions. Here, we will carry out all the of the same data organization exercises described above using Tidyverse. Downloading and Loading the Tidyverse Package If you don’t have tidyverse already installed, you will need to install it using: if(!require(tidyverse)) install.packages(&quot;tidyverse&quot;) And then load the tidyverse package using: library(tidyverse) Merging Data using Tidyverse Syntax To merge the same example dataframes using tidyverse, you can run the following script: full.data.tidy &lt;- inner_join(demo.data, chem.data, by=&quot;ID&quot;) # Note, for future scripting purposes, we can still merge with different IDs using: by = c(&quot;ID.Demo&quot;=&quot;ID.Chem&quot;) head(full.data.tidy) ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs ## 1 1 27.7 22.99928 3 3180.058 34 6.426464 1.292941 51.67987 10.192695 ## 2 2 26.8 30.05142 3 3210.823 43 7.832384 1.798535 50.10409 11.815088 ## 3 3 33.2 28.04660 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 ## 4 4 30.1 34.81796 3 3266.844 32 5.906656 2.075259 50.92745 8.719123 ## 5 5 37.4 42.68440 3 3664.088 35 7.181873 2.762643 55.16882 9.436559 ## 6 6 33.3 24.94960 3 3328.988 40 9.723429 3.054057 51.14812 11.589403 ## UCd UCr ## 1 0.7537104 42.60187 ## 2 0.9789506 41.30757 ## 3 0.1903262 36.47716 ## 4 0.9364825 42.47987 ## 5 1.4977829 47.78528 ## 6 1.6645837 38.26386 Filtering and Subsetting Data using Tidyverse Syntax To subset columns in tidyverse, run the following: subset.tidy1 = full.data.tidy %&gt;% select(all_of(subset.columns)) head(subset.tidy1) ## BMI MAge MEdu ## 1 27.7 22.99928 3 ## 2 26.8 30.05142 3 ## 3 33.2 28.04660 3 ## 4 30.1 34.81796 3 ## 5 37.4 42.68440 3 ## 6 33.3 24.94960 3 Note that you can also include column identifiers that may get dropped in the subsetting vector here: subset.columns2 &lt;- c(subset.columns, &quot;NotAColName&quot;) # Note that we&#39;re including a &#39;fake&#39; column here &#39;NotAColName&#39; to illustrate how to incorporate additional columns; though this column gets dropped in the next line of code subset.columns2 # viewing this new vector ## [1] &quot;BMI&quot; &quot;MAge&quot; &quot;MEdu&quot; &quot;NotAColName&quot; subset.tidy2 &lt;- full.data.tidy %&gt;% select(any_of(subset.columns2)) head(subset.tidy2) # viewing the top of this new dataframe ## BMI MAge MEdu ## 1 27.7 22.99928 3 ## 2 26.8 30.05142 3 ## 3 33.2 28.04660 3 ## 4 30.1 34.81796 3 ## 5 37.4 42.68440 3 ## 6 33.3 24.94960 3 Note that the ‘fake’ column ‘NotAColName’ gets automatically dropped here To remove columns using tidyverse, you can run the following: #Removing columns subset.tidy3 &lt;- full.data.tidy %&gt;% select(-subset.columns) head(subset.tidy3) # viewing this new dataframe ## ID BW GA DWAs DWCd DWCr UAs UCd UCr ## 1 1 3180.058 34 6.426464 1.292941 51.67987 10.192695 0.7537104 42.60187 ## 2 2 3210.823 43 7.832384 1.798535 50.10409 11.815088 0.9789506 41.30757 ## 3 3 3311.551 40 7.516569 1.288461 48.74001 10.079057 0.1903262 36.47716 ## 4 4 3266.844 32 5.906656 2.075259 50.92745 8.719123 0.9364825 42.47987 ## 5 5 3664.088 35 7.181873 2.762643 55.16882 9.436559 1.4977829 47.78528 ## 6 6 3328.988 40 9.723429 3.054057 51.14812 11.589403 1.6645837 38.26386 Subsetting rows using tidyverse: subset.tidy4 &lt;- full.data.tidy %&gt;% slice(1:100) # selecting to retain the first 100 rows dim(subset.tidy4) ## [1] 100 12 subset.tidy5 &lt;- full.data.tidy %&gt;% slice(-c(1:100)) # selecting to remove the first 100 rows dim(subset.tidy5) ## [1] 100 12 Filtering data based on conditional statements using tidyverse: subset.tidy6 &lt;- full.data.tidy %&gt;% filter(BMI &gt; 25 &amp; MAge &gt; 31) dim(subset.tidy6) ## [1] 49 12 Another example of a conditional statement that can be used to filter data: subset.tidy7 &lt;- full.data.tidy %&gt;% filter(BMI &gt; 25 &amp; MAge &gt; 31) %&gt;% select(BMI, MAge, MEdu) Melting and Casting Data using Tidyverse Syntax To melt and cast data in tidyverse, you can use the ‘pivot’ functions (i.e., ‘pivot_longer’ or ’pivot_wider). These are exemplified below. Melting to long format using tidyverse: full.pivotlong &lt;- full.data.tidy %&gt;% pivot_longer(-ID, names_to = &quot;var&quot;, values_to = &quot;value&quot;) head(full.pivotlong, 15) ## # A tibble: 15 x 3 ## ID var value ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 BMI 27.7 ## 2 1 MAge 23.0 ## 3 1 MEdu 3 ## 4 1 BW 3180. ## 5 1 GA 34 ## 6 1 DWAs 6.43 ## 7 1 DWCd 1.29 ## 8 1 DWCr 51.7 ## 9 1 UAs 10.2 ## 10 1 UCd 0.754 ## 11 1 UCr 42.6 ## 12 2 BMI 26.8 ## 13 2 MAge 30.1 ## 14 2 MEdu 3 ## 15 2 BW 3211. Casting to wide format using tidyverse: full.pivotwide &lt;- full.pivotlong %&gt;% pivot_wider(names_from = &quot;var&quot;, values_from=&quot;value&quot;) head(full.pivotwide) ## # A tibble: 6 x 12 ## ID BMI MAge MEdu BW GA DWAs DWCd DWCr UAs UCd UCr ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 27.7 23.0 3 3180. 34 6.43 1.29 51.7 10.2 0.754 42.6 ## 2 2 26.8 30.1 3 3211. 43 7.83 1.80 50.1 11.8 0.979 41.3 ## 3 3 33.2 28.0 3 3312. 40 7.52 1.29 48.7 10.1 0.190 36.5 ## 4 4 30.1 34.8 3 3267. 32 5.91 2.08 50.9 8.72 0.936 42.5 ## 5 5 37.4 42.7 3 3664. 35 7.18 2.76 55.2 9.44 1.50 47.8 ## 6 6 33.3 24.9 3 3329. 40 9.72 3.05 51.1 11.6 1.66 38.3 Concluding Remarks Together, this training module provides introductory level information on the basics of data organization in R. The important data organization / manipulation methods of merging, filtering, subsetting, melting, and casted are presented on an environmentally relevant dataset. "],["finding-and-visualizing-data-trend.html", "1.3 Finding and Visualizing Data Trend Introduction to Training Module Basic Data Anayslis Regression Modeling and Visualization: Linear and Logistic Regressions Categorical Data Analysis Concluding Remarks", " 1.3 Finding and Visualizing Data Trend This training module was developed by Dr. Kyle Roell and Dr. Julia E. Rager Fall 2021 Introduction to Training Module This training module provides a brief introduction to some of the most commonly implemented statistics and associated visualizations used in exposure science, toxicology, and environmental health studies. This module first uploads an example dataset that is similar to the data used in the previous data organization training module, though includes some expanded subject information data to allow for more example statistical tests. Then, methods to evaluate data normality are presented, including visualization-based approaches using histograms and Q-Q plots as well as statistical-based approaches. Basic statistical tests are then presented, including the t-test, analysis of variance, regression modeling, chi-squared test, and Fischer’s exact test. These statistical tests are very simple, with more extensive examples and associated descriptions of statistical models in the proceeding applications-based training modules. Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;); Loading R packages required for this session library(tidyverse) #all tidyverse packages, including dplyr and ggplot2 Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Importing example datasets Then let’s read in our example dataset. Note that these data are similar to those used in the previous training module on data organization, except that demographic and chemical measurement data were previously merged, and a few additional columns of subject information/demographics were added to serve as more thorough examples of data for use in this training module. full.data &lt;- read.csv(&quot;Module1_3/Module1_3_FullDemoChemData.csv&quot;) Viewing example datasets Let’s see what this dataset looks like: dim(full.data) ## [1] 200 15 This dataset includes 200 rows x 15 columns Let’s view the top of the first 9 columns of data in this dataframe: full.data[1:10,1:9] ## ID BMI BMIcat MAge MEdu BW GA Smoker Smoker3 ## 1 1 27.7 Overweight 22.99928 3 3180.058 34 0 Never ## 2 2 26.8 Overweight 30.05142 3 3210.823 43 1 Never ## 3 3 33.2 Overweight 28.04660 3 3311.551 40 0 Never ## 4 4 30.1 Overweight 34.81796 3 3266.844 32 1 Never ## 5 5 37.4 Overweight 42.68440 3 3664.088 35 0 Never ## 6 6 33.3 Overweight 24.94960 3 3328.988 40 0 Never ## 7 7 24.8 Overweight 29.54798 3 3061.949 30 0 Never ## 8 8 16.9 Underweight 24.94954 3 3332.539 38 0 Current ## 9 9 36.9 Overweight 33.58589 3 3260.482 39 0 Never ## 10 10 21.7 Normal 39.29018 3 3141.723 35 0 Current These represent the subject information/demographic data, which include the following columns: ID (subject number) BMI (body mass index) BMIcat (BMI &lt;= 18.5 binned as “Underweight”; 18.5 &lt; BMI &lt;= 24.5 binned as “Normal”; BMI &gt; 24.5 binned as “Overweight”) MAge (maternal age, years) MEdu (maternal education, 1= “less than high school”; 2= “high school or some college”; 3= “college or greater”) BW (body weight, grams) GA (gestational age, week) Smoker (0= non-smoker; 1=smoker) Smoker3 (“Never”, “Former”, or “Current” smoking status) Let’s now view the remaining columns (columns 10-15) in this dataframe: full.data[1:10,10:15] ## DWAs DWCd DWCr UAs UCd UCr ## 1 6.426464 1.292941 51.67987 10.192695 0.7537104 42.60187 ## 2 7.832384 1.798535 50.10409 11.815088 0.9789506 41.30757 ## 3 7.516569 1.288461 48.74001 10.079057 0.1903262 36.47716 ## 4 5.906656 2.075259 50.92745 8.719123 0.9364825 42.47987 ## 5 7.181873 2.762643 55.16882 9.436559 1.4977829 47.78528 ## 6 9.723429 3.054057 51.14812 11.589403 1.6645837 38.26386 ## 7 6.268547 1.218410 52.08578 8.887948 0.6347667 39.45535 ## 8 6.718448 1.414975 54.96740 9.304968 0.6658849 45.09987 ## 9 9.074928 2.727755 55.72826 10.818153 1.6585757 42.58577 ## 10 5.771691 2.410993 47.06552 8.747217 1.7354305 34.80661 These columns represent the environmental exposure measures, including: DWAs (drinking water arsenic levels in µg/L) DWCd (drinking water cadmium levels in µg/L) DWCr (drinking water chromium levels in µg/L) UAs (urinary arsenic levels in µg/L) UCd (urinary cadmium levels in µg/L) UCr (urinary chromium levels in µg/L) Now that the script is prepared and the data are uploaded, we can start running some basic statistical tests and visualizations of data trends. Basic Data Anayslis Visualize and Test Data for Normality When selecting the appropriate statistical tests to evaluate potential trends in your data, statistical test selection often relies upon whether or not the underlying data are normally distributed. Many statistical tests and methods that are commonly implemented in exposure science, toxicology, and environmental health research rely on assumptions of normality. Thus, one of the most common statistic tests to perform at the beginning of an analysis is a test for normality. There are a few ways to evaluate the normality of a dataset: First, you can visually gage whether a dataset appears to be normally distributed through plots. For example, plotting data using histograms, densities, or Q-Q plots can graphically help inform if a variable’s values appear to be normally distributed or not. Second, you can evaluate normality using statistical tests, such as the Kolmogorov-Smirnov (K-S) test and Shapiro-Wilk test. When using these tests and interpreting their results, it is important to remember that the null hypothesis is that the sample distribution is normal, and a significant p-value means the distribution is non-normal. Let’s start with the first approach, based on data visualizations. Here, let’s begin with a histogram to view the distribution of BMI data, as an example. hist(full.data$BMI) We can edit some of the parameters to improve this basic histogram visualization. For example, we can decrease the size of each bin using breaks parameter: hist(full.data$BMI, breaks=20) Let’s also view the Q–Q (quantile-quantile) plot using the qqnorm function qqnorm(full.data$BMI) qqline(full.data$BMI) # adding a reference line for theoretically normally distributed data From these visualizations, the BMI variable appears to be normally distributed, with data centered in the middle and spreading with a distribution on both the lower and upper sides that follow typical normal data distributions. Let’s now implement the second approach, based on statistical tests for normality. Here, let’s use the Shapiro-Wilk test as an example, again looking at the BMI data. This test can be carried out simply using the shapiro.test function from the base R stats package. shapiro.test(full.data$BMI) ## ## Shapiro-Wilk normality test ## ## data: full.data$BMI ## W = 0.99232, p-value = 0.3773 This test resulted in a p-value of 0.9014, so cannot reject the null hypothesis (that data are normally distributed). This means that we can assume that these data are normally distributed. Two-Group Visualizations and Statistical Comparisons using the T-Test T-tests are commonly used to test for a significant difference between the means of two groups. In this example, we will be comparing BMI measures between two groups: smokers vs. non-smokers. We will specifically be implementing a two sample t-test (or independent samples t-test). Let’s first visualize the BMI data across these two groups using boxplots, for this example: boxplot(data=full.data, BMI ~ Smoker) From this plot, it looks like non-smokers (labeled 0) may have significantly higher BMI than smokers (labeled 1), though we need statistical evaluation of these data to more thoroughly evaluate this potential data trend. It is easy to peform a t-test on these data using the t.test function from the base R stats package: t.test(data=full.data, BMI ~ Smoker) ## ## Welch Two Sample t-test ## ## data: BMI by Smoker ## t = 2.5372, df = 80.362, p-value = 0.01311 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.583061 4.823447 ## sample estimates: ## mean in group 0 mean in group 1 ## 26.11176 23.40851 From this statistical output, we can see that the overall mean BMI in group 0 (non-smokers) is 26, and the overall mean BMI in group 1 (smokers) is 23. We can also see that the resulting p-value comparison between the means of these two groups is, indeed, significant (p=0.0125), meaning that the means across these groups are significantly different (i.e., are not equal). It’s also helpful to save these results into a variable within the R global environment, which then allows us to access specific output values and extract them more easily for our records. For example, we can run the following to specifically extract the resulting p-value from this test: ttest.res &lt;- t.test(data=full.data, BMI ~ Smoker) # making a list in the R global environment with the statistical results ttest.res$p.value # pulling the p-value ## [1] 0.01310998 Two-Group Visualizations and Statistical Comparisons using an ANOVA Analysis of Variance (ANOVA) is a statistical method that can be used to compare means across more than two groups. To demonstrate an ANOVA test on this dataset, let’s evaluate BMI distributions across current vs. former vs. never smokers (using the ‘Smoker3’ variable from our dataset). Let’s again, start by viewing these data distributions using a boxplot: boxplot(data=full.data, BMI ~ Smoker3) Let’s also calculate the group means using tidyverse syntax and the summarise function, as helpful example script: #Can also get group means full.data %&gt;% group_by(Smoker3) %&gt;% summarise(mean(BMI)) ## # A tibble: 3 x 2 ## Smoker3 `mean(BMI)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Current 19.1 ## 2 Former 26.5 ## 3 Never 27.2 From this cursory review of the data, it looks like the current smokers likely demonstrate significantly different BMI measures than the former and never smokers, though we need statistical tests to verify this potential trend. We also require statistical tests to evaluate potential differences (or lack of differences) between former and never smokers. Let’s now run the ANOVA to compare BMI between smoking groups, using the aov function to fit an ANOVA model: aov(data=full.data, BMI ~ Smoker3) ## Call: ## aov(formula = BMI ~ Smoker3, data = full.data) ## ## Terms: ## Smoker3 Residuals ## Sum of Squares 2046.713 6817.786 ## Deg. of Freedom 2 197 ## ## Residual standard error: 5.882861 ## Estimated effects may be unbalanced We can extract the typical ANOVA results table using either summary or anova on the resulting fitted object anova(aov(data=full.data, BMI ~ Smoker3)) ## Analysis of Variance Table ## ## Response: BMI ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Smoker3 2 2046.7 1023.36 29.57 5.888e-12 *** ## Residuals 197 6817.8 34.61 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 From this ANOVA output table, we can conclude that the group means across all three groups are not equal. Regression Modeling and Visualization: Linear and Logistic Regressions Regression modeling aims to find a relationship between a dependent variable (or outcome, response, y) and an independent variable (or predictor, explanatory variable, x). There are many forms of regression analysis, but here we will focus on two: linear regression and logistic regression. In brief, linear regression is generally used when you have a continuous dependent variable and there is assumed to be some sort of linear relationship between the dependent and independent variables. Conversely, logistic regression is often used when the dependent variable is dichotomous (0 or 1). Let’s first run through an example linear regression model. Linear Regression For this example, let’s evaluate the potential relationship between the subjects’ birthweight (BW) and BMI. Here, we will first visualize the data and a run simple correlation analysis to evaluate whether these data are generally correlated. Then, we will run a linear regression to evaluate the relationship between these variables in more detail. Plotting the variables against one another using the basic ‘plot’ function to produce a scatterplot: plot(data=full.data, BW ~ BMI) Running a basic collection analyses between these two variables using the ‘cor’ function: cor(full.data$BW, full.data$BMI) ## [1] 0.2485164 The provides a correlation coefficient (R) value of 0.25. Let’s now use the ‘cor.test’ function to extract the correlation p-value: cor.res &lt;- cor.test(full.data$BW, full.data$BMI) cor.res$p.value ## [1] 0.0003876464 Checking to see that we get the same correlation coefficient (R) using this function: cor.res$estimate ## cor ## 0.2485164 Together, it looks like there may be a relationship between BW and BMI, based on these correlation results, demonstrating a significant p-value of 0.0004. To test this further, let’s run a linear regression analysis using the ‘lm’ function, using BMI (X) as the independent variable and BW as the dependent variable (Y): lm.res &lt;- lm(data=full.data, BW ~ BMI) summary(lm.res) #viewing the results summary ## ## Call: ## lm(formula = BW ~ BMI, data = full.data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -598.39 -116.72 8.11 136.54 490.11 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3069.201 52.576 58.38 &lt; 2e-16 *** ## BMI 7.208 1.997 3.61 0.000388 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 188 on 198 degrees of freedom ## Multiple R-squared: 0.06176, Adjusted R-squared: 0.05702 ## F-statistic: 13.03 on 1 and 198 DF, p-value: 0.0003876 We can see here that the relationship between BMI and BW is shown to be significant, with a p-value of 0.000411 We can also derive confidence intervals for the BMI estimate using: confint(lm.res)[&quot;BMI&quot;,] ## 2.5 % 97.5 % ## 3.270873 11.145740 Notice that the r-squared (R^2) value in regression output is the squared value of the previously calculated correlation coefficient (R) sqrt(summary(lm.res)$r.squared) ## [1] 0.2485164 In epidemiological studies, the potential influence of confounders is considered by including important covariates within the final regression model. Here, let’s include the covariates of maternal age (MAge) and gestational age (GA) as an example for running a linear regression model with covariates: summary(lm(data=full.data, BW ~ BMI + MAge + GA)) ## ## Call: ## lm(formula = BW ~ BMI + MAge + GA, data = full.data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -454.04 -111.24 5.79 116.46 488.41 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2247.995 117.946 19.060 &lt; 2e-16 *** ## BMI 6.237 1.774 3.515 0.000547 *** ## MAge 4.269 1.887 2.263 0.024752 * ## GA 19.612 2.656 7.385 4.28e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 165.5 on 196 degrees of freedom ## Multiple R-squared: 0.2805, Adjusted R-squared: 0.2695 ## F-statistic: 25.47 on 3 and 196 DF, p-value: 5.884e-14 Here, we can see that BMI is still significantly associated with BW, and the included covariates are also shown to be related to BW in this model. Let’s further visualize these regression modeling results by adding a regression line to the original scatterplot: plot(data=full.data, BW ~ BMI) abline(lm(data=full.data, BW ~ BMI)) # add a regression line to plot Collectively, these results demonstrate a significantly relationship between BMI and BW, both when modeling with and without covariates. Logistic Regression To carry out a logistic regression, we need to evaluate one continuous variable (here, we select material education, using MEdu variable) and one dichotomous variable (here, we select smoking status, using the Smoker variable). When considering these data, we may hypothesize that higher levels of education are negatively associated with smoking status. In other words, those with higher education are less likely to smoke. Because smoking status is a dichotomous variable, we will use logistic regression to look at this relationship. Let’s first visualize these data using a boxplot for the dichotomous smoker dataset: boxplot(MEdu ~ Smoker, data=full.data) With this visualization, it’s difficult to tell whether or not there are significant differences in maternal education based on smoking status. Let’s now run the statistical analysis, using logistic regression modeling: # use GLM (generalized linear model) and specify the family as binomial # this tells GLM to run a logistic regression log.res = glm(Smoker ~ MEdu, family = &quot;binomial&quot;, data=full.data) summary(log.res) # viewing the results ## ## Call: ## glm(formula = Smoker ~ MEdu, family = &quot;binomial&quot;, data = full.data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.8261 -0.7052 -0.7052 -0.7052 1.7398 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.7172 0.6031 -1.189 0.234 ## MEdu -0.1826 0.2305 -0.792 0.428 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 218.10 on 199 degrees of freedom ## Residual deviance: 217.49 on 198 degrees of freedom ## AIC: 221.49 ## ## Number of Fisher Scoring iterations: 4 Similar to the regression modeling analysis, we can also derive confidence intervals: confint(log.res)[&quot;MEdu&quot;,] ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## -0.6262616 0.2839524 Collectively, these results show a non-significant p-value relating maternal education to smoking status. The confidence intervals also overlap across zero. Therefore, these data do not demonstrate a significant association between maternal education and smoking status. Categorical Data Analysis Chi-Squared Test and Fisher’s Exact Test Chi-squared test and Fisher’s exact tests are used primarily when evaluating data distributions between two categorical variables. The difference between a Chi-squared test and the Fisher’s exact test surrounds the specific procedure being run. Basically, the Chi-squared test is an approximation and is run with larger sample sizes to determine whether there is a statistically significant difference between the expected vs. observed frequencies in one or more categories of a contingency table. The Fisher’s exact test is similar, though is an exact measure that can be run on any sample size, including smaller sample sizes. For this example, we are interested in evaluating the potential relationship between two categorical variables: smoking status (using the ‘Smoker’ variable) and categorical BMI group (using the ‘BMIcat’ variable). To run these categorical statistical tests, let’s first create and view a 2-way contingency table, describing the frequencies of observations across the categorical BMI and smoking groups: ContingencyTable &lt;- with(full.data, table(BMIcat, Smoker)) ContingencyTable ## Smoker ## BMIcat 0 1 ## Normal 43 14 ## Overweight 87 22 ## Underweight 23 11 Now let’s run the Chi-squared test on this table: chisq.test(ContingencyTable) ## ## Pearson&#39;s Chi-squared test ## ## data: ContingencyTable ## X-squared = 2.1849, df = 2, p-value = 0.3354 This results in a p-value = 0.34, demonstrating that there is no significant relationship between BMI categories and smoking status based off this test. Note that we can also run the Chi-squared test using the following code, without having to generate the contingency table: chisq.test(full.data$BMI, full.data$Smoker) ## ## Pearson&#39;s Chi-squared test ## ## data: full.data$BMI and full.data$Smoker ## X-squared = 143.17, df = 144, p-value = 0.5039 Or: with(full.data, chisq.test(BMI, Smoker)) ## ## Pearson&#39;s Chi-squared test ## ## data: BMI and Smoker ## X-squared = 143.17, df = 144, p-value = 0.5039 Note that these all produce the same results. We can also run a Fisher’s Exact Test when considering smaller cell sizes. We won’t run this here due to computing time, but here is some example code for your records: #With small cell sizes, can use Fisher&#39;s Exact Test #fisher.test(full.data$BMI, full.data$Smoker) Concluding Remarks In conclusion, this training module serves as a high-level introduction to basic statistics and visualization methods. Statistical approaches described in this traiing module include tests for normality, t-test, analysis of variance, regression modeling, chi-squared test, and Fischer’s exact test. Visualization approaches include boxplots, histograms, scatterplots, and regression lines. These methods serve as an important foundation for nearly all studies carried out in environmental health research. "],["high-dimensional-data-visualizations.html", "1.4 High-Dimensional Data Visualizations Introduction to Training Module High-Dimensional Data Visualizations Concluding Remarks", " 1.4 High-Dimensional Data Visualizations This training module was developed by Dr. Kyle Roell, Lauren Koval, and Dr. Julia E. Rager Fall 2021 Introduction to Training Module Visualizing data is an important step in data analysis. Often, visualizations allow scientists to better understand trends and patterns within the dataset. Even when you have previously analyzed a dataset and have identified certain data trends, it is important to then be able to communicate these findings to a wide variety of target audiences. Visualizations are a vital part of communicating complex data and results to your target audience. There are many ways to visualize data, from simple scatter plots to more complicated heatmaps. The previous training module included some example visualization methods while evaluating basic trends in environmental health datasets. Here, we expand upon these methods by highlighting some that can be used to visualize larger, more high-dimensional datasets. This training module specifically reviews the formatting of data in preparation of generating visualizations, scaling datasets, and then guides users through the generation of the following example data visualizations: Density plots GGally plots Boxplots Correlation plots Hierarchical clustering Heatmaps These visualization approaches are demonstrated using a large environmental chemistry dataset. This example dataset was generated through chemical speciation analysis of smoke samples collected during lab-based simulations of wildfire events. Specifically, different biomass materials (eucalyptus, peat, pine, pine needles, and red oak) were burned under two combustion conditions of flaming and smoldering, resulting in the generation of 12 different smoke samples. These data have been previously published in the following example environmental health research studies, with data made publicly available: Rager JE, Clark J, Eaves LA, Avula V, Niehoff NM, Kim YH, Jaspers I, Gilmour MI. Mixtures modeling identifies chemical inducers versus repressors of toxicity associated with wildfire smoke. Sci Total Environ. 2021 Jun 25;775:145759. doi: 10.1016/j.scitotenv.2021.145759. Epub 2021 Feb 10. PMID: 33611182. Kim YH, Warren SH, Krantz QT, King C, Jaskot R, Preston WT, George BJ, Hays MD, Landis MS, Higuchi M, DeMarini DM, Gilmour MI. Mutagenicity and Lung Toxicity of Smoldering vs. Flaming Emissions from Various Biomass Fuels: Implications for Health Effects from Wildland Fires. Environ Health Perspect. 2018 Jan 24;126(1):017011. doi: 10.1289/EHP2200. PMID: 29373863. Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;GGally&quot;)) install.packages(&quot;GGally&quot;); if (!requireNamespace(&quot;superheat&quot;)) install.packages(&quot;superheat&quot;); if (!requireNamespace(&quot;pheatmap&quot;)) install.packages(&quot;pheatmap&quot;); if (!requireNamespace(&quot;viridis&quot;)) install.packages(&quot;viridis&quot;); Loading R packages required for this session library(ggplot2); library(GGally); library(superheat); library(pheatmap); library(corrplot); library(reshape2); library(viridis); Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Importing example dataset Then let’s read in our example dataset. As mentioned in the introduction, this example dataset represents chemical measurements across 12 different biomass burn scenarios, representing potential wildfire events. Let’s upload and view these data: SmokeData1 &lt;- read.csv(&quot;Module1_4/Module1_4_DataforVisualizations.csv&quot;); #load the data head(SmokeData1) #view the top of the dataset ## Chemical.Category Chemical CASRN Eucalyptus_Smoldering ## 1 n-Alkanes 2-Methylnonadecane 1560-86-7 0.06 ## 2 n-Alkanes 3-Methylnonadecane 6418-45-7 0.04 ## 3 n-Alkanes Docosane 629-97-0 0.21 ## 4 n-Alkanes Dodecylcyclohexane 1795-17-1 0.04 ## 5 n-Alkanes Eicosane 112-95-8 0.11 ## 6 n-Alkanes Heneicosane 629-94-7 0.13 ## Eucalyptus_Flaming Peat_Smoldering Peat_Flaming Pine_Smoldering Pine_Flaming ## 1 0.06 1.36 0.06 0.06 0.06 ## 2 0.04 1.13 0.90 0.47 0.04 ## 3 0.25 9.46 0.57 0.16 0.48 ## 4 0.04 0.25 0.04 0.04 0.04 ## 5 0.25 7.55 0.54 0.17 0.29 ## 6 0.28 6.77 0.34 0.13 0.42 ## Pine_Needles_Smoldering Pine_Needles_Flaming Red_Oak_Smoldering ## 1 0.06 0.06 0.06 ## 2 0.04 0.72 0.04 ## 3 0.32 0.18 0.16 ## 4 0.12 0.04 0.04 ## 5 0.28 0.16 0.15 ## 6 0.30 0.13 0.13 ## Red_Oak_Flaming Units ## 1 0.13 ng_per_uL ## 2 0.77 ng_per_uL ## 3 0.36 ng_per_uL ## 4 0.04 ng_per_uL ## 5 0.38 ng_per_uL ## 6 0.69 ng_per_uL Formatting dataframes for downstream visualization code For some of the visualizations below (e.g., heat maps) we’ll use data from the original full dataframe. The only formatting that needs to be done to this dataframe is to move the chemical names to the row names position of the dataframe: rownames(SmokeData1) &lt;- SmokeData1$Chemical head(SmokeData1) #view the top of the reorganized dataset ## Chemical.Category Chemical CASRN ## 2-Methylnonadecane n-Alkanes 2-Methylnonadecane 1560-86-7 ## 3-Methylnonadecane n-Alkanes 3-Methylnonadecane 6418-45-7 ## Docosane n-Alkanes Docosane 629-97-0 ## Dodecylcyclohexane n-Alkanes Dodecylcyclohexane 1795-17-1 ## Eicosane n-Alkanes Eicosane 112-95-8 ## Heneicosane n-Alkanes Heneicosane 629-94-7 ## Eucalyptus_Smoldering Eucalyptus_Flaming Peat_Smoldering ## 2-Methylnonadecane 0.06 0.06 1.36 ## 3-Methylnonadecane 0.04 0.04 1.13 ## Docosane 0.21 0.25 9.46 ## Dodecylcyclohexane 0.04 0.04 0.25 ## Eicosane 0.11 0.25 7.55 ## Heneicosane 0.13 0.28 6.77 ## Peat_Flaming Pine_Smoldering Pine_Flaming ## 2-Methylnonadecane 0.06 0.06 0.06 ## 3-Methylnonadecane 0.90 0.47 0.04 ## Docosane 0.57 0.16 0.48 ## Dodecylcyclohexane 0.04 0.04 0.04 ## Eicosane 0.54 0.17 0.29 ## Heneicosane 0.34 0.13 0.42 ## Pine_Needles_Smoldering Pine_Needles_Flaming ## 2-Methylnonadecane 0.06 0.06 ## 3-Methylnonadecane 0.04 0.72 ## Docosane 0.32 0.18 ## Dodecylcyclohexane 0.12 0.04 ## Eicosane 0.28 0.16 ## Heneicosane 0.30 0.13 ## Red_Oak_Smoldering Red_Oak_Flaming Units ## 2-Methylnonadecane 0.06 0.13 ng_per_uL ## 3-Methylnonadecane 0.04 0.77 ng_per_uL ## Docosane 0.16 0.36 ng_per_uL ## Dodecylcyclohexane 0.04 0.04 ng_per_uL ## Eicosane 0.15 0.38 ng_per_uL ## Heneicosane 0.13 0.69 ng_per_uL For most other visualizations below, we’ll need a separate dataframe that just contains the chemical concentration columns (specifically columns 4 through 13 from the above view). Let’s create this separate dataframe and call it SmokeData2. First, we’ll pull the chemical concentration values from columns 4 through 13. While we pull these values, let’s also check that they are recognized as numeric values using the ‘apply’ function. Here, we run the apply function across columns 4 through 13 (SmokeData[,4:13]) by columns (indicated by the number 2; if we wanted this by rows we would use the number 1), and coerce all values to numeric using the ‘as.numeric’ function. ## Eucalyptus_Smoldering Eucalyptus_Flaming Peat_Smoldering Peat_Flaming ## [1,] 0.06 0.06 1.36 0.06 ## [2,] 0.04 0.04 1.13 0.90 ## [3,] 0.21 0.25 9.46 0.57 ## [4,] 0.04 0.04 0.25 0.04 ## [5,] 0.11 0.25 7.55 0.54 ## [6,] 0.13 0.28 6.77 0.34 ## Pine_Smoldering Pine_Flaming Pine_Needles_Smoldering Pine_Needles_Flaming ## [1,] 0.06 0.06 0.06 0.06 ## [2,] 0.47 0.04 0.04 0.72 ## [3,] 0.16 0.48 0.32 0.18 ## [4,] 0.04 0.04 0.12 0.04 ## [5,] 0.17 0.29 0.28 0.16 ## [6,] 0.13 0.42 0.30 0.13 ## Red_Oak_Smoldering Red_Oak_Flaming ## [1,] 0.06 0.13 ## [2,] 0.04 0.77 ## [3,] 0.16 0.36 ## [4,] 0.04 0.04 ## [5,] 0.15 0.38 ## [6,] 0.13 0.69 For more information on the apply function, see its RDocumentation and a helpful tutorial on the R apply family of functions. Let’s now add back in the chemical identifiers, by grabbing the row names from the original dataframe, SmokeData1. ## Eucalyptus_Smoldering Eucalyptus_Flaming Peat_Smoldering ## 2-Methylnonadecane 0.06 0.06 1.36 ## 3-Methylnonadecane 0.04 0.04 1.13 ## Docosane 0.21 0.25 9.46 ## Dodecylcyclohexane 0.04 0.04 0.25 ## Eicosane 0.11 0.25 7.55 ## Heneicosane 0.13 0.28 6.77 ## Peat_Flaming Pine_Smoldering Pine_Flaming ## 2-Methylnonadecane 0.06 0.06 0.06 ## 3-Methylnonadecane 0.90 0.47 0.04 ## Docosane 0.57 0.16 0.48 ## Dodecylcyclohexane 0.04 0.04 0.04 ## Eicosane 0.54 0.17 0.29 ## Heneicosane 0.34 0.13 0.42 ## Pine_Needles_Smoldering Pine_Needles_Flaming ## 2-Methylnonadecane 0.06 0.06 ## 3-Methylnonadecane 0.04 0.72 ## Docosane 0.32 0.18 ## Dodecylcyclohexane 0.12 0.04 ## Eicosane 0.28 0.16 ## Heneicosane 0.30 0.13 ## Red_Oak_Smoldering Red_Oak_Flaming ## 2-Methylnonadecane 0.06 0.13 ## 3-Methylnonadecane 0.04 0.77 ## Docosane 0.16 0.36 ## Dodecylcyclohexane 0.04 0.04 ## Eicosane 0.15 0.38 ## Heneicosane 0.13 0.69 Scaling dataframes for downstream data visualizations A data preparation method that is commonly used to convert values into those that can be used to better illustrate overall data trends is data scaling. Scaling can be achieved through data transformations or normalization procedures, depending on the specific dataset and goal of analysis/visualization. Scaling is often carried out using data vectors or columns of a dataframe. For this example, we will normalize the chemical concentration dataset using a basic scaling and centering procedure using the base R function ‘scale’. This algorithm results in the normalization of a dataset using the mean value and standard deviation. This scaling step will convert chemical concentration values in our dataset into normalized values across samples, such that each chemical’s concentration distributions are more easily comparable between the different biomass burn conditions. For more information on the ‘scale’ function, see its associated RDocumentation and helpful tutorial on Implementing the scale() function in R. Let’s make a new dataframe (ScaledData) based off scaled values of the data within the SmokeData2 dataframe: ## Eucalyptus_Smoldering Eucalyptus_Flaming Peat_Smoldering ## 2-Methylnonadecane -0.3347765 -0.3347765 2.841935 ## 3-Methylnonadecane -0.8794448 -0.8794448 1.649829 ## Peat_Flaming Pine_Smoldering Pine_Flaming ## 2-Methylnonadecane -0.3347765 -0.3347765 -0.3347765 ## 3-Methylnonadecane 1.1161291 0.1183422 -0.8794448 ## Pine_Needles_Smoldering Pine_Needles_Flaming ## 2-Methylnonadecane -0.3347765 -0.3347765 ## 3-Methylnonadecane -0.8794448 0.6984509 ## Red_Oak_Smoldering Red_Oak_Flaming ## 2-Methylnonadecane -0.3347765 -0.1637228 ## 3-Methylnonadecane -0.8794448 0.8144726 We can see that each chemical is now scaled, centered around 0, with values distributed that are less than zero, and others that are greater than zero, based off a normal distribution. Let’s also create a melted (or long) dataframe and save it as ScaledData.melt: ScaledData.melt &lt;- melt(ScaledData) colnames(ScaledData.melt) &lt;- c(&quot;Chemical&quot;, &quot;Biomass_Burn_Condition&quot;, &quot;Scaled_Chemical_Concentration&quot;) #updating the column names ScaledData.melt[1:10,] ## Chemical Biomass_Burn_Condition Scaled_Chemical_Concentration ## 1 2-Methylnonadecane Eucalyptus_Smoldering -0.3347765 ## 2 3-Methylnonadecane Eucalyptus_Smoldering -0.8794448 ## 3 Docosane Eucalyptus_Smoldering -0.3465132 ## 4 Dodecylcyclohexane Eucalyptus_Smoldering -0.4240624 ## 5 Eicosane Eucalyptus_Smoldering -0.3802202 ## 6 Heneicosane Eucalyptus_Smoldering -0.3895328 ## 7 Hentriacontane Eucalyptus_Smoldering 0.1304235 ## 8 Heptacosane Eucalyptus_Smoldering 0.1291155 ## 9 Heptadecane Eucalyptus_Smoldering -0.3759424 ## 10 Hexacosane Eucalyptus_Smoldering 0.5060578 Now we have all the dataframes we need, formatted and ready to go for visualizations! High-Dimensional Data Visualizations Here, we provide some example data visualization approaches that can be used to visualize high-dimensional datasets of relevance to environmental health. Density Plot Visualizations Density plots are an effective way to show overall distributions of data and can be useful to compare across various test conditions or other stratifications of the data under evaluation. Here, we use ggplot to create density plots, displaying trends in chemical concentrations across the tested biomass burn conditions. We run the ggplot function over the scaled chemistry data to yield the following plot: ggplot(ScaledData.melt, aes(x=Scaled_Chemical_Concentration, color=Biomass_Burn_Condition)) + geom_density() Here are some interesting take-aways from viewing this density plot: + In general, there are a high number of chemicals that were measured at relatively lower abundances (hence, the peak in occurrence density occurring towards the left, before 0) + The three conditions of smoldering peat, flaming peat, and flaming pine contained the most chemicals at the highest relative concentrations (hence, these lines are the top three lines towards the right) GGally Visualizations GGally is a package that serves as an extension of ggplot2, the baseline R plotting system based on the grammer of graphics. GGalley is very useful for creating plots that compare groups or features within a dataset, among many other utilities. Here we will demonstrate the ‘ggpairs’ function within GGally using the scaled chemistry datasets. This function will produce an image that shows correlation values between biomass burn sample pairs, and also illustrates the overall distributions of values in samples. #Using ggpairs to visualize data; note that we need to supply the data specifically as a dataframe (hence the &#39;data.frame&#39; function) ggpairs(data.frame(ScaledData)) For more information on GGally see its associated RDocumentation and example helpful tutorial. Boxplot Visualizations As demonstrated in the previous module on identifying and visualizing data trends, boxplots have utility towards visualizing potential differences between data categories or groupings. Boxplots are very easy to make and still provide informative visualizations for between group comparisons. Here, we will generate an example boxplot visualization using ggplot ggplot(ScaledData.melt, aes(x=Scaled_Chemical_Concentration, color=Biomass_Burn_Condition)) + geom_boxplot() Correlation Plot Visualizations Correlation plots are used to display correlations among variables in a dataset. There are many approaches that can be used to generate correlation plot visualizations. Here, we demonstrate two different approaches: First, we demonstrate further utility of the GGally package towards the generation of correlation plots through the ‘ggcorr’ function: #Note that we need to supply the data specifically as a dataframe (hence the &#39;data.frame&#39; function) ggcorr(data.frame(ScaledData), size = 2) Second, we demonstrate a different function to produce correlation plot visualizations; namely, the ‘corrplot’ function. For the function ‘corrplot’ to work, it needs to be supplied a correlation matrix as the input data, which is demonstrated below. Example using the ‘corrplot’ function to visualize statistical correlations between biomass burn conditions: #Need to supply corrplot with a correlation matrix, here, using the &#39;cor&#39; function corrplot(cor(SmokeData2)) Example using the ‘corrplot’ function to visualize statistical correlations between measured chemicals: corrplot(cor(t(SmokeData2)), tl.cex = .4, #Change size of text tl.col = &#39;black&#39;); #Change font color to black Hierarchical Clustering Visualizations Hierarchical clustering is a common method used to cluster high dimensional data. In this clustering approach, data are typically grouped using a dendrogram which shows how similar groups of variables are to one another. There are various methods for hierarchical clustering of data. Here, we use the ‘hclust’ function from the base R programming. For this function to work, it requires a distance matrix as input, which summarizes how similar variables are in a dataset based on distance calculation methods. Here, we demonstrate these steps by first calculating a distance matrix from the scaled chemistry dataset using the ‘dist’ function, and then using this as input towards the hierarchical clustering function, ‘hclust’. Finally, the resulting clustering dendograms are visualized using a basic ‘plot’ function. #First calculate our distance matrix using a simple euclidance distance measure d &lt;- dist(ScaledData, method = &quot;euclidean&quot;) #Hierarchical clustering using average linkage method hc1 &lt;- hclust(d, method = &quot;average&quot; ) #Plot the obtained dendrogram plot(hc1, cex = 0.5); #cex sets text size Here, this dendogram shows how chemicals cluster together based on relative concentrations. We can see, for example, that inorganic and ionic constituents tend to group together based on relative concentrations on the left of this dendogram. Other interesting patterns are notable, including the group of polycyclic aromatic hydrocarbons (PAHs) in the middle (e.g., benzo(a)pyrene, benzo(e)pyrene, etc). Heatmap Visualizations Heatmaps are a highly effective method of viewing an entire dataset (or large subset) at once. Heat maps can appear similar to correlation plots, but typically illustrate other values (e.g., concentrations, expression levels, presence/absence, etc) besides correlation R values. When generating heat maps, scaled values can be used to better distinguish patterns between groups/samples. You can additionally add dendrograms to the outsides of the heatmap plot, similar to what we produced in the previous example. Here, we will be demonstrating the use of multiple heatmap functions: First, the classic ‘heatmap’ function in base R can be used to create a simple heatmap with dendrogram. This is useful for just a quick look at the data. Second, we will use ‘pheatmap’ from the pheatmap package. One advantage to using this package is that you can easily add colored labels to both the rows and columns of the heatmap if you have numerous groups. This can help to additionally visualize differences across various groups. Third, we will use the ‘superheat’ package. This package is useful if you want to generate additional plots and figures on the side or top of the heatmap, such as boxplots of groups, distributions, etc. Let’s start with the first method, using the class ‘heatmap’ function: heatmap(ScaledData) For more information on the ‘heatmap’ package, see its associated RDocumentation and helpful example tutorial website. Here is an example using the ‘pheatmap’ function from the pheatmap package: #Using pheatmap #First let&#39;s create the row side and tops ide color matrices #Colors to be used for the row side (chemical categories) side.colors &lt;- data.frame(SmokeData1$Chemical.Category); rownames(side.colors) &lt;- SmokeData1$Chemical; colnames(side.colors) &lt;- &quot;Chemical Category&quot;; #Categories to be used for the top side (bio-conditions) top.colors &lt;- data.frame(rep(c(&quot;Smoldering&quot;, &quot;Flaming&quot;),5)); rownames(top.colors) &lt;- colnames(SmokeData2); colnames(top.colors) &lt;- &quot;Smoke Type&quot;; #Finally plot the dataset pheatmap(ScaledData, scale = &quot;none&quot;, #we already scaled our data, can use &quot;row&quot; or &quot;column&quot; also show_rownames = T, show_colnames = T, #to display rownames and column names annotation_row = side.colors, annotation_col = top.colors, #data that contains the groupings we created color = viridis(10), #set the color, using viridis package for color pallete cluster_rows = T, cluster_cols = T, #cluster both rows and columns fontsize_row = 7); #set fontsize for the rows For more information on the ‘pheatmap’ package, see its associated RDocumentation and helpful example tutorial. Lastly, here is an example using the ‘superheat’ package: #Using superheat superheat(data.frame(ScaledData), scale = F, #Set to false, if set to true, will center and scale columns pretty.order.rows = T, #Use hierarchical clustering on rows pretty.order.cols = T, #Use hierarchical clustering on columns yr = rowMeans(ScaledData), #Create row side plot of means yr.axis.name = &quot;Average Concentration\\nby Chemical&quot;, #Name of plot yr.plot.type = &quot;bar&quot;, #type of plot yt = colMeans(ScaledData),#Create top side plot of means yt.axis.name = &quot;Average Concentration\\nby Sample&quot;, #Name of plot yt.plot.type = &quot;scatter&quot;, #type of plot left.label.text.size = 3, #set label size on rows left.label.col = &quot;white&quot;, #set color of row label bottom.label.text.size = 3, #set label size on columns bottom.label.text.angle = 90, #set angle of bottom labels to be vertical bottom.label.size = 0, #get rid of extra space between legend and bottom labels bottom.label.col = &quot;white&quot; #set color of bottom label ) For more information on the ‘superheat’ package, see its associated RDocumentation and helpful example tutorial. Additional examples, packages, and approaches that can be used to generate heat maps are available in abundance through online resources, including this helpful example heatmap tutorial website. Concluding Remarks In conclusion, this training module serves as a high-level introduction to high-dimensional data visualizations. Approaches described in this training module include data formatting, data scaling, and the visualization of prepared datasets through the following methods: density plots, GGally plots, boxplots, correlation plots, hierarchical clustering, and heatmaps. Visualizations are generated using a dataset containing chemical concentrations measured in different biomass burn scenarios, representing different wildfire events, serving as an example dataset relevant to environmental health research. These visualization methods serve as an important foundation for many environmental health research studies. "],["fair-data-management-practices.html", "1.5 FAIR Data Management Practices Introduction to Training Module Introduction to FAIR Breaking Down FAIR, Letter-by-Letter Data Repositories for Sharing of Data Helpful Resources on FAIR Concluding Remarks", " 1.5 FAIR Data Management Practices This training module was developed by Ms. Rebecca Boyles, MSPH, with contributions from Dr. Julia E. Rager Fall 2021 Introduction to Training Module This training module provides a description of FAIR data management practices, and points participants to important resources to help ensure generated data meet current FAIR guidelines. This training module is descriptive-based (as opposed to coding-based), in order to present information clearly and serve as an important resource alongside the other scripted training activities. Training Module’s Questions This training module was specifically developed to answer the following questions: What is FAIR? When was FAIR first developed? When making data ‘Findable’, who and what should be able to find your data? When saving/formatting your data, which of the following formats is preferred to meet FAIR principles: .pdf, .csv, or a proprietary output file from your lab instrument? How can I find a suitable data repository for my data? Introduction to FAIR Proper data management is of utmost importance while leading data analyses within the field of environmental health science. A method to ensure proper data management is the implementation of Findability, Accessibility, Interoperability, and Reusability (FAIR) practices. A landmark paper that describes FAIR practices in environmental health research is the following: Wilkinson MD, Dumontier M, Aalbersberg IJ, et al. The FAIR Guiding Principles for scientific data management and stewardship. Sci Data. 2016 Mar 15. PMID: 26978244. The FAIR principles describe a framework for data management and stewardship aimed at increasing the value of data by enabling sharing and reuse. These principles were originally developed from discussions during the Jointly Designing a Data FAIRport meeting at the Lorentz Center in Leiden, The Netherlands in 2014, which brought together stakeholders to discuss the creation of an environment for virtual computational science. The resulting principles are technology agnostic, discipline independent, community driven, and internationally adopted. Below is a schematic providing an overview of this guiding principle: With this background, we can now answer Question 1: What is FAIR? Answer: A guiding framework that was recently established to promote best data management practices, to ensure that data are Findable, Accessibility, Interoperable, and Reusable. We can also answer Question 2: When was FAIR first developed? Answer: 2014- which means that these principles are very new and continuing to evolve! Breaking Down FAIR, Letter-by-Letter The aspects of the FAIR principles apply to data and metadata with the aim of making the information available to people and computers as described in the seminal paper by Wilkinson et al., 2016. F (Findable) in FAIR The F in FAIR identifies components of the principles needed to make the meta(data) findable through the application of unique persistent identifiers, thoroughly described, reference the unique identifiers, and that the descriptive information (i.e., metadata) could be searched by both humans and computer systems. F1. (Meta)data are assigned a globally unique and persistent identifier Each data set is assigned a globally unique and persistent identifier (PID), for example a DOI. These identifiers allow to find, cite and track (meta)data. A DOI looks like: https://doi.org/10.1109/5.771073 Action: Ensure that each data set is assigned a globally unique and persistent identifier. Certain repositories automatically assign identifiers to data sets as a service. If not, obtain a PID via a PID registration service. F2. Data are described with rich metadata Each data set is thoroughly (see R1) described: these metadata document how the data was generated, under what term (license) and how it can be (re)used and provide the necessary context for proper interpretation. This information needs to be machine-readable. Action: Fully document each data set in the metadata, which may include descriptive information about the context, quality and condition, or characteristics of the data. Another researcher in any field, or their computer, should be able to properly understand the nature of your dataset. Be as generous as possible with your metadata (see R1). F3. Metadata clearly and explicitly include the identifier of the data it describes Explanation: The metadata and the data set they describe are separate files. The association between a metadata file and the data set is obvious thanks to the mention of the data set’s PID in the metadata. Action: Make sure that the metadata contains the data set’s PID. F4. (Meta)data are registered or indexed in a searchable resource Explanation: Metadata are used to build easily searchable indexes of data sets. These resources will allow to search for existing data sets similarly to searching for a book in a library. Action: Provide detailed and complete metadata for each data set (see F2). With this information, can can now answer Question 3: (3) When making data ‘Findable’, who and what should be able to find your data? Answer: Both humans and computer systems should be able to find your data. A (Accessible) in FAIR The A components are designed to enable meta(data) be available long-term, accessed by humans and machines using standard communication protocols with clearly described limitations on reuse. A1. (Meta)data are retrievable by their identifier using a standardized communications protocol Explanation: If one knows a data set’s identifier and the location where it is archived, one can access at least the metadata. Furthermore, the user knows how to proceed to get access to the data. Action: Clearly define who can access the actual data and specify how. It is possible that data will not be downloaded, but rather reused in situ. If so, the metadata must specify the conditions under which this is allowed (sometimes versus the conditions needed to fulfill for external usage/“download”). A1.1 The protocol is open, free, and universally implementable Explanation: Anyone with a computer and an internet connection can access at least the metadata. A1.2 The protocol allows for an authentication and authorization procedure, where necessary Explanation: It often makes sense to request users to create a user account on a repository. This allows to authenticate the owner (or contributor) of each data set, and to potentially set user specific rights. A2. Metadata are accessible, even when the data are no longer available Explanation: Maintaining all data sets in a readily usable state eternally would require an enormous amount of curation work (adapting to new standards for formats, converting to different format if specifically needed software is discontinued, etc). Keeping the metadata describing each data set accessible, however, can be done with much less resources. This allows to build comprehensive data indexes including all current, past, and potentially arising data sets. Action: Provide detailed and complete metadata for each data set (see R1). I (Interoperable) in FAIR The I components of the principles address needs for data exchange and interpretation by humans and machines which includes the use of controlled vocabularies or ontologies to describe meta(data) and to describe provenance relationships through appropriate data citation. I1. (Meta)data use a formal, accessible, shared, and broadly applicable language Explanation: Interoperability typically means that each computer system has at least knowledge of the other system’s formats in which data is exchanged. If (meta)data are to be searchable and if compatible data sources should be combinable in a (semi)automatic way, computer systems need to be able to decide if the content of data sets are comparable. Action: Provide machine readable data and metadata in an accessible language, using a well-established formalism. Data and metadata are annotated with resolvable vocabularies/ontologies/thesauri that are commonly used in the field (see I2). I2. (Meta)data use vocabularies that follow FAIR principles Explanation: The controlled vocabulary (e.g., MESH) used to describe data sets needs to be documented. This documentation needs to be easily findable and accessible by anyone who uses the data set. Action: The vocabularies/ontologies/thesauri are themselves findable, accessible, interoperable and thoroughly documented, hence FAIR. Lists of these standards can be found at: NCBO BioPortal, FAIRSharing, OBO Foundry. I3. (Meta)data include qualified references to other (meta)data Explanation: If the data set builds on another data set, if additional data sets are needed to complete the data, or if complementary information is stored in a different data set, this needs to be specified. In particular, the scientific link between the data sets needs to be described. Furthermore, all data sets need to be properly cited (i.e. including their persistent identifiers). Action: Properly cite relevant/associated data sets, by providing their persistent identifiers, in the metadata, and describe the scientific link/relation to your data set. R (Reusable) in FAIR The R components highlight needs for the meta(data) to be reused and support integration such as sufficient description of the data and data use limitations. R1. Meta(data) are richly described with a plurality of accurate and relevant attributes Explanation: Description of a data set is required at two different levels: Metadata describing the data set: what does the data set contain, how was the data generated, how has it been processed, how can it be reused. Metadata describing the data: any needed information to properly use the data, such as definitions of the variable names Action: Provide complete metadata for each data file. Scope of your data: for what purpose was it generated/collected? Particularities or limitations about the data that other users should be aware of. Date of the data set generation, lab conditions, who prepared the data, parameter settings, name and version of the software used. Variable names are explained or self-explanatory Version of the archived and/or reused data is clearly specified and documented. What does this mean to you? We advise the following as ‘starting-points’ for participants to start meeting FAIR guidances: Learn how to create a Data Management Plan Keep good documentation (project &amp; data-level) while working Do not use proprietary file formats (.csv is a great go-to formats for your data!) When able, use a domain appropriate metadata standard or ontology Ruthlessly document any steps in a project Most of FAIR can be handled by selecting a good data or software repository Don’t forget to include a license! With this information, can can now answer Question 4: (4) When saving/formatting your data, which of the following formats is preferred to meet FAIR principles: .pdf, .csv, or a proprietary output file from your lab instrument? Answer: A .csv file is preferred to enhance data sharing. Data Repositories for Sharing of Data When you are organizing your data to deposit online, it is important to identify an appropriate repository to publish your dataset it. A good starting place is a repository registry such as re3data.org or the NIH list of repositories. Many funding agencies have a list of recommended data repositories. Below are some examples of two main categories of data repositories: 1. Domain Agnostic Data Repositories Domain agnostic repositories allow the deposition of any data type. Some examples include the following: Data in Brief Articles (e.g., Elsevier’s Data in Brief Journal) Dryad Figshare The Dataverse Project Zenodo 2. Domain Specific Data Repositories Domain specific repositories allow the deposition of specific types of data, produced from specific types of technologies or within specific domains. Some examples include the following: Gene Expression Omnibus The Immunology Database and Analysis Portal Microphysiology Systems Database Mouse Genome Informatics Mouse Phenome Database OpenNeuro Protein Data Bank ProteomeXchange Rat Genome Database The Database of Genotypes and Phenotypes Zebrafish Model Organism Database and many, many others… With this information, can can now answer Question 5: (5) How can I find a suitable data repository for my data? Answer: I can search through a data repository registry service or look for recommendations from NIH or other funding agencies. Helpful Resources on FAIR Additional Training Resources on FAIR Many organizations, from specific programs to broad organizations, provide training and resources for scientists in FAIR principles. Some of the notable global organizations organizing and providing training that offer opportunities for community involvement are: Committee on Data for Science and Technology (CODATA) Global Alliance for Genomics &amp; Health GoFAIR Force11 Research Data Alliance Additional Examples and Documents on FAIR This topic is receiving much attention in recent years, including the following workshops, government reports, and publications. Example Workshops discussing FAIR: NAS Implementing FAIR Data for People and Machines: Impacts and Implications (2019). Available at: https://www.nationalacademies.org/our-work/implementing-fair-data-for-people-and-machines-impacts-and-implications NIH Catalyzing Knowledge-driven Discovery in Environmental Health Sciences Through a Harmonized Language, Virtual Workshop (2021). Available at: https://www.niehs.nih.gov/news/events/pastmtg/2021/ehslanguage/index.cfm NIH Trustworthy Data Repositories Workshop (2019). Available at: https://datascience.nih.gov/data-ecosystem/trustworthy-data-repositories-workshop NIH Virtual Workshop on Data Metrics (2020). Available at: https://datascience.nih.gov/data-ecosystem/nih-virtual-workshop-on-data-metrics NIH Workshop on the Role of Generalist Repositories to Enhance Data Discoverability and Reuse: Workshop Summary (2020). Available at: https://datascience.nih.gov/data-ecosystem/nih-data-repository-workshop-summary Example Government Report Documents on FAIR: Collins S, Genova F, Harrower N, Hodson S, Jones S, Laaksonen L, Mietchen D, Petrauskaite R, Wittenburg P. Turning FAIR into reality: Final report and action plan from the European Commission expert group on FAIR data: European Union; 2018. Available at: https://www.vdu.lt/cris/handle/20.500.12259/103794. EU. FAIR Data Advanced Use Cases: From Principles to Practice in the Netherlands. 2018. European Union. Available at: doi:10.5281/zenodo.1250535. NIH. Final NIH Policy for Data Management and Sharing and Supplemental Information. National Institutes of Health. Federal Register, vol. 85, 2020-23674, 30 Oct. 2020, pp. 68890–900. Available at: https://www.federalregister.gov/d/2020-23674. NIH. NIH Strategic Plan for Data Science 2018. National Institutes of Health. Available at: https://datascience.nih.gov/strategicplan. NLM. NLM Strategic Plan 2017 to 2027. U.S. National Library of Medicine, Feb. 2018. Available at: https://www.nlm.nih.gov/about/strategic-plan.html. Example Related Publications on FAIR: Comess S, Akbay A, Vasiliou M, Hines RN, Joppa L, Vasiliou V, Kleinstreuer N. Bringing Big Data to Bear in Environmental Public Health: Challenges and Recommendations. Front Artif Intell. 2020 May;3:31. doi: 10.3389/frai.2020.00031. Epub 2020 May 15. PMID: 33184612; PMCID: PMC7654840. Koers H, Bangert D, Hermans E, van Horik R, de Jong M, Mokrane M. Recommendations for Services in a FAIR Data Ecosystem. Patterns (N Y). 2020 Jul 7;1(5):100058. doi: 10.1016/j.patter.2020.100058. Erratum in: Patterns (N Y). 2020 Sep 11;1(6):100104. PMID: 33205119. Kush RD, Warzel D, Kush MA, Sherman A, Navarro EA, Fitzmartin R, Pétavy F, Galvez J, Becnel LB, Zhou FL, Harmon N, Jauregui B, Jackson T, Hudson L. FAIR data sharing: The roles of common data elements and harmonization. J Biomed Inform. 2020 Jul;107:103421. doi: 10.1016/j.jbi.2020.103421. Epub 2020 May 12. PMID: 32407878. Lin D, Crabtree J, Dillo I, Downs RR, Edmunds R, Giaretta D, De Giusti M, L’Hours H, Hugo W, Jenkyns R, Khodiyar V, Martone ME, Mokrane M, Navale V, Petters J, Sierman B, Sokolova DV, Stockhause M, Westbrook J. The TRUST Principles for digital repositories. Sci Data. 2020 May 14;7(1):144. PMID: 32409645. Thessen AE, Grondin CJ, Kulkarni RD, Brander S, Truong L, Vasilevsky NA, Callahan TJ, Chan LE, Westra B, Willis M, Rothenberg SE, Jarabek AM, Burgoon L, Korrick SA, Haendel MA. Community Approaches for Integrating Environmental Exposures into Human Models of Disease. Environ Health Perspect. 2020 Dec;128(12):125002. PMID: 33369481. Roundtable on Environmental Health Sciences, Research, and Medicine; Board on Population Health and Public Health Practice; Health and Medicine Division; National Academies of Sciences, Engineering, and Medicine. Principles and Obstacles for Sharing Data from Environmental Health Research: Workshop Summary. Washington (DC): National Academies Press (US); 2016 Apr 29. PMID: 27227195. Concluding Remarks "],["dose-response-modeling.html", "Dose-Response Modeling Introduction to Training Module Plotting Data in Dose-Response Fitting Curves to Dose-Response Plots Comparing Curve Fits Curve Fitting Example Benchmark Dose (BMD) Concluding Remarks", " Dose-Response Modeling This training module was developed by Dr. Kyle Roell and Dr. Julia E. Rager Fall 2021 Background on Training Module Introduction to Dose-Response Modeling “The Dose Makes the Poison” One of the most well-established principles in the field of toxicology is the concept, The Dose Makes the Poison. Record of this founding principle dates back to the 16th century, when the Swiss physician, Paracelsus, concluded that in sufficient quantities, everything had the potential to cause harm, and the only thing that differentiated something from being harmful or not was the dose. Findings have continued to support this principle, substatiating that irrespective of the source of an exposure/insult, all have the potential to cause harm should the dose be sufficient. This overall concept supports the critical need to evaluate and quantify dose-response relationships. Dose-response modeling Dose-response modeling is a method used to quantitatively assess the relationship between an exposure to a chemical (or other stressor) and its related effects. The overall goal of these modeling efforts is to identify which exposure doses are harmful, and which aren’t, to human health. The following summarize the main steps in dose-response modeling: 1. Plot data. Data from relevant epidemiological, clinical, and/or toxicological evaluations are first plotted. Data are plotted in an X-Y plot, where along the x-axis are the doses (or concentration) of a chemical (or stressor), and along the y-axis are the responses of interest. 2. Test various curve fits. There are many different models that can be used to mathematically describe the relationships between doses and associated responses. Typically, several curve fit models are tested in a dose-response analysis to see which fit the data the best. 3. Identify the best fitting model curve. Results from the tested model curve fits are evaluated, and the model(s) which fit the data the best are identified. 4. Derive values to carry forward in your analyses, based on the best fitting curve model. Using the best fitting curve model(s), final benchmark doses (BMDs), benchmark dose lower bounds (BMDLs), and other types of points of departure (PODs) are derived, which then get carried forward in the analysis (e.g., chemical risk assessment). Introduction to Training Module This training module provides an overview on analyzing exposure-associated response/outcome data in relation to exposure concentration (or dose), resulting in the derivation of benchmark doses (BMDs). This topic is of high relevance to the field of environmental health, as BMDs represent values that are used as the basis for evaluating risk in chemical safety evaluations, ultimately dictating the levels at which chemicals are regulated. This module specifically analyzes animal tumor incidence rates in response to exposure to a fictitious chemical (referred to a Chemical Z) tested across 12 different concentrations in drinking water. This dataset was generated for the specific purposes of this exercise, to allow for some interesting curve fits and a comparison between tissue site sensitivity to an example chemical insult. Training Module’s Environmental Health Questions This training module was specifically developed to answer the following environmental health questions: Which target tissue demonstrated the overall highest incidence of tumor formation from any single dose of Chemical Z? Which target tissue’s tumor incidence seems to not be related to dose? When we generate scatter plots illustrating exposure concentration vs disease outcome, without curves fitted to the data, are we able to derive benchmark doses? Upon visual inspection of example log-logistic vs. Weibull model curve fits on the intestinal tumor response data, can we confidently determine which of these two models best fits these data? For the liver tumor response data, which model fits the resulting dose-response curve the best? For the liver tumor response data, what are the final resulting BMD and BMDL estimates from the best fitting curve model? In comparing between the intestinal vs liver datasets, which tissue is estimated to show tumor responses at a lower exposure dose? Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you. To install “bmd” package, you need to first install package “remotes” which allows users to install packages from remote repositories, including GitHub, to then be able to install “bmd” package from Github. if (!require(&quot;Hmisc&quot;)) install.packages(&quot;Hmisc&quot;); if (!require(&quot;drc&quot;)) install.packages(&quot;drc&quot;); if (!require(&quot;remotes&quot;)) install.packages(&quot;remotes&quot;); if (!require(&quot;drc&quot;)) remotes::install_github(&quot;DoseResponse/bmd&quot;) Loading R packages required for this session library(Hmisc) #the describe function in the Hmisc package will be used to summarize a description of the dataset library(drc) #drc package will be used create and plot dose response models library(bmd) #bmd pacakge will be used to caculate the benchmark dose For more information on the drc package, see its associated CRAN webpage and primary publication. For more information on the bmd package, see its associated R Documentation file and primary publication Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Loading the Example Dataset Let’s start by loading the dataset needed for this training module. This dataset is a mock example that was generated for the purposes of this training module, in order to best capture variable types of dose-response relationships and resulting curve fits. This specific dataset analyzes the relationship between exposure to a fictional chemical, chemical Z, in drinking water and tumor incidence in the stomach, intestine (small and/or large), kidney, and liver in mice. These mice were evaluated in a traditional two-year animal bioassay setting. Note that animals are assumed to drink equivalent amounts of water each day for simplicity. Loading the data dose_response.data &lt;- read.csv(&quot;Module2_1/Module2_1_DoseResponseData.csv&quot;) Data Viewing Start with viewing the overall dimensions dim(dose_response.data) ## [1] 13 10 Then viewing a list of the column headers colnames(dose_response.data) ## [1] &quot;ChemicalZ_ugperL&quot; &quot;TotalNoAnimals_Tested&quot; ## [3] &quot;NoAnimals_StomachTumor&quot; &quot;Incidence_StomachTumor&quot; ## [5] &quot;NoAnimals_IntestinalTumor&quot; &quot;Incidence_IntestinalTumor&quot; ## [7] &quot;NoAnimals_KidneyTumor&quot; &quot;Incidence_KidneyTumor&quot; ## [9] &quot;NoAnimals_LiverTumor&quot; &quot;Incidence_LiverTumor&quot; With this, we can see that data are included for various chemical Z doses (noted in the first column), followed by a column noting the total number of animals tested per dose (in the second column). Then, columns are included describing the number of animals, followed by incidence, of tumor formation across each tissue target of interest (i.e., stomach, intestine, kidney, and liver). Viewing a quick summary of the values contained within this dataset summary(dose_response.data) ## ChemicalZ_ugperL TotalNoAnimals_Tested NoAnimals_StomachTumor ## Min. : 0 Min. :10 Min. :2.000 ## 1st Qu.: 100 1st Qu.:10 1st Qu.:2.000 ## Median : 300 Median :10 Median :2.000 ## Mean : 370 Mean :10 Mean :2.462 ## 3rd Qu.: 600 3rd Qu.:10 3rd Qu.:3.000 ## Max. :1000 Max. :10 Max. :3.000 ## Incidence_StomachTumor NoAnimals_IntestinalTumor Incidence_IntestinalTumor ## Min. :0.2000 Min. :0.000 Min. :0.0000 ## 1st Qu.:0.2000 1st Qu.:0.000 1st Qu.:0.0000 ## Median :0.2000 Median :0.000 Median :0.0000 ## Mean :0.2462 Mean :2.308 Mean :0.2308 ## 3rd Qu.:0.3000 3rd Qu.:5.000 3rd Qu.:0.5000 ## Max. :0.3000 Max. :7.000 Max. :0.7000 ## NoAnimals_KidneyTumor Incidence_KidneyTumor NoAnimals_LiverTumor ## Min. :0.000 Min. :0.0000 Min. :0.000 ## 1st Qu.:1.000 1st Qu.:0.1000 1st Qu.:0.000 ## Median :3.000 Median :0.3000 Median :2.000 ## Mean :3.692 Mean :0.3692 Mean :1.385 ## 3rd Qu.:6.000 3rd Qu.:0.6000 3rd Qu.:3.000 ## Max. :9.000 Max. :0.9000 Max. :3.000 ## Incidence_LiverTumor ## Min. :0.0000 ## 1st Qu.:0.0000 ## Median :0.2000 ## Mean :0.1385 ## 3rd Qu.:0.3000 ## Max. :0.3000 With this data summary, we can answer Environmental Health Question #1: (1) Which target tissue demonstrated the overall highest incidence of tumor formation from any single dose of Chemical Z? Answer: The kidney indicates a maximum of 9 animals with tumors developing from a single dose, representing an alarming incidence rate of 90%. Alternatively, you can obtain a larger view of dataset using the descibe from Hmisc package Hmisc::describe(dose_response.data) ## dose_response.data ## ## 10 Variables 13 Observations ## -------------------------------------------------------------------------------- ## ChemicalZ_ugperL ## n missing distinct Info Mean Gmd .05 .10 ## 13 0 13 1 370 383.3 6 18 ## .25 .50 .75 .90 .95 ## 100 300 600 780 880 ## ## lowest : 0 10 50 100 150, highest: 500 600 700 800 1000 ## ## Value 0 10 50 100 150 200 300 400 500 600 700 ## Frequency 1 1 1 1 1 1 1 1 1 1 1 ## Proportion 0.077 0.077 0.077 0.077 0.077 0.077 0.077 0.077 0.077 0.077 0.077 ## ## Value 800 1000 ## Frequency 1 1 ## Proportion 0.077 0.077 ## -------------------------------------------------------------------------------- ## TotalNoAnimals_Tested ## n missing distinct Info Mean Gmd ## 13 0 1 0 10 0 ## ## Value 10 ## Frequency 13 ## Proportion 1 ## -------------------------------------------------------------------------------- ## NoAnimals_StomachTumor ## n missing distinct Info Mean Gmd ## 13 0 2 0.75 2.462 0.5385 ## ## Value 2 3 ## Frequency 7 6 ## Proportion 0.538 0.462 ## -------------------------------------------------------------------------------- ## Incidence_StomachTumor ## n missing distinct Info Mean Gmd ## 13 0 2 0.75 0.2462 0.05385 ## ## Value 0.2 0.3 ## Frequency 7 6 ## Proportion 0.538 0.462 ## -------------------------------------------------------------------------------- ## NoAnimals_IntestinalTumor ## n missing distinct Info Mean Gmd ## 13 0 6 0.843 2.308 3.205 ## ## lowest : 0 1 4 5 6, highest: 1 4 5 6 7 ## ## Value 0 1 4 5 6 7 ## Frequency 7 1 1 1 1 2 ## Proportion 0.538 0.077 0.077 0.077 0.077 0.154 ## -------------------------------------------------------------------------------- ## Incidence_IntestinalTumor ## n missing distinct Info Mean Gmd ## 13 0 6 0.843 0.2308 0.3205 ## ## lowest : 0.0 0.1 0.4 0.5 0.6, highest: 0.1 0.4 0.5 0.6 0.7 ## ## Value 0.0 0.1 0.4 0.5 0.6 0.7 ## Frequency 7 1 1 1 1 2 ## Proportion 0.538 0.077 0.077 0.077 0.077 0.154 ## -------------------------------------------------------------------------------- ## NoAnimals_KidneyTumor ## n missing distinct Info Mean Gmd .05 .10 ## 13 0 10 0.992 3.692 3.615 0.0 0.2 ## .25 .50 .75 .90 .95 ## 1.0 3.0 6.0 7.8 8.4 ## ## lowest : 0 1 2 3 4, highest: 5 6 7 8 9 ## ## Value 0 1 2 3 4 5 6 7 8 9 ## Frequency 2 2 2 1 1 1 1 1 1 1 ## Proportion 0.154 0.154 0.154 0.077 0.077 0.077 0.077 0.077 0.077 0.077 ## -------------------------------------------------------------------------------- ## Incidence_KidneyTumor ## n missing distinct Info Mean Gmd .05 .10 ## 13 0 10 0.992 0.3692 0.3615 0.00 0.02 ## .25 .50 .75 .90 .95 ## 0.10 0.30 0.60 0.78 0.84 ## ## lowest : 0.0 0.1 0.2 0.3 0.4, highest: 0.5 0.6 0.7 0.8 0.9 ## ## Value 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 ## Frequency 2 2 2 1 1 1 1 1 1 1 ## Proportion 0.154 0.154 0.154 0.077 0.077 0.077 0.077 0.077 0.077 0.077 ## -------------------------------------------------------------------------------- ## NoAnimals_LiverTumor ## n missing distinct Info Mean Gmd ## 13 0 3 0.865 1.385 1.538 ## ## Value 0 2 3 ## Frequency 6 3 4 ## Proportion 0.462 0.231 0.308 ## -------------------------------------------------------------------------------- ## Incidence_LiverTumor ## n missing distinct Info Mean Gmd ## 13 0 3 0.865 0.1385 0.1538 ## ## Value 0.0 0.2 0.3 ## Frequency 6 3 4 ## Proportion 0.462 0.231 0.308 ## -------------------------------------------------------------------------------- Overall, we can see that there are 4 disease outcomes included in this dataset: stomach tumors intestinal tumors kidney tumors liver tumors All with observed incidences that depend upon the exposure concentration of Chemical Z Plotting Data in Dose-Response Basic Plotting of Data in Dose-Response Let’s plot each tumor incidence against exposure concentration together in a 2x2 plot. Here, the y-axis will range from 0 to 1, with 0 indicating no incidence of tumors and 1 indicating all animals that were tested acquired tumors. Here, we will use the ‘with()’ function, which allows us to create a mini-environment using the specified data. par(mfrow=c(2,2)); with(dose_response.data, plot(Incidence_StomachTumor~ChemicalZ_ugperL, ylim=c(0,1))); with(dose_response.data, plot(Incidence_IntestinalTumor~ChemicalZ_ugperL, ylim=c(0,1))); with(dose_response.data, plot(Incidence_KidneyTumor~ChemicalZ_ugperL, ylim=c(0,1))); with(dose_response.data, plot(Incidence_LiverTumor~ChemicalZ_ugperL, ylim=c(0,1))); par(mfrow=c(1,1)) With these plots, we can answer Environmental Health Question #2: (2) Which target tissue’s tumor incidence seems to not be related to dose? Answer: Stomach. We can also answer Environmental Health Question #3: (3) When we generate scatter plots illustrating exposure concentration vs disease outcome, without curves fitted to the data, are we able to derive benchmark doses? Answer: No, a curve fit is still needed to describe the overall trend in the dataset, which can then be used in the final calculation of a benchmark dose. Fitting Curves to Dose-Response Plots It is notable that there are many different packages that can be used to fit curves to data. Here, we incorporate the drc package to fit several types of potential curve fit models to this example dataset. The drm function is specifically used from the drc package. Common parameters to consider when constructing the curve fit models in drm include the following: 1. Formula This parameters describes the formula used to fit the data, formatted similar to a standard regression formula line of code. For the purposes of the current training module, this formula will be to fit to describe tumor incidence on chemical exposure concentration, which looks like this in the final code: Incidence_StomachTumor ~ ChemicalZ_ugperL 2. Data This parameter specifies the dataset you are evaluating. For the current training module, we will be referring to the full dataframe, dose_response.data 3. Weights This parameter contributes to determining how many observations are used at each dose/concentration, which can inform the model type. For the current training module, the weights in the dataset reflect the total number of animals tested at each exposure concentration. 4. Function (fct) This parameter specifies which type of curve fit function you want to implement. Example functions include various types of log-logistic, genaralized log-logistic, weibull, asymptotic regression, and Michaelis-Menten models. Note that getMeanFunctions() can be called for the full list of available functions: getMeanFunctions() ## Log-logistic (ED50 as parameter) with lower limit at 0 and upper limit at 1 ## (2 parameters) ## In &#39;drc&#39;: LL.2 ## ## Log-logistic (ED50 as parameter) with lower limit at 0 ## (3 parameters) ## In &#39;drc&#39;: LL.3 ## ## Log-logistic (ED50 as parameter) with upper limit at 1 ## (3 parameters) ## In &#39;drc&#39;: LL.3u ## ## Log-logistic (ED50 as parameter) ## (4 parameters) ## In &#39;drc&#39;: LL.4 ## ## Generalized log-logistic (ED50 as parameter) ## (5 parameters) ## In &#39;drc&#39;: LL.5 ## ## Weibull (type 1) with lower limit at 0 and upper limit at 1 ## (2 parameters) ## In &#39;drc&#39;: W1.2 ## ## Weibull (type 1) with lower limit at 0 ## (3 parameters) ## In &#39;drc&#39;: W1.3 ## ## Weibull (type 1) ## (4 parameters) ## In &#39;drc&#39;: W1.4 ## ## Weibull (type 2) with lower limit at 0 and upper limit at 1 ## (2 parameters) ## In &#39;drc&#39;: W2.2 ## ## Weibull (type 2) with lower limit at 0 ## (3 parameters) ## In &#39;drc&#39;: W2.3 ## ## Weibull (type 2) ## (4 parameters) ## In &#39;drc&#39;: W2.4 ## ## Brain-Cousens (hormesis) with lower limit fixed at 0 ## (4 parameters) ## In &#39;drc&#39;: BC.4 ## ## Brain-Cousens (hormesis) ## (5 parameters) ## In &#39;drc&#39;: BC.5 ## ## Log-logistic (log(ED50) as parameter) with lower limit at 0 and upper limit at 1 ## (2 parameters) ## In &#39;drc&#39;: LL2.2 ## ## Log-logistic (log(ED50) as parameter) with lower limit at 0 ## (3 parameters) ## In &#39;drc&#39;: LL2.3 ## ## Log-logistic (log(ED50) as parameter) with upper limit at 1 ## (3 parameters) ## In &#39;drc&#39;: LL2.3u ## ## Log-logistic (log(ED50) as parameter) ## (4 parameters) ## In &#39;drc&#39;: LL2.4 ## ## Generalised log-logistic (log(ED50) as parameter) ## (5 parameters) ## In &#39;drc&#39;: LL2.5 ## ## Asymptotic regression with lower limit at 0 ## (2 parameters) ## In &#39;drc&#39;: AR.2 ## ## Shifted asymptotic regression ## (3 parameters) ## In &#39;drc&#39;: AR.3 ## ## Michaelis-Menten ## (2 parameters) ## In &#39;drc&#39;: MM.2 ## ## Shifted Michaelis-Menten ## (3 parameters) ## In &#39;drc&#39;: MM.3 5. Type This parameter specifies the data type of the response (e.g., binomial, continuous, etc). For the current training module, we will select the binomial type of response, which in this package refers to the modeling of data types that are not fully continuous, including this quantile-based incidence rate outcome. First try fitting a log-logistic (LL) model Because log-logistic (LL) models are commonly used to evaluate dose-response relationships, let’s first start by trying to fit a 2 parameter LL function. Running the model, on the intestinal tumor incidence outcome as an example LL2.model.int &lt;- with(dose_response.data, drm(Incidence_IntestinalTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=LL.2(), type=&quot;binomial&quot;)) It’s easy to plot these results using the plot function plot(LL2.model.int, type=&quot;all&quot;, ylim=c(0,1)); Let’s next try fitting a Weibull model Running the Weibull curve model, on the intestinal tumor incidence outcome as an example W23.model.int &lt;- with(dose_response.data, drm(Incidence_IntestinalTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=W2.3(), type=&quot;binomial&quot;)) Let’s plot the results of this function plot(W23.model.int, type=&quot;all&quot;, ylim=c(0,1)); With this, we can now answer Environmental Health Question #4: (4) Upon visual inspection of example log-logistic vs. Weibull model curve fits on the intestinal tumor response data, can we confidently determine which of these two models best fits these data? Answer: No, both of these models appear to fit this dataset to a large extent. A more quantitative approach based on AIC is required to identify the best fitting model (see below). Let’s try fitting another model fit based on asymptotic regression modeling Running the asymptotic regression model, on the intestinal tumor incidence outcome as an example AR2.model.int &lt;- with(dose_response.data, drm(Incidence_IntestinalTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=AR.2(), type=&quot;binomial&quot;)) Let’s plot the results of this function plot(AR2.model.int, type=&quot;all&quot;, ylim=c(0,1)); Important note on the variety of curve fit models to consider There are many different types of curve fit models to consider when running your analyses. For example, additional functions are available from other packages, such as the aomisc package, which has an associated Github page and R-bloggers article. This package contains a collection of functions that are not included in the current drc pacakage. There are many other options available as well, if you search CRAN, Bioconductor, Github, and general search engines. Comparing Curve Fits Given the variety of models that can be used to fit dose-response data, it is important to consider the results of each model curve fit and identify which model best fits the data. There are many ways to identify best fitting curves. The most commonly implemented strategies include the following: 1. Visual Inspection. Model curve fits can be evaluated visually, to gage whether or not resulting curves fit the data. 2. Akaike Information Criterion (AIC). AIC values are commonly used for model selection, and represents an estimator of prediction error and relative quality of statistical models for a given set of data. AIC incorporates the trade-off between a model’s goodness of fit and the simplicity, such that it weighs the risk of overfitting vs underfitting. In applications, it is common to choose models with the lowest AIC, pending they describe the data sufficiently. The AIC function can simply be used here to calculate each resulting model’s AIC. Remember, the lower AIC represents the better model curve fit. AIC(LL2.model.int) # results from the log-logistic model ## [1] 30.85574 AIC(W23.model.int) # results from the Weibull model ## [1] 22.87452 AIC(AR2.model.int) # results from the asymptotic regression model ## [1] 40.37098 These results demonstrate, quantitatively, that the Weibull model likely describes this dataset the best (out of the evaluated models), since it has the lowest AIC value Let’s finally produce a summary visualization that display the results of these three model curve fits across this intestinal dataset, with all the curve fits in one plot. # First defining a vector of text to use in the legend, summary the three curve fits and their AICs IntestinalCurveFitAICs &lt;- c(&quot;Log-Logistic, AIC=30.9&quot;, &quot;Weibull, AIC=22.9&quot;, &quot;Asymptotic Regression, AIC=40.4&quot;) # Generating the plot plot(LL2.model.int, type=&quot;all&quot;, ylim=c(0,1)) #Can add the next models on top of current plot with different line types and weights plot(W23.model.int, add=TRUE,col=&quot;red&quot;,lty=4, lwd=1.5) plot(AR2.model.int, add=TRUE,col=&quot;blue&quot;,lty=2, lwd=1.5) # A way to coerce the dots back to black for final view: plot(LL2.model.int, add=TRUE,col=&quot;black&quot;) #Can add a legend as well, specifying the same paramters for linetype (lty) and color (col) legend(x=1, y=.8, legend=IntestinalCurveFitAICs, col=c(&quot;black&quot;, &quot;red&quot;, &quot;blue&quot;), lty=c(1,4,2)) Curve Fitting Example Curve Fitting for Liver Outcomes For this exercise now focusing on liver tumors, let’s quickly fit the same three models and plot the results. Example log-logistic (LL) model function: LL2.model.liver &lt;- with(dose_response.data, drm(Incidence_LiverTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=LL.2(), type=&quot;binomial&quot;)) Example Weibull model function: W23.model.liver &lt;- with(dose_response.data, drm(Incidence_LiverTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=W2.3(), type=&quot;binomial&quot;)) Example asymptotic regression model function: AR2.model.liver &lt;- with(dose_response.data, drm(Incidence_LiverTumor~ChemicalZ_ugperL, weights=TotalNoAnimals_Tested, fct=AR.2(), type=&quot;binomial&quot;)) Calculating AICs: AIC(LL2.model.liver) ## [1] 28.1143 AIC(W23.model.liver) ## [1] 24.46089 AIC(AR2.model.liver) ## [1] 28.80896 Plotting the resulting curve fits: # First defining a vector of text to use in the legend, summary the two curve fits and their AICs LiverCurveFitAICs &lt;- c(&quot;Log-Logistic, AIC=28.1&quot;, &quot;Weibull, AIC=24.4&quot;, &quot;Asymptotic Regression, AIC=28.8&quot;) # Generating the plot plot(LL2.model.liver, type=&quot;all&quot;, ylim=c(0,1)) plot(W23.model.liver, add=TRUE,col=&quot;red&quot;,lty=3, lwd=1.5) plot(AR2.model.liver, add=TRUE,col=&quot;blue&quot;,lty=2, lwd=1.5) # A way to coerce the dots back to black for final view: plot(LL2.model.liver, add=TRUE,col=&quot;black&quot;) #Can add a legend as well, specifying the same paramters for linetype (lty) and color (col) legend(x=1, y=.8, legend=LiverCurveFitAICs, col=c(&quot;black&quot;, &quot;red&quot;, &quot;blue&quot;), lty=c(1,4,2)) With this, we can now answer Environmental Health Question #5: (5) For the liver tumor response data, which model fits the resulting dose-response curve the best? Answer: It is clear from visual inspection of the resulting curve fits and the calculated AIC values that the Weibull model fits the liver tumor response data the best. Benchmark Dose (BMD) Deriving the Final Benchmark Dose (BMD) Estimates Using the results from our best fitting models, we can now estimate the resulting benchmark doses (BMDs) to serve as the ‘tipping points’ of where exposure concentrations are demonstrated to elicit outcomes. A BMD is technically defined as a dose or concentration that produces a predetermined change in the response rate of an adverse effect. This predetermined change in response rate is termed the benchmark response (BMR). In this training module, we implement the bmd package to calculate a BMD from the resulting models derived through the drc package (as detailed in the code above). A typical BMR used in chemical risk assessments for incidence data is 10%, to let’s use that here as our example BMR to base the derivation of BMDs off of. Running the BMD estimate off the Weibull model fit to the liver tumor response data: bmd::bmd(W23.model.liver, bmr = .1, backg = 0) ## BMD BMDL ## e:1:0.1 283.7063 191.9821 These results indicate that, in order to achieve a change in response rate of 10% (from a background of 0 ug/L), and exposure concentration of 283.7 ug/L is required. Note that a benchmark dose lower bound (BMDL) is also provided, indicating the lower bound of the confidence interval surrounding the BMD. BMDL values are also commonly carried forward in risk assessment, since these values are more conservative and thus protective of public health. With this, we can now answer Environmental Health Question #6: (6) For the liver tumor response data, what are the final resulting BMD and BMDL estimates from the best fitting curve model? Answer: BMD=283.7 and BMDL=192.0 ug/L. Let’s compare these BMD/BMDL estimates to those generated from the best fitting curve fit on the intestinal tumor response data: bmd::bmd(W23.model.int, bmr = .1, backg = 0) ## BMD BMDL ## e:1:0.1 409.2645 345.9804 With this, we can now answer Environmental Health Question #7: (7) In comparing between the intestinal vs liver datasets, which tissue is estimated to show tumor responses at a lower exposure dose? Answer: The liver demonstrates tumor responses at a lower exposure dose, since the intestinal BMD is 409.3 which is much higher than the liver BMD of 283.7 ug/L. Concluding Remarks In conclusion, this training module provides several examples of methods to fit model curves to dose-response data that are typically evaluated in environmental health assessments. These examples highlight the importance of evaluating model fit to ultimately determine which model should be used to derive final BMD and BMDL estimates. Through this training module, example methods and associated script are designed with flexibility to aid in future analyses in which researchers may aim to analyze in vitro bioactivity, in vivo apical outcomes, and human health outcomes in the context of dose-response. For additional case studies that leverage dose-response modeling techniques, see the following publications that also address environmental health questions: Auerbach SS, Paules RS. Genomic dose response: Successes, challenges, and next steps. Current Opinion in Toxicology. 2018 Oct; 11-12:84-92. Johnson KJ, Auerbach SS, Costa E. A Rat Liver Transcriptomic Point of Departure Predicts a Prospective Liver or Non-liver Apical Point of Departure. Toxicol Sci. 2020 Jul 1;176(1):86-102. PMID: 32384157. Rager JE, Auerbach SS, Chappell GA, Martin E, Thompson CM, Fry RC. Benchmark Dose Modeling Estimates of the Concentrations of Inorganic Arsenic That Induce Changes to the Neonatal Transcriptome, Proteome, and Epigenome in a Pregnancy Cohort. Chem Res Toxicol. 2017 Oct 16;30(10):1911-1920. PMID: 28927277. Ramaiahgari SC, Auerbach SS, Saddler TO, Rice JR, Dunlap PE, Sipes NS, DeVito MJ, Shah RR, Bushel PR, Merrick BA, Paules RS, Ferguson SS. The Power of Resolution: Contextualized Understanding of Biological Responses to Liver Injury Chemicals Using High-throughput Transcriptomics and Benchmark Concentration Modeling. Toxicol Sci. 2019 Jun 1;169(2):553-566. PMID: 30850835. Thompson CM, Kirman CR, Hays SM, Suh M, Harvey SE, Proctor DM, Rager JE, Haws LC, Harris MA. Integration of mechanistic and pharmacokinetic information to derive oral reference dose and margin-of-exposure values for hexavalent chromium. J Appl Toxicol. 2018 Mar;38(3):351-365. PMID: 29064106. For additional modeling tools and guidance documents, see the below: + U.S. EPA’s BMD software (BMDS). U.S. EPA’s guidance document: U.S. EPA (2012). Benchmark Dose Technical Guidance. Risk Assessment Forum. Document ID EPA/100/R-12/001. Washington, DC. Netherlands’ National Institute for Public Health and the Environment (RIVM) software, PROAST. U.S. NTP’s Bayesian BMD Estimation tool that’s available as an online tool with the accompanying publication. U.S. NTP’s BMDExpress tool for performing high-throughput dose-response assessments on gene expression datasets, which is available as a tool with the accompanying publication. "],["machine-learning-and-predictive-modeling-for-environmental-health.html", "Machine Learning and Predictive Modeling for Environmental Health Introduction to Training Module K-means Analysis Principal Component Analysis (PCA) Combined Approach Concluding Remarks", " Machine Learning and Predictive Modeling for Environmental Health The development of this training module was led by Dr. David M. Reif Fall 2021 Background on Training Module Introduction to Machine Learning (ML) and Predictive Modeling The need for predictive modeling We can screen for biological responses to a variety of chemical exposures/treatment conditions very efficiently, leveraging technologies like cell-based high-throughput screening These screening efforts result in increasing amounts of data, which can be gathered to start building big databases Alongside these big databases, the associated dimensionality of these data gets “Big” And diversity across types of screening platforms, technologies, cell types, species, etc, leading to compounding dimensionality How do we even begin to analyze such data? For diverse, high-dimensional data, new approaches are needed. Traditional statistics may be able to handle 1:1 or 1:many comparisons of singular quantities (e.g. activity concentrations (e.g., AC50s for two chemicals). However, once the modeling needs become overly complex (or exploratory), assumptions of most traditional methods will be violated. Defining predictive modeling in the context of toxicology and environmental health We often think of predictions as having a forward-time component (i.e. What will happen next?) … what about “prediction” in a different sense as applied to toxicology? Working definition: Predictive toxicology describes a multidisciplinary approach to chemical toxicity evaluation that more efficiently uses animal test results, when needed, and leverages expanding non-animal test methods to forecast the effects of a chemical on biological systems eg 1. Can I more efficiently design animal studies and analyze data from shorter assays using less animals to predict long-term health outcomes? eg 2. Can this suite of in vitro assays predict what would happen in an organism? eg 3. Can I use diverse, high-dimensional data to cluster chemicals into predicted activity classes? Similar logic applies to the field of exposure science… what about “prediction” applied to exposure science? Working definition: Predictive exposure science describes a multidisciplinary approach to chemical exposure evaluations that more efficiently uses biomonitoring, chemical inventory, and other exposure science-relevant databases to forecast exposure rates in target populations. eg 1. Can I use existing biomonitoring data from NHANES to predict exposure rates for chemicals that have yet to be measured in target populations? (see ExpoCast program, eg. Wambaugh et al. https://pubmed.ncbi.nlm.nih.gov/25343693/) eg 2. Can I use chemical product use inventory data to predict the likelihood of a chemical being present in a certain consumer product (eg. Phillips et al. https://pubmed.ncbi.nlm.nih.gov/29405058/) Distinguish between machine learning (ML) and traditional statistical methods There is plenty of debate as to where the line(s) between ML and traditional statistics should be drawn. IMHO, a perfect delineation is not necessary for our purposes. Rather, we will focus on the usual goals/intent of each to help us understand the distinction for Environmental Health Research. Working distinction: Statistics draws population inferences from a sample, and machine learning finds generalizable predictive patterns. [https://www.nature.com/articles/nmeth.4642] Thus, by our working definition of predictive toxicology, we are interested in predictive aspects of ML that can give us generalizable forecasts as to effects of chemicals on biological systems. The image below shows graphical abstractions of how a “problem” is solved using either traditional statistics in the top row of (A) logistic and (B) linear regression or ML in the bottom row of (C) support vector machines, (D) artificial neural networks, and (E) decision trees. [https://www.sciencedirect.com/science/article/pii/S2590139719300432?via%3Dihub] The list of ML methods is continually expanding and subject to new taxonomic description. There are many different types of ML methods that we can employ, depending on the data type / purpose of data analysis. Generally speaking, ML is considered to encompass the study of computer algorithms that can improve automatically through experience and by the use of data. It is seen as a part of artificial intelligence (AI). A recent review written together with Erin Baker’s lab provides a high-level overview on some of the types of ML methods and challenges to address when analyzing multi-omic data (including chemical signature data). K-Means Clustering A common type of ML method that will be included in the scripted activity is called k-means clustering. K-means is a common clustering algorithm used to partition quantitative data. This algorithm works by first, randomly selecting a pre-specified number of clusters, k, across the data space, with each cluster having a data centroid. When using a standard Euclidean distance metric, the distance is calculated from an observation to each centroid, then the observation is assigned to the cluster of the closest centroid. After all observations have been assigned to one of the k clusters, the average of all observations in a cluster is calculated, and the centroid for the cluster is moved to the location of the mean. The process then repeats, with the distance computed between the observations and the updated centroids. Observations may be reassigned to the same cluster, or moved to a different cluster if it is closer to another centroid. These iterations continue until there are no longer changes between cluster assignments for observations, resulting in the final cluster assignments that are then carried forward for analysis/interpretation. Helpful resources on k-means clustering include the following: The Elements of Statistical Learning &amp; Towards Data Science Principal Component Analysis (PCA) Another very common ML method you can use to look at big data is a method to reduce high-dimensional data called Principal Component Analysis (PCA). This can be defined in many ways, though here are some of the important elements that underly a PCA: PCA partitions variance in a dataset into linearly uncorrelated principal components (PCs), which are weighted combinations of the original features. Each PC (starting from PC1) summarizes a decreasing % of variance. Every instance (e.g. chemical) in the original dataset has a “score” on each PC. Any combination of PCs can be compared to summarize relationships amongst the instances (e.g. chemicals). Introduction to Training Module In this activity we are going to analyze an example dataset of physicochemical property information for chemicals spanning per- and polyfluoroalkyl substances (PFAS) and statins. PFAS represent a ubiquitous and pervasive class of man-made industrial chemicals that are commonly used in food packaging, commercial household products such as Teflon, cleaning products, and flame retardants. PFAS are recognized as highly stable compounds that, upon entering the environment, can persist for many years and act as harmful sources of exposure. Statins represent a class of lipid-lowering compounds that are commonly used as pharmaceutical treatments for patients at risk of cardiovascular disease. Because of their common use amongst patients, statins can also end up in water and wastewater effluent, making them of environmental relevance as well. This training module was designed to evaluate the chemical space of these diverse compounds, and to illustrate the utility of machine learning methods to differentiate chemical class and predict chemical groupings that can inform a variety of environmental and toxicological applications. The two types of machine learning methods that will be employed are k-means and PCA (as described in the introduction). Training Module’s Environmental Health Questions This training module was specifically developed to answer the following environmental health questions: Can we differentiate between PFAS and statin chemical classes, when considering just the raw physicochemical property variables without applying machine learning techniques? What are some of the physicochemical properties that seem to be driving chemical clustering patterns derived through k-means? Upon reducing the data through PCA, which physicochemical property contributes the most towards informing data variance captured in the primary principal component (Comp.1)? How do the data compare when physicochemical properties are reduced using PCA? If we did not have information telling us which chemical belonged to which class, could we use PCA and k-means to accurately predict whether a chemical is a PFAS vs statin? What kinds of applications/endpoints can be better understood and/or predicted, because of these derived chemical groupings? Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;, repos = &quot;https://cloud.r-project.org&quot;); if (!requireNamespace(&quot;pheatmap&quot;)) install.packages(&quot;pheatmap&quot;, repos = &quot;https://cloud.r-project.org&quot;); Loading R packages required for this session library(ggplot2) library(pheatmap) #used to make heatmaps. This can be done in ggplot2 but pheatmap is easier and nicer Getting help with packages and functions ?ggplot2 # Package documentation for ggplot2 ?kmeans # Package documentation for kmeans (a part of the standard stats R package, automatically uploaded) ?princomp # Package documentation for deriving principal components within a PCA (a part of the standard stats R package, automatically uploaded) ?pheatmap # Package documentation for pheatmap Set your working directory setwd(&quot;/filepath to where your input files are&quot;) # e.g. setwd(&quot;/Downloads&quot;) Loading the Example Dataset Let’s start by loading the datasets needed for this training module. We are going to use a dataset of substances that have a diverse chemical space of PFAS and statin compounds. This list of chemicals will be uploaded alongside physicochemical property data. The chemical lists for ‘PFAS’ and ‘Statins’ were obtained from the EPA’s Computational Toxicology Dashboard Chemical Lists. The physicochemical properties were obtained by uploading these lists into the National Toxoicology Program’s Integrated Chemical Environment (ICE). dat &lt;- read.csv(&quot;Module2_2/Module2_2_Chemical_Lists_PFAS-Statins.csv&quot;, fileEncoding=&quot;UTF-8-BOM&quot;) Data Viewing Let’s first view the substances dataset Starting with the overall dimensions: dim(dat) ## [1] 144 14 Then looking at the first four rows and five columns of data: dat[1:4,1:5] ## List Substance.Name CASRN ## 1 PFAS Perfluoro-2-(trifluoromethyl)propanesulphonic acid 93762-09-5 ## 2 PFAS Potassium perfluoroheptanesulfonate 60270-55-5 ## 3 PFAS Bis(2-hydroxyethyl)ammonium perfluoroheptanesulfonate 70225-15-9 ## 4 PFAS Potassium perfluoro-p-ethylcyclohexanesulfonate 335-24-0 ## DTXSID Molecular.Weight ## 1 DTXSID90239569 300.100 ## 2 DTXSID9069392 488.212 ## 3 DTXSID60880946 555.258 ## 4 DTXSID50880117 500.223 Note that the first column, ‘List’, designates the following two larger chemical classes: unique(dat$List) ## [1] &quot;PFAS&quot; &quot;Statins&quot; Let’s lastly view all of the column headers: colnames(dat) ## [1] &quot;List&quot; ## [2] &quot;Substance.Name&quot; ## [3] &quot;CASRN&quot; ## [4] &quot;DTXSID&quot; ## [5] &quot;Molecular.Weight&quot; ## [6] &quot;OPERA..Boiling.Point&quot; ## [7] &quot;OPERA..Henry.s.Law.Constant&quot; ## [8] &quot;OPERA..Melting.Point&quot; ## [9] &quot;OPERA..Negative.Log.of.Acid.Dissociation.Constant&quot; ## [10] &quot;OPERA..Octanol.Air.Partition.Coefficient&quot; ## [11] &quot;OPERA..Octanol.Water.Distribution.Coefficient&quot; ## [12] &quot;OPERA..Octanol.Water.Partition.Coefficient&quot; ## [13] &quot;OPERA..Vapor.Pressure&quot; ## [14] &quot;OPERA..Water.Solubility&quot; In the data file, the first four columns represent chemical identifier information. All remaining columns represent different physicochemical properties derived from OPERA via Integrated Chemical Environment (ICE). Because the original titles of these physicochemical properties contained commas and spaces, R automatically coverted these into periods. Hence, titles like “OPERA..Boiling.Point” Subset to only one chemical identifier (rownames) + data columns (x) For ease of downstream data analyses, let’s create a more focused dataframe option containing only one chemical identifier (CASRN) as row names, and then just the physicochemical property columns dat.x &lt;- dat[,5:ncol(dat)] rownames(dat.x) &lt;- dat$CASRN Now explore this data subset dim(dat.x) # overall dimensions ## [1] 144 10 dat.x[1:4,1:5] # viewing the first four rows and five columns ## Molecular.Weight OPERA..Boiling.Point OPERA..Henry.s.Law.Constant ## 93762-09-5 300.100 213.095 -3.60 ## 60270-55-5 488.212 223.097 -9.75 ## 70225-15-9 555.258 223.097 -9.75 ## 335-24-0 500.223 220.578 -7.56 ## OPERA..Melting.Point ## 93762-09-5 96.455 ## 60270-55-5 273.228 ## 70225-15-9 182.152 ## 335-24-0 231.827 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant ## 93762-09-5 0.175 ## 60270-55-5 -1.810 ## 70225-15-9 1.000 ## 335-24-0 1.000 colnames(dat.x) ## [1] &quot;Molecular.Weight&quot; ## [2] &quot;OPERA..Boiling.Point&quot; ## [3] &quot;OPERA..Henry.s.Law.Constant&quot; ## [4] &quot;OPERA..Melting.Point&quot; ## [5] &quot;OPERA..Negative.Log.of.Acid.Dissociation.Constant&quot; ## [6] &quot;OPERA..Octanol.Air.Partition.Coefficient&quot; ## [7] &quot;OPERA..Octanol.Water.Distribution.Coefficient&quot; ## [8] &quot;OPERA..Octanol.Water.Partition.Coefficient&quot; ## [9] &quot;OPERA..Vapor.Pressure&quot; ## [10] &quot;OPERA..Water.Solubility&quot; Evaluating the Original Physicochemical Property Data across Substances Let’s first see how these chemicals group when using the ‘real’ physicochemical property data, without any fancy data reduction or other machine learning techniques. Plot chemicals along the first two ‘real’ properties, with molecular weight as one axis and boiling point as the other Here we can create a plot using basic ggplot functions, coloring by the chemical classes from the ‘List’ column of the original dataframe ggplot(as.data.frame(dat.x[,1:2]), aes(x=Molecular.Weight, y=OPERA..Boiling.Point, color=as.factor(dat$List))) + geom_point(size=4) + theme_bw() + ggtitle(&#39;Version A: Bivariate Plot of Two Original Physchem Variables&#39;) + xlab(&quot;Molecular Weight&quot;) + ylab(&quot;Boiling Point&quot;) Plot chemicals along the next two sets of ‘real’ property data, with Henry’s Law constant as one axis and melting point as the other Here we can create a plot using basic ggplot functions, coloring by the chemical classes from the ‘List’ column of the original dataframe ggplot(as.data.frame(dat.x[,3:4]), aes(x=OPERA..Henry.s.Law.Constant, y=OPERA..Melting.Point, color=as.factor(dat$List))) + geom_point(size=4) + theme_bw() + ggtitle(&#39;Version B: Bivariate Plot of Two Other Original Physchem Variables&#39;) + xlab(&quot;OPERA..Henry.s.Law.Constant&quot;) + ylab(&quot;OPERA..Melting.Point&quot;) These plots provide two examples illustrating part of the distribution of physicochemical property data across the two classes of chemicals, spanning PFAS and statins. With these, we can answer Environmental Health Question #1: (1) Can we differentiate between PFAS and statin chemical classes, when considering just the raw physicochemical property variables without applying machine learning techniques? Answer: Only in part. From the first plot, we can see that PFAS tend to have lower molecular weight ranges in comparison to the statins, though other property variables clearly overlap in ranges of values, making the groupings not entirely clear. K-means Analysis Identifying Clusters of Chemicals through k-means Let’s derive clusters of chemicals, based on ALL underlying physicochemical property data, using k-means clustering. For this example, let’s coerce the k-means algorithms to calculate n=2 distinct clusters (based on their corresponding mean centered values). Here we choose to derive two distinct clusters, because we are ultimately going to see if we can use this information to predict each chemical’s classification into two distinct chemical classes (i.e., PFAS vs statins). Note that we can derive more clusters using similar code, depending on the question being addressed. We can give a name to this variable, to easily provide the number of clusters in the next lines of code, ‘num.centers’: num.centers &lt;- 2 Estimate k-means clusters Here we derive chemical clusters using k-means clusters &lt;- kmeans(dat.x, # input dataframe centers = num.centers, # number of cluster centers to calculate iter.max = 1000, # the maximum number of iterations allowed nstart = 50) # the number of rows used as the random set for the initial centers (during the first iteration) The resulting property values that were derived as the final cluster centers can be pulled using: clusters$centers ## Molecular.Weight OPERA..Boiling.Point OPERA..Henry.s.Law.Constant ## 1 395.0716 281.4445 -8.655185 ## 2 690.1443 233.0402 -9.589444 ## OPERA..Melting.Point OPERA..Negative.Log.of.Acid.Dissociation.Constant ## 1 157.5036 1.33226852 ## 2 183.7980 0.01658333 ## OPERA..Octanol.Air.Partition.Coefficient ## 1 6.629556 ## 2 5.940861 ## OPERA..Octanol.Water.Distribution.Coefficient ## 1 -1.271315 ## 2 -2.541750 ## OPERA..Octanol.Water.Partition.Coefficient OPERA..Vapor.Pressure ## 1 3.010302 -6.762009 ## 2 4.000639 -5.538889 ## OPERA..Water.Solubility ## 1 -3.450750 ## 2 -3.760222 Visualize k-means clusters Let’s add the cluster assignments to the physicochemical data and create a new dataframe, which can then be used in a heat map visualization to see how these physicochemical data distributions clustered according to k-means These cluster assignments can be pulled from the ‘cluster’ list output, selecting the ‘cluster’ list, where chemicals are designated to each cluster with either a 1 or 2. You can view these using: clusters$cluster ## 93762-09-5 60270-55-5 70225-15-9 335-24-0 647-29-0 68259-12-1 ## 1 1 2 1 1 2 ## 68259-09-6 68259-07-4 60453-92-1 357-31-3 441296-91-9 749786-16-1 ## 1 1 1 1 2 2 ## 93762-10-8 135524-36-6 93894-55-4 34642-43-8 2706-91-4 791563-89-8 ## 1 1 2 1 1 2 ## 742-73-4 29420-49-3 3871-99-6 29359-39-5 3872-25-1 126105-34-8 ## 1 1 1 2 1 2 ## 630402-22-1 2274731-07-4 98789-57-2 85963-79-7 375-73-5 108427-53-8 ## 1 2 2 1 1 1 ## 4021-47-0 117806-54-9 67906-42-7 68555-66-8 92982-03-1 375-92-8 ## 1 1 2 1 2 1 ## 175905-36-9 102061-82-5 134615-58-0 174675-49-1 79780-39-5 91036-71-4 ## 1 1 2 2 2 2 ## 70225-17-1 6401-03-2 374-58-3 646-83-3 86525-30-6 3916-24-3 ## 1 1 1 1 2 1 ## 42409-05-2 474511-07-4 2795-39-3 45187-15-3 82382-12-5 79963-95-4 ## 1 2 2 1 1 1 ## 45298-90-6 134615-57-9 927670-12-0 2806-15-7 70225-14-8 131651-65-5 ## 1 1 1 2 2 1 ## 343629-46-9 144797-51-3 29081-56-9 80988-54-1 1379460-39-5 343629-43-6 ## 2 1 1 1 2 2 ## 146689-46-5 29457-72-5 355-46-4 3107-18-4 70259-86-8 1036375-28-6 ## 1 1 1 1 1 1 ## 70225-18-2 70225-16-0 84224-48-6 507453-86-3 40365-28-4 110676-15-8 ## 1 1 1 2 2 1 ## 70259-85-7 2106-55-0 1997344-07-6 423-41-6 115416-68-7 17202-41-4 ## 1 1 1 1 1 2 ## 93894-73-6 134615-56-8 134615-59-1 68259-08-5 68259-10-9 374-62-9 ## 2 1 2 1 1 1 ## 68555-67-9 2806-16-8 36913-91-4 85187-17-3 803688-15-5 55120-77-9 ## 1 2 2 2 1 1 ## 335-77-3 141263-54-9 95465-60-4 130200-44-1 144535-22-8 130468-11-0 ## 2 1 1 1 1 1 ## 93957-54-1 126059-69-6 153463-20-8 154417-69-3 147511-69-1 141263-69-6 ## 1 1 1 1 1 1 ## 77517-29-4 80799-31-1 73390-02-0 503-49-1 117678-63-4 145599-86-6 ## 1 1 1 1 1 1 ## 147098-20-2 85798-96-5 120551-59-9 13552-81-3 90761-31-2 79691-18-2 ## 2 1 1 2 1 1 ## 73573-88-3 114801-27-3 151106-12-6 129443-92-1 134523-03-8 122254-45-9 ## 1 1 1 1 2 1 ## 75330-75-5 137023-81-5 136320-61-1 87770-13-6 85551-06-0 144501-27-9 ## 1 1 1 1 1 1 ## 159014-70-7 153321-50-7 133983-25-2 78366-44-6 148750-02-1 79902-63-9 ## 1 1 1 1 1 1 ## 120185-34-4 120171-12-2 141267-47-2 94061-80-0 141240-46-2 81093-37-0 ## 1 1 1 1 1 1 Because these results are listed in the exact same order as the inputted dataframe, we can simply bind these assignments to the dat.x dataframe using cbind dat_wclusters &lt;- as.data.frame(cbind(dat.x,clusters$cluster)) colnames(dat_wclusters)[11] &lt;- &quot;kmeans_cluster&quot; # renaming this new column &quot;kmeans_cluster&quot; dat_wclusters &lt;- dat_wclusters[order(dat_wclusters$kmeans_cluster),] # sorting data by cluster assignments Heat map visualization of the resulting k-means clusters To generate a heat map, we need to first create a separate dataframe for the cluster assignments, ordered in the same way as the physicochemical data: hm_cluster &lt;- data.frame(dat_wclusters$kmeans_cluster, row.names=row.names(dat_wclusters)) # creating the dataframe colnames(hm_cluster) &lt;- &quot;kmeans_cluster&quot; # reassigning the column name hm_cluster$kmeans_cluster &lt;- as.factor(hm_cluster$kmeans_cluster) # coercing the cluster numbers into factor variables, to make the heat map prettier head(hm_cluster) # viewing this new cluster assignment dataframe ## kmeans_cluster ## 93762-09-5 1 ## 60270-55-5 1 ## 335-24-0 1 ## 647-29-0 1 ## 68259-09-6 1 ## 68259-07-4 1 Then we can call this dataframe, as well as the main physicochemical property dataframe (both sorted by clusters) into the following heatmap visualization code, leveraging the pheatmap function. chem_hm &lt;- pheatmap(dat_wclusters[,1:10], main=&quot;Heatmap of Physicochemical Properties with k-means Cluster Assignments&quot;, cluster_rows=FALSE, cluster_cols = FALSE, # no further clustering, for simplicity scale=&quot;column&quot;, # scaling the data to make differences across chemicals more apparent annotation_row = hm_cluster, # calling the cluster assignment dataframe as a separate color bar angle_col = 45, fontsize_col = 7, fontsize_row = 3, # adjusting size and orientation of labels on axes cellheight = 3, cellwidth = 25, # setting height and width for cells border_color = FALSE # specify no border surrounding the cells ) Shown here is a heat map displaying the relative values for each physicochemical property, with all 10 properties listed along the bottom. Individual chemicals are listed along the right hand side. The k-means cluster assignment is provided as a separate color bar on the left. With this, we can answer Environmental Health Question #2: (2) What are some of the physicochemical properties that seem to be driving chemical clustering patterns derived through k-means? Answer: Properties with values that show obvious differences between resulting clusters including molecular weight, boiling point, negative log of acid dissociation constant, octanol air partition coefficient, and octanol water distribution coefficient. Principal Component Analysis (PCA) Next, we will run through some example analyses applying the common data reduction technique of PCA. We can calculate the principal components across ALL physicochemical data across all chemicals using the princomp function my.pca &lt;- princomp(dat.x, # input dataframe of physchem data cor = T) # calculations will be based on the correlation matrix (as opposed to covariance) since we have all numeric values here (default PCA option) Here are the resulting scores for each chemical’s contribution towards each principal component (shown here as components 1-10) head(my.pca$scores) ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6 ## 93762-09-5 -2.0425355 -1.4875982 -1.29779776 -0.04882877 0.25393797 -0.6799177 ## 60270-55-5 -1.2291769 2.2936873 0.24345932 0.40280922 0.63000240 -1.0186985 ## 70225-15-9 -1.0982561 1.3963638 0.03352018 0.90707254 0.05756006 0.1438501 ## 335-24-0 -1.1374460 1.0712815 -0.14349891 1.09092722 0.21246867 -0.9427527 ## 647-29-0 -0.4847481 0.1264224 1.16553341 -1.11771990 -0.29674860 0.1924128 ## 68259-12-1 -0.3276157 0.2377300 1.32445577 -0.47677888 -1.17966092 0.0593078 ## Comp.7 Comp.8 Comp.9 Comp.10 ## 93762-09-5 0.14597268 1.25959099 0.231742917 -0.14124625 ## 60270-55-5 0.11356003 -0.34454904 -0.385021331 -0.09883538 ## 70225-15-9 -0.38489641 0.01723486 -0.006725509 0.02725202 ## 335-24-0 0.22957369 0.11497271 -0.108096107 -0.17762819 ## 647-29-0 0.18292023 -0.48181130 0.075229509 -0.22829905 ## 68259-12-1 -0.01404007 0.03803686 0.043460416 0.18095023 And the resulting loading factors of each property’s contribution towards each principal component head(my.pca$loadings) ## Comp.1 Comp.2 ## Molecular.Weight 0.09825313 0.108454961 ## OPERA..Boiling.Point 0.46350428 0.029650863 ## OPERA..Henry.s.Law.Constant -0.17856542 -0.502116638 ## OPERA..Melting.Point 0.20645719 0.474473487 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant 0.32172963 -0.119465105 ## OPERA..Octanol.Air.Partition.Coefficient 0.45329804 -0.008918089 ## Comp.3 Comp.4 ## Molecular.Weight 0.6797404 0.48432419 ## OPERA..Boiling.Point -0.1993659 -0.03108544 ## OPERA..Henry.s.Law.Constant -0.1798767 0.27695374 ## OPERA..Melting.Point 0.2148579 0.09449999 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant -0.2862395 0.58268278 ## OPERA..Octanol.Air.Partition.Coefficient -0.1321577 -0.04820475 ## Comp.5 Comp.6 ## Molecular.Weight 0.17351578 0.35736795 ## OPERA..Boiling.Point 0.22224554 -0.01850753 ## OPERA..Henry.s.Law.Constant 0.30566003 -0.47066669 ## OPERA..Melting.Point -0.08063905 -0.68672356 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant -0.66998767 0.02924804 ## OPERA..Octanol.Air.Partition.Coefficient 0.20778895 0.20575789 ## Comp.7 Comp.8 ## Molecular.Weight 0.11763362 0.32938640 ## OPERA..Boiling.Point 0.12503355 0.09718690 ## OPERA..Henry.s.Law.Constant 0.21138163 0.44526650 ## OPERA..Melting.Point 0.34342931 -0.10233816 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant -0.09083446 0.03113686 ## OPERA..Octanol.Air.Partition.Coefficient 0.44434707 -0.29734602 ## Comp.9 Comp.10 ## Molecular.Weight 0.03295675 0.02698233 ## OPERA..Boiling.Point 0.03336277 0.81709497 ## OPERA..Henry.s.Law.Constant 0.19706729 -0.10099077 ## OPERA..Melting.Point -0.24532148 -0.10229774 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant 0.02576652 -0.03380215 ## OPERA..Octanol.Air.Partition.Coefficient 0.49672303 -0.39565984 my.pca$loadings ## ## Loadings: ## Comp.1 Comp.2 Comp.3 Comp.4 ## Molecular.Weight 0.108 0.680 0.484 ## OPERA..Boiling.Point 0.464 -0.199 ## OPERA..Henry.s.Law.Constant -0.179 -0.502 -0.180 0.277 ## OPERA..Melting.Point 0.206 0.474 0.215 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant 0.322 -0.119 -0.286 0.583 ## OPERA..Octanol.Air.Partition.Coefficient 0.453 -0.132 ## OPERA..Octanol.Water.Distribution.Coefficient 0.330 -0.437 -0.151 ## OPERA..Octanol.Water.Partition.Coefficient 0.162 -0.343 0.467 -0.485 ## OPERA..Vapor.Pressure -0.352 -0.350 0.195 0.250 ## OPERA..Water.Solubility -0.365 0.255 -0.254 -0.130 ## Comp.5 Comp.6 Comp.7 Comp.8 ## Molecular.Weight 0.174 0.357 0.118 0.329 ## OPERA..Boiling.Point 0.222 0.125 ## OPERA..Henry.s.Law.Constant 0.306 -0.471 0.211 0.445 ## OPERA..Melting.Point -0.687 0.343 -0.102 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant -0.670 ## OPERA..Octanol.Air.Partition.Coefficient 0.208 0.206 0.444 -0.297 ## OPERA..Octanol.Water.Distribution.Coefficient 0.169 0.220 ## OPERA..Octanol.Water.Partition.Coefficient -0.485 -0.162 0.178 ## OPERA..Vapor.Pressure 0.350 -0.654 ## OPERA..Water.Solubility -0.291 0.284 0.652 0.350 ## Comp.9 Comp.10 ## Molecular.Weight ## OPERA..Boiling.Point 0.817 ## OPERA..Henry.s.Law.Constant 0.197 -0.101 ## OPERA..Melting.Point -0.245 -0.102 ## OPERA..Negative.Log.of.Acid.Dissociation.Constant ## OPERA..Octanol.Air.Partition.Coefficient 0.497 -0.396 ## OPERA..Octanol.Water.Distribution.Coefficient -0.744 -0.199 ## OPERA..Octanol.Water.Partition.Coefficient 0.306 ## OPERA..Vapor.Pressure 0.313 ## OPERA..Water.Solubility ## ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6 Comp.7 Comp.8 Comp.9 ## SS loadings 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 ## Proportion Var 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 ## Cumulative Var 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 ## Comp.10 ## SS loadings 1.0 ## Proportion Var 0.1 ## Cumulative Var 1.0 With these results, we can answer Environmental Health Question #3: (3) Upon reducing the data through PCA, which physicochemical property contributes the most towards informing data variance captured in the primary principal component (Comp.1)? Answer: Boiling point contributes the most towards principal component #1. Calculating % of Variance Captured by each Principal Component We can view summary statistics describing how much of the variance from the original dataset was captured by each component, using the summary function. summary(my.pca) ## Importance of components: ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 ## Standard deviation 2.0230157 1.5440214 1.2415840 0.76635873 0.6905932 ## Proportion of Variance 0.4092593 0.2384002 0.1541531 0.05873057 0.0476919 ## Cumulative Proportion 0.4092593 0.6476595 0.8018125 0.86054312 0.9082350 ## Comp.6 Comp.7 Comp.8 Comp.9 Comp.10 ## Standard deviation 0.60491164 0.48939394 0.40589919 0.32548349 0.203793303 ## Proportion of Variance 0.03659181 0.02395064 0.01647542 0.01059395 0.004153171 ## Cumulative Proportion 0.94482682 0.96877746 0.98525288 0.99584683 1.000000000 We can also calculate these values, and pull them into a dataframe for future use. For example, to pull the percentage of variance explained by each principal component, we can run the following calculations, where first eigenvalues (eigs) are calculated and then used to calculate percent of variance, per principal component: eigs &lt;- my.pca$sdev^2 Comp.stats &lt;- data.frame(eigs, eigs/sum(eigs), row.names=names(eigs)) colnames(Comp.stats) &lt;- c(&quot;Eigen_Values&quot;, &quot;Percent_of_Variance&quot;) head(Comp.stats) ## Eigen_Values Percent_of_Variance ## Comp.1 4.0925925 0.40925925 ## Comp.2 2.3840022 0.23840022 ## Comp.3 1.5415308 0.15415308 ## Comp.4 0.5873057 0.05873057 ## Comp.5 0.4769190 0.04769190 ## Comp.6 0.3659181 0.03659181 Here, we can see that Principal Component #1 (Comp.1) captures ~41% of the variance across all physicochemical property values, across all chemicals. Principal Component #2 captures ~24%, etc. Visualizing PCA Results Let’s now view the results of this PCA, focusing on the first two principal components, and coloring each chemical according to class (i.e. PFAS vs statins). ggplot(as.data.frame(my.pca$scores), aes(x=Comp.1, y=Comp.2, color=as.factor(dat$List))) + geom_point(size=4) + theme_bw() + ggtitle(&#39;Version C: PCA Plot of the First 2 PCs, colored by Chemical Class&#39;) + xlab(&quot;Principal Component 1&quot;) + ylab(&quot;Principal Component 2&quot;) With this, we can answer Environmental Health Question #4: (4) How do the data compare when physicochemical properties are reduced using PCA? Answer: Data become more compressed, and variables reduce across principal components capturing the majority of variance. This results in improved data visualizations, where all dimensions of the physiochemical dataset are compressed and captured across the displayed components. Combined Approach Incorporating K-Means into PCA for Predictive Modeling We can also identify cluster-based trends within data that are reduced, after running PCA. This example analysis does so, expanding upon the previously generated PCA results. Estimate k-means clusters from PCA results Let’s first run script, similar to the previous k-means analysis and associated parameters, though instead here we will use data reduced values from the PCA analysis. Specifically, clusters across PCA “scores” values will be derived, where scores represent the relative amount each chemical contributed to each principal component. clusters_PCA &lt;- kmeans(my.pca$scores, centers = num.centers, iter.max = 1000, nstart = 50) The resulting PCA score values that were derived as the final cluster centers can be pulled using: clusters_PCA$centers ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6 ## 1 -1.191669 0.1393319 0.2836947 -0.004022509 -0.08434048 -0.02299446 ## 2 2.621672 -0.3065303 -0.6241284 0.008849520 0.18554906 0.05058781 ## Comp.7 Comp.8 Comp.9 Comp.10 ## 1 -0.01558687 0.02403981 0.008361355 -0.005429933 ## 2 0.03429111 -0.05288759 -0.018394982 0.011945853 Viewing the final cluster assignment, per chemical: head(cbind(rownames(dat.x),clusters_PCA$cluster)) ## [,1] [,2] ## 93762-09-5 &quot;93762-09-5&quot; &quot;1&quot; ## 60270-55-5 &quot;60270-55-5&quot; &quot;1&quot; ## 70225-15-9 &quot;70225-15-9&quot; &quot;1&quot; ## 335-24-0 &quot;335-24-0&quot; &quot;1&quot; ## 647-29-0 &quot;647-29-0&quot; &quot;1&quot; ## 68259-12-1 &quot;68259-12-1&quot; &quot;1&quot; Visualizing k-means clusters from PCA results Let’s now view, again, the results of the main PCA, focusing on the first two principal components; though this time let’s color each chemical according to k-means cluster. ggplot(as.data.frame(my.pca$scores), aes(x=Comp.1, y=Comp.2, color=as.factor(clusters_PCA$cluster))) + geom_point(size=4) + theme_bw() + ggtitle(&#39;Version D: PCA Plot of the First 2 PCs, colored by k-means Clustering&#39;) + xlab(&quot;Principal Component 1&quot;) + ylab(&quot;Principal Component 2&quot;) With this, we can answer Environmental Health Question #5: (5) If we did not have information telling us which chemical belonged to which class, could we use PCA and k-means to accurately predict whether a chemical is a PFAS vs statin? Answer: Yes!! Groupings derived from k-means, displayed in this PCA plot, line up almost exactly with the grouping of chemical classes (see Version C of this plot as the direct comparison). We can also answer Environmental Health Question #6: (6) What kinds of applications/endpoints can be better understood and/or predicted, because of these derived chemical groupings? Answers: With these well-informed chemical groupings, we can now better understand the variables that attribute to the chemical classifications. We can also use this information to better understand data trends, and predict environmental fate and transport for these chemicals. The reduced variables derived through PCA, and/or k-means clustering patterns can also be used as input variables to predict toxicological outcomes. Concluding Remarks In conclusion, this training module provide an example excercise on organizing physicochemical data, and analyzing trends within these data to determine chemical groupings. Results are compared from those produced using just the original data vs. clustered data from k-means vs. reduced data from PCA. K-means is then used in combination with PCA approaches to showcase the power of these machine learning methods, where the classes of each chemical were able to be predicted with high levels of accuracy. These methods represent common tools that are used in high dimensional data analyses within the field of environmental health sciences. For additional case studies that leverage more advanced machine learning techniques, see the following recent publications that also address environmental health questions from our research groups: Clark J, Avula V, Ring C, Eaves LA, Howard T, Santos HP, Smeester L, Bangma JT, O’Shea TM, Fry RC, Rager JE. Comparing the Predictivity of Human Placental Gene, microRNA, and CpG Methylation Signatures in Relation to Perinatal Outcomes. Toxicol Sci. 2021 Sep 28;183(2):269-284. PMID: 34255065 Green AJ, Mohlenkamp MJ, Das J, Chaudhari M, Truong L, Tanguay RL, Reif DM. Leveraging high-throughput screening data, deep neural networks, and conditional generative adversarial networks to advance predictive toxicology. PLoS Comput Biol. 2021 Jul 2;17(7):e1009135. PMID: 3421407 Odenkirk MT, Reif DM, Baker ES. Multiomic Big Data Analysis Challenges: Increasing Confidence in the Interpretation of Artificial Intelligence Assessments. Anal Chem. 2021 Jun 8;93(22):7763-7773. PMID: 34029068 To KT, Truong L, Edwards S, Tanguay RL, Reif DM. Multivariate modeling of engineered nanomaterial features associated with developmental toxicity. NanoImpact. 2019 Apr;16:10.1016. PMID: 32133425 Ring C, Sipes NS, Hsieh JH, Carberry C, Koval LE, Klaren WD, Harris MA, Auerbach SS, Rager JE. Predictive modeling of biological responses in the rat liver using in vitro Tox21 bioactivity: Benefits from high-throughput toxicokinetics. Comput Toxicol. 2021 May;18:100166. PMID: 34013136 "],["mixtures-analysis.html", "Mixtures Analysis Introduction to Training Module Chemistry-based Approach Toxicity-based Approach Comparing Results from the Chemistry vs. Toxicity Sufficient Similarity Analyses Concluding Remarks", " Mixtures Analysis This training module was developed by Dr. Cynthia Rider, with contributions from Lauren Koval and Dr. Julia E. Rager. Fall 2021 Background on Training Module Introduction to Mixtures Toxicology and In Silico Modeling to Address Mixtures Humans are rarely, if ever, exposed to single chemicals at a time. Instead, humans are often exposed to multiple stressors in their everyday environments in the form of mixtures. These stressors can include environmental chemicals and pharmaceuticals, and they can also include other types of stressors such as socioeconomic factors and other attributes that can place individuals at increased risk of acquiring disease. Because it is not possible to test every possible combination of exposure that an individual might experience in their lifetime, approaches that take into account variable and complex exposure conditions through mixtures modeling are needed. Some helpful resources that provide further background on the topic of mixtures toxicology and mixtures modeling include the following: Carlin DJ, Rider CV, Woychik R, Birnbaum LS. Unraveling the health effects of environmental mixtures: an NIEHS priority. Environ Health Perspect. 2013 Jan;121(1):A6-8. PMID: 23409283. Drakvik E, Altenburger R, Aoki Y, Backhaus T, Bahadori T, Barouki R, Brack W, Cronin MTD, Demeneix B, Hougaard Bennekou S, van Klaveren J, Kneuer C, Kolossa-Gehring M, Lebret E, Posthuma L, Reiber L, Rider C, Rüegg J, Testa G, van der Burg B, van der Voet H, Warhurst AM, van de Water B, Yamazaki K, Öberg M, Bergman Å. Statement on advancing the assessment of chemical mixtures and their risks for human health and the environment. Environ Int. 2020 Jan;134:105267. PMID: 31704565. Rider CV, McHale CM, Webster TF, Lowe L, Goodson WH 3rd, La Merrill MA, Rice G, Zeise L, Zhang L, Smith MT. Using the Key Characteristics of Carcinogens to Develop Research on Chemical Mixtures and Cancer. Environ Health Perspect. 2021 Mar;129(3):35003. PMID: 33784186. Taylor KW, Joubert BR, Braun JM, Dilworth C, Gennings C, Hauser R, Heindel JJ, Rider CV, Webster TF, Carlin DJ. Statistical Approaches for Assessing Health Effects of Environmental Chemical Mixtures in Epidemiology: Lessons from an Innovative Workshop. Environ Health Perspect. 2016 Dec 1;124(12):A227-A229. PMID: 27905274. Computational Approaches to Address Mixtures There are different computational approaches that can be implemented to address this research topic. This training module focuses on a method called Sufficient Similarity to determine which groups of exposure conditions are chemically/biologically similar enough to be regulated for safety together, based on the same set of regulatory criteria. Computational approaches that can be used for exposure groupings include principal component analysis and clustering, to elucidate patterns among high-dimensional data. More example publications that have used this approach to address environmental health questions are detailed at the bottom of this training module. Another approach that is commonly used when evaluating mixtures is called Relative Potency Factors. This is also known as a component-based approach. Component-based approaches use data from individual chemicals (components of the mixture) and additivity models to estimate the effects of the mixture. There are many methods that can be leveraged to also elucidate relationships between individual chemicals/chemical groups in complex mixtures and their resulting toxicity/health effects. As an example, we recently published an environmentally relevant example that implemented quantile g-computation statistics to identify chemicals present in wildfire smoke emissions that impact toxicity. This example study was published in the following: Rager JE, Clark J, Eaves LA, Avula V, Niehoff NM, Kim YH, Jaspers I, Gilmour MI. Mixtures modeling identifies chemical inducers versus repressors of toxicity associated with wildfire smoke. Sci Total Environ. 2021 Jun 25;775:145759. PMID: 33611182. Introduction to Training Module This module serves as an example mixtures analysis characterizing the nutritional supplement, Ginkgo biloba. Ginkgo biloba represents a popular type of botanical supplement currently on the market. People take Ginkgo biloba to improve brain function, but there is conflicting data on its efficacy. Like other botanicals, Ginkgo biloba is a complex mixture with 100s-1000s of constituents. Here, the variability in chemical and toxicological profiles across samples of Ginkgo biloba purchased from different commercial sources is evaluated. We can use data from a well-characterized sample (reference sample) to evaluate the safety of other samples that are ‘sufficiently similar’ to the reference sample. Samples that are different (i.e., do not meet the standards of sufficient similarity) from the reference sample would require additional safety data. A total of 29 Ginkgo biloba extract samples were analyzed. These samples are abbreviated as “GbE_” followed by a unique sample identifier (GbE = Ginkgo biloba Extract). These data have been previously published: Catlin NR, Collins BJ, Auerbach SS, Ferguson SS, Harnly JM, Gennings C, Waidyanatha S, Rice GE, Smith-Roe SL, Witt KL, Rider CV. How similar is similar enough? A sufficient similarity case study with Ginkgo biloba extract. Food Chem Toxicol. 2018 Aug;118:328-339. PMID: 29752982. Collins BJ, Kerns SP, Aillon K, Mueller G, Rider CV, DeRose EF, London RE, Harnly JM, Waidyanatha S. Comparison of phytochemical composition of Ginkgo biloba extracts using a combination of non-targeted and targeted analytical approaches. Anal Bioanal Chem. 2020 Oct;412(25):6789-6809. PMID: 32865633. Ginkgo biloba chemistry dataset background The chemical profiles of these sample extracts were first analyzed using targeted mass spectrometry-based approaches. The concentrations of 12 Ginkgo biloba marker compounds were measured in units of mean weight as a ratio [g chemical / g sample]. Note that in this dataset, non-detects have been replaced with values of zero for simplicity; though there are more advanced methods to impute values for non-detects. Script is provided to evaluate how Ginkgo biloba extracts group together, based on chemical profiles. Ginkgo biloba toxicity dataset background The toxicological profiles of these samples were also analyzed using in vitro test methods. These data represent area under the curve (AUC) values indicating changes in gene expression across various concentrations of the Ginkgo biloba extract samples. Positive AUC values indicate a gene that was collectively increased in expression as concentration increased, and a negative AUC value indicates a gene that was collectively decreased in expression as exposure concentration increased. Script is provided to evaluate how Ginkgo biloba extracts group together, based on toxicity profiles. Training Module’s Environmental Health Questions This training module was specifically developed to answer the following environmental health questions: Based on the chemical analysis, which Ginkgo biloba extract looks the most different? When viewing the variability between chemical profiles, how many groupings of potentially ‘sufficiently similar’ Ginkgo biloba samples do you see? Based on the chemical analysis, which chemicals do you think are important in differentiating between the different Ginkgo biloba samples? After removing two samples that have the most different chemical profiles (and are thus, potential outliers), do we obtain similar chemical groupings? When viewing the variability between toxicity profiles, how many groupings of potentially ‘sufficiently similar’ Ginkgo biloba samples do you see? Based on the toxicity analysis, which genes do you think are important in differentiating between the different Ginkgo biloba samples? Were similar chemical groups identified when looking at just the chemistry vs. just the toxicity? How could this impact regulatory decisions, if we only had one of these datasets? Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;); if (!requireNamespace(&quot;readxl&quot;)) install.packages(&quot;readxl&quot;); if (!requireNamespace(&quot;factoextra&quot;)) install.packages(&quot;factoextra&quot;); if (!requireNamespace(&quot;pheatmap&quot;)) install.packages(&quot;pheatmap&quot;); if (!requireNamespace(&quot;gridExtra&quot;)) install.packages(&quot;gridExtra&quot;); if (!requireNamespace(&quot;ggplotify&quot;)) install.packages(&quot;ggplotify&quot;) Loading R packages required for this session library(readxl) #used to read in and work with excel files library(factoextra) #used to run and visualize multivariate analyses, here PCA library(pheatmap) #used to make heatmaps. This can be done in ggplot2 but pheatmap is easier and nicer library(gridExtra) #used to arrange and visualize multiple figures at once library(ggplotify) #used to make non ggplot figures (like a pheatmap) gg compatible library(tidyverse) #all tidyverse packages, including dplyr and ggplot2 Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Loading the Example Ginkgo biloba Datasets We need to first read in the chemistry and toxicity data from the provided excel file. Here, data were originally organized such that the actual observations start on row 2 (dataset descriptions were in the first row). So let’s implement skip=1, which skips reading in the first row. chem &lt;- read_xlsx(&quot;Module2_3/Module2_3_SufficientSimilarity_Data.xlsx&quot; , sheet = &quot;chemistry data&quot;, skip=1) # loads the chemistry data tab tox &lt;- read_xlsx(&quot;Module2_3/Module2_3_SufficientSimilarity_Data.xlsx&quot; , sheet = &quot;in vitro data&quot;, skip=1) # loads the toxicity data tab Data Viewing Let’s first see how many rows and columns of data are present in both datasets dim(chem) ## [1] 29 13 The chemistry dataset contains information on 29 samples (rows); and 1 sample identifier + 12 chemicals (total of 13 columns) dim(tox) ## [1] 29 6 The tox dataset contains information on 29 samples (rows); and 1 sample identifier + 5 genes (total of 6 columns) Let’s also see what kind of data are organized within the datasets colnames(chem) ## [1] &quot;Sample&quot; &quot;Bilobalide&quot; &quot;Ginkgolide_A&quot; ## [4] &quot;Ginkgolide_B&quot; &quot;Ginkgolide_C&quot; &quot;Ginkgolide_J&quot; ## [7] &quot;Rutin&quot; &quot;Quercetin&quot; &quot;Kaempferol&quot; ## [10] &quot;Isorhamnetin&quot; &quot;Ginkgolic_Acid_C15&quot; &quot;Ginkgolic_Acid_C17&quot; ## [13] &quot;Ginkgotoxin&quot; head(chem) ## # A tibble: 6 x 13 ## Sample Bilobalide Ginkgolide_A Ginkgolide_B Ginkgolide_C Ginkgolide_J Rutin ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 GbE_A 1.28 0 0 0 1.77 0 ## 2 GbE_B 0 0 0 0 0 0.05 ## 3 GbE_C 0 0 0 0 0 0.01 ## 4 GbE_D 1.28 2.6 1.6 2.79 1.18 1.11 ## 5 GbE_E 1.5 2.13 1.46 2.6 1.21 1.21 ## 6 GbE_F 0 0 0 0 0 0.04 ## # … with 6 more variables: Quercetin &lt;dbl&gt;, Kaempferol &lt;dbl&gt;, ## # Isorhamnetin &lt;dbl&gt;, Ginkgolic_Acid_C15 &lt;dbl&gt;, Ginkgolic_Acid_C17 &lt;dbl&gt;, ## # Ginkgotoxin &lt;dbl&gt; colnames(tox) ## [1] &quot;Sample&quot; &quot;ABCB11&quot; &quot;CYP1A2&quot; &quot;CYP2B6&quot; &quot;CYP3A4&quot; &quot;HMGCS2&quot; head(tox) ## # A tibble: 6 x 6 ## Sample ABCB11 CYP1A2 CYP2B6 CYP3A4 HMGCS2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 GbE_A -0.450 0.778 0.124 -1.39 -0.0208 ## 2 GbE_B -0.210 0.902 0.456 -1.22 -0.149 ## 3 GbE_C -1.10 1.32 1.58 -1.62 0.195 ## 4 GbE_D -0.818 1.61 2.46 0.935 -1.62 ## 5 GbE_E -0.963 2.27 2.44 1.33 -1.54 ## 6 GbE_F -0.0828 1.2 0.587 -1.29 -0.147 Chemistry-based Approach The first method employed in this Sufficient Similarity analysis is Principal Component Analysis (PCA). PCA is a very common dimensionality reduction technique, as detailed in the ‘Machine Learning and Predictive Modeling’ training module. In summary, PCA finds dimensions (eigenvectors) in the higher dimensional original data that capture as much of the variation as possible, which you can then plot. This allows you to project higher dimensional data, in this case 12 dimensions (representing 12 measured chemicals), in fewer dimensions (we’ll use 2). These dimensions, or components, capture the “essence” of the original dataset. Before we can run PCA on this chemistry dataset, we first need to scale the data across samples. We do this here for the chemistry dataset, because we specifically want to evaluate and potentially highlight/emphasize chemicals that may be at relatively low abundance. These low-abundance chemicals may actually be contaminants that drive toxicological effects. Let’s first re-save the original chemistry dataset to compare off of chem_original &lt;- chem And make a scaled version to carry forward in this analysis Here, we move the sample column the row names then scale and center data chem &lt;- chem %&gt;% column_to_rownames(&quot;Sample&quot;) chem &lt;- as.data.frame(scale(as.matrix(chem))) Let’s now compare one of the rows of data (here, sample GbE_E) to see what scaling did: chem_original[5,] ## # A tibble: 1 x 13 ## Sample Bilobalide Ginkgolide_A Ginkgolide_B Ginkgolide_C Ginkgolide_J Rutin ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 GbE_E 1.5 2.13 1.46 2.6 1.21 1.21 ## # … with 6 more variables: Quercetin &lt;dbl&gt;, Kaempferol &lt;dbl&gt;, ## # Isorhamnetin &lt;dbl&gt;, Ginkgolic_Acid_C15 &lt;dbl&gt;, Ginkgolic_Acid_C17 &lt;dbl&gt;, ## # Ginkgotoxin &lt;dbl&gt; chem[5,] ## Bilobalide Ginkgolide_A Ginkgolide_B Ginkgolide_C Ginkgolide_J Rutin ## GbE_E -0.4996768 0.02749315 0.2559249 1.36305 0.3842836 0.5758008 ## Quercetin Kaempferol Isorhamnetin Ginkgolic_Acid_C15 Ginkgolic_Acid_C17 ## GbE_E 0.2059607 -0.2420023 -0.61695 -0.2737699 -0.2317415 ## Ginkgotoxin ## GbE_E -0.8114437 You can see that scaling made the concentrations distributed across each chemical center around 0. Now, we can run PCA on the scaled data chem_pca &lt;- princomp(chem) Looking at the scree plot, we see the first two principal components capture most of the variance in the data (~64%) fviz_eig(chem_pca) Here are the resulting PCA scores for each sample, for each principal component (shown here as components 1-12) head(chem_pca$scores) ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 Comp.6 ## GbE_A -2.6256689 -0.53470486 0.38196672 1.5147505 1.34638144 -0.24020735 ## GbE_B -3.7343187 -1.07490206 0.07766108 0.2529618 -0.01731847 -0.02446797 ## GbE_C -3.8019563 -1.06232680 0.08335445 0.2588084 -0.01912736 -0.03423438 ## GbE_D 0.7175782 -0.09566345 0.90082998 -0.7762090 -0.40507924 -0.78361086 ## GbE_E 0.4157644 -0.14794948 1.16402759 -0.4856176 -0.15497152 -0.64206760 ## GbE_F -3.7621819 -1.04784203 0.08687721 0.2503188 -0.02195005 -0.04030373 ## Comp.7 Comp.8 Comp.9 Comp.10 Comp.11 Comp.12 ## GbE_A -0.8890488 0.8145597 0.15021776 -0.54318277 -0.32353295 0.049538024 ## GbE_B 0.3988596 -0.3227102 -0.10344907 -0.12911495 0.11127631 0.008306532 ## GbE_C 0.3817061 -0.2788579 -0.13057528 -0.02613584 0.08148776 0.011485316 ## GbE_D -1.1916851 -0.4306198 0.08460588 0.26115540 0.01065657 -0.053819603 ## GbE_E -1.1412900 -0.5632547 0.12309347 -0.02872126 0.24882196 0.047691048 ## GbE_F 0.3948245 -0.3105324 -0.10539998 -0.11015645 0.10607314 0.012066512 And the resulting loading factors of each chemical’s contribution towards each principal component. Results are arranged by a chemical’s contribution to PC1, the component accounting for most of the variation in the data. head(chem_pca$loadings) ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 ## Bilobalide 0.3260729 0.085117226 0.24541927 0.36968834 0.03575030 ## Ginkgolide_A 0.3732546 0.184101347 0.08586157 0.02446723 -0.03299212 ## Ginkgolide_B 0.3611463 0.201280307 0.05996588 -0.19928568 -0.05965128 ## Ginkgolide_C 0.3616497 0.001365838 0.12157943 -0.24092774 -0.10470516 ## Ginkgolide_J 0.2995761 0.178689209 0.09144978 0.35348565 0.47372240 ## Rutin 0.1763429 0.012553984 0.59496115 -0.47712128 0.08063637 ## Comp.6 Comp.7 Comp.8 Comp.9 Comp.10 ## Bilobalide 0.004975969 0.55079870 0.35062913 0.23584371 0.25226337 ## Ginkgolide_A -0.247529927 0.30284388 -0.30206946 -0.01601813 0.20620248 ## Ginkgolide_B -0.068401213 -0.00687696 0.09497565 -0.83752355 0.02062813 ## Ginkgolide_C -0.185456111 -0.45474675 -0.34421625 0.32067335 0.45797955 ## Ginkgolide_J -0.062170758 -0.55785820 0.36066655 0.03820900 -0.14858754 ## Rutin 0.517141873 0.05060803 0.03111005 0.15083257 -0.27469825 ## Comp.11 Comp.12 ## Bilobalide 0.29295985 0.23837797 ## Ginkgolide_A -0.60099943 -0.41172878 ## Ginkgolide_B 0.24851189 0.06938891 ## Ginkgolide_C 0.28752202 0.17463609 ## Ginkgolide_J -0.22581449 -0.03024110 ## Rutin -0.09884752 -0.04092322 loadings &lt;- as.data.frame.matrix(chem_pca$loadings) # pulling the chemical-specific loadings into a separate matrix loadings %&gt;% arrange(desc(Comp.1)) # sorting the loadings from highest to lowest for component #1 ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 ## Quercetin 0.3801459 -0.001945021 -0.19193647 0.04697879 0.007656212 ## Ginkgolide_A 0.3732546 0.184101347 0.08586157 0.02446723 -0.032992122 ## Ginkgolide_C 0.3616497 0.001365838 0.12157943 -0.24092774 -0.104705164 ## Ginkgolide_B 0.3611463 0.201280307 0.05996588 -0.19928568 -0.059651275 ## Bilobalide 0.3260729 0.085117226 0.24541927 0.36968834 0.035750299 ## Kaempferol 0.3001354 -0.085004317 -0.29667523 -0.15611039 -0.655825688 ## Ginkgolide_J 0.2995761 0.178689209 0.09144978 0.35348565 0.473722400 ## Isorhamnetin 0.2740348 -0.075119327 -0.29665890 0.39008587 -0.060880190 ## Rutin 0.1763429 0.012553984 0.59496115 -0.47712128 0.080636368 ## Ginkgotoxin 0.1675373 -0.034318656 -0.56232119 -0.47935782 0.551341021 ## Ginkgolic_Acid_C15 -0.1201265 0.667543042 -0.11607308 -0.05802100 -0.085384063 ## Ginkgolic_Acid_C17 -0.1418140 0.653142232 -0.09559022 -0.02189315 -0.084006824 ## Comp.6 Comp.7 Comp.8 Comp.9 Comp.10 ## Quercetin -0.249799236 0.13263831 -0.30855302 0.18612332 -0.72929122 ## Ginkgolide_A -0.247529927 0.30284388 -0.30206946 -0.01601813 0.20620248 ## Ginkgolide_C -0.185456111 -0.45474675 -0.34421625 0.32067335 0.45797955 ## Ginkgolide_B -0.068401213 -0.00687696 0.09497565 -0.83752355 0.02062813 ## Bilobalide 0.004975969 0.55079870 0.35062913 0.23584371 0.25226337 ## Kaempferol 0.050018874 -0.12464461 0.51491286 0.16055155 -0.07828551 ## Ginkgolide_J -0.062170758 -0.55785820 0.36066655 0.03820900 -0.14858754 ## Isorhamnetin 0.730543567 -0.06658953 -0.34052044 -0.10456587 0.10158173 ## Rutin 0.517141873 0.05060803 0.03111005 0.15083257 -0.27469825 ## Ginkgotoxin 0.092918281 0.20744490 0.16087302 0.11145659 0.17463719 ## Ginkgolic_Acid_C15 0.057775937 0.03440329 -0.13417826 0.06575084 -0.07780733 ## Ginkgolic_Acid_C17 0.133278823 -0.05017155 0.08415192 0.16593739 0.03564092 ## Comp.11 Comp.12 ## Quercetin 0.273123642 0.008854815 ## Ginkgolide_A -0.600999427 -0.411728782 ## Ginkgolide_C 0.287522018 0.174636086 ## Ginkgolide_B 0.248511890 0.069388910 ## Bilobalide 0.292959851 0.238377968 ## Kaempferol -0.211380567 -0.020939233 ## Ginkgolide_J -0.225814490 -0.030241100 ## Isorhamnetin 0.002690835 -0.006305513 ## Rutin -0.098847524 -0.040923217 ## Ginkgotoxin -0.005807642 0.016904160 ## Ginkgolic_Acid_C15 -0.285797465 0.633437667 ## Ginkgolic_Acid_C17 0.383124914 -0.577639931 These resulting loading factors allow us to identify which constituents (of the 12 total) contribute to the principal components explaining data variabilities. For instance, we can see here that: Quercetin is listed at the top, with the largest loading value for principal component 1. Thus, Quercetin represents the constituents that contributes to the overall variability in the dataset to the greatest extent. The next three chemicals are all Ginkgolide constituents, followed by Bilobalide and Kaempferol, and so forth. If we look at principal component 2, we can now see a different set of chemicals contributing to the variability captured in this component: loadings %&gt;% arrange(desc(Comp.2)) # sorting the loadings from highest to lowest for component #2 ## Comp.1 Comp.2 Comp.3 Comp.4 Comp.5 ## Ginkgolic_Acid_C15 -0.1201265 0.667543042 -0.11607308 -0.05802100 -0.085384063 ## Ginkgolic_Acid_C17 -0.1418140 0.653142232 -0.09559022 -0.02189315 -0.084006824 ## Ginkgolide_B 0.3611463 0.201280307 0.05996588 -0.19928568 -0.059651275 ## Ginkgolide_A 0.3732546 0.184101347 0.08586157 0.02446723 -0.032992122 ## Ginkgolide_J 0.2995761 0.178689209 0.09144978 0.35348565 0.473722400 ## Bilobalide 0.3260729 0.085117226 0.24541927 0.36968834 0.035750299 ## Rutin 0.1763429 0.012553984 0.59496115 -0.47712128 0.080636368 ## Ginkgolide_C 0.3616497 0.001365838 0.12157943 -0.24092774 -0.104705164 ## Quercetin 0.3801459 -0.001945021 -0.19193647 0.04697879 0.007656212 ## Ginkgotoxin 0.1675373 -0.034318656 -0.56232119 -0.47935782 0.551341021 ## Isorhamnetin 0.2740348 -0.075119327 -0.29665890 0.39008587 -0.060880190 ## Kaempferol 0.3001354 -0.085004317 -0.29667523 -0.15611039 -0.655825688 ## Comp.6 Comp.7 Comp.8 Comp.9 Comp.10 ## Ginkgolic_Acid_C15 0.057775937 0.03440329 -0.13417826 0.06575084 -0.07780733 ## Ginkgolic_Acid_C17 0.133278823 -0.05017155 0.08415192 0.16593739 0.03564092 ## Ginkgolide_B -0.068401213 -0.00687696 0.09497565 -0.83752355 0.02062813 ## Ginkgolide_A -0.247529927 0.30284388 -0.30206946 -0.01601813 0.20620248 ## Ginkgolide_J -0.062170758 -0.55785820 0.36066655 0.03820900 -0.14858754 ## Bilobalide 0.004975969 0.55079870 0.35062913 0.23584371 0.25226337 ## Rutin 0.517141873 0.05060803 0.03111005 0.15083257 -0.27469825 ## Ginkgolide_C -0.185456111 -0.45474675 -0.34421625 0.32067335 0.45797955 ## Quercetin -0.249799236 0.13263831 -0.30855302 0.18612332 -0.72929122 ## Ginkgotoxin 0.092918281 0.20744490 0.16087302 0.11145659 0.17463719 ## Isorhamnetin 0.730543567 -0.06658953 -0.34052044 -0.10456587 0.10158173 ## Kaempferol 0.050018874 -0.12464461 0.51491286 0.16055155 -0.07828551 ## Comp.11 Comp.12 ## Ginkgolic_Acid_C15 -0.285797465 0.633437667 ## Ginkgolic_Acid_C17 0.383124914 -0.577639931 ## Ginkgolide_B 0.248511890 0.069388910 ## Ginkgolide_A -0.600999427 -0.411728782 ## Ginkgolide_J -0.225814490 -0.030241100 ## Bilobalide 0.292959851 0.238377968 ## Rutin -0.098847524 -0.040923217 ## Ginkgolide_C 0.287522018 0.174636086 ## Quercetin 0.273123642 0.008854815 ## Ginkgotoxin -0.005807642 0.016904160 ## Isorhamnetin 0.002690835 -0.006305513 ## Kaempferol -0.211380567 -0.020939233 With Ginkgolic Acids listed first here. We can also visualize sample groupings based on these principal components 1 &amp; 2 To view the PCA plot: # First pull the percent variation captured by each component pca_percent &lt;- round(100*chem_pca$sdev^2/sum(chem_pca$sdev^2),1) # Then make a dataframe for the PCA plot generation script using first three components pca_df &lt;- data.frame(PC1 = chem_pca$scores[,1], PC2 = chem_pca$scores[,2]) # Plot this dataframe chem_pca_plt &lt;- ggplot(pca_df, aes(PC1,PC2))+ geom_hline(yintercept = 0, size=0.3)+ geom_vline(xintercept = 0, size=0.3)+ geom_point(size=3, color=&quot;deepskyblue3&quot;) + geom_text(aes(label=rownames(pca_df)), fontface=&quot;bold&quot;, position=position_jitter(width=0.4,height=0.4))+ labs(x=paste0(&quot;PC1 (&quot;,pca_percent[1],&quot;%)&quot;), y=paste0(&quot;PC2 (&quot;,pca_percent[2],&quot;%)&quot;))+ ggtitle(&quot;GbE Sample PCA by Chemistry Profiles&quot;) # Changing the colors of the titles and axis text chem_pca_plt &lt;- chem_pca_plt + theme(plot.title=element_text(color=&quot;deepskyblue3&quot;, face=&quot;bold&quot;), axis.title.x=element_text(color=&quot;deepskyblue3&quot;, face=&quot;bold&quot;), axis.title.y=element_text(color=&quot;deepskyblue3&quot;, face=&quot;bold&quot;)) # Viewing this resulting plot chem_pca_plt This plot tells us a lot about sample groupings based on chemical profiles! With this, we can answer Environmental Health Questions 1-2: (1) Based on the chemical analysis, which Ginkgo biloba extract looks the most different? Answer: GbE_G (2) When viewing the variability between chemical profiles, how many groupings of potentially ‘sufficiently similar’ Ginkgo biloba samples do you see? Answer: Approximately 4 (though could argue +1/-1): bottom left group; bottom right group; and two completely separate samples of GbE_G and GbE_N Creating a Heat Map of the Mixtures Chemistry Data As an alternative way of viewing the chemical profile data, we can make a heat map of the scaled chemistry data. We concurrently run hierarchical clustering that shows us how closely samples are related to each other, based on different algorithms than data reduction-based PCA. Samples that fall on nearby branches are more similar. Samples that don’t share branches with many/any others are often considered outliers. By default, pheatmap uses a Euclidean distance to cluster the observations, which is a very common clustering algorithm. For more details, see the following description of Euclidean distance. chem_hm &lt;- pheatmap(chem, main=&quot;GbE Sample Heatmap by Chemistry Profiles&quot;, cluster_rows=TRUE, cluster_cols = FALSE, angle_col = 45, fontsize_col = 7, treeheight_row = 60) This plot tells us a lot about the individual chemicals that differentiate the sample groupings With this, we can answer Environmental Health Question 3: (3) Based on the chemical analysis, which chemicals do you think are important in differentiating between the different Ginkgo biloba samples? Answer: All of the chemicals technically contribute to these sample patterns, but here are some that stand out: (i) Ginkgolic_Acid_C15 and Ginkgolic_Acid_C17 appear to drive the clustering of one particular GbE sample, GbE_G, as well as potentially GbE_N; (ii) Isorhamnetin influences the clustering of GbE_T; (iii) Bilobalide, Ginkgolides A &amp; B, and Quercetin are also important because they show a general cluster of abundance at decreased levels at the bottom and increased levels at the top Let’s now revisit the PCA plot chem_pca_plt GbE_G and GbE_N look so different from the rest of the samples, they could be outliers and potentially influencing overall data trends Let’s make sure that, if we remove these two samples, our sample groupings still look the same chem_filt &lt;- chem %&gt;% rownames_to_column(&quot;Sample&quot;) %&gt;% filter(!Sample %in% c(&quot;GbE_G&quot;,&quot;GbE_N&quot;)) %&gt;% column_to_rownames(&quot;Sample&quot;) Now lets re-run PCA and generate a heatmap on the chemical data with these outlier samples removed chem_filt_pca &lt;- princomp(chem_filt) # Get the percent variation captured by each component pca_percent_filt &lt;- round(100*chem_filt_pca$sdev^2/sum(chem_filt_pca$sdev^2),1) # Make dataframe for PCA plot generation using first three components pca_df_filt &lt;- data.frame(PC1 = chem_filt_pca$scores[,1], PC2 = chem_filt_pca$scores[,2]) # Plot this dataframe chem_filt_pca_plt &lt;- ggplot(pca_df_filt, aes(PC1,PC2))+ geom_hline(yintercept = 0, size=0.3)+ geom_vline(xintercept = 0, size=0.3)+ geom_point(size=3, color=&quot;aquamarine2&quot;) + geom_text(aes(label=rownames(pca_df_filt)), fontface=&quot;bold&quot;, position=position_jitter(width=0.5,height=0.5))+ labs(x=paste0(&quot;PC1 (&quot;,pca_percent[1],&quot;%)&quot;), y=paste0(&quot;PC2 (&quot;,pca_percent[2],&quot;%)&quot;))+ ggtitle(&quot;GbE Sample PCA by Chemistry Profiles excluding Potential Outliers&quot;) # Changing the colors of the titles and axis text chem_filt_pca_plt &lt;- chem_filt_pca_plt + theme(plot.title=element_text(color=&quot;aquamarine2&quot;, face=&quot;bold&quot;), axis.title.x=element_text(color=&quot;aquamarine2&quot;, face=&quot;bold&quot;), axis.title.y=element_text(color=&quot;aquamarine2&quot;, face=&quot;bold&quot;)) # Viewing this resulting plot chem_filt_pca_plt View the full samples vs filtered samples chemistry PCA plots together grid.arrange(chem_pca_plt, chem_filt_pca_plt) With these plots, side-by-side, we can now answer Environmental Health Question 4: (4) After removing two samples that have the most different chemical profiles (and are thus, potential outliers), do we obtain similar chemical groupings? Answer: Yes! Removal of the potential outliers basically spreads the rest of the remaining data points out, since there is less variance in the overall dataset, and thus, more room to show variance amongst the remaining samples. The general locations of the samples on the PCA plot, however, remain consistent. We now feel confident that our similarity analysis is producing consistent grouping results Toxicity-based Approach The first method employed in this Sufficient Similarity analysis is, again, Principal Component Analysis (PCA). Unlike the chemistry dataset, we can use the toxicity dataset as is without scaling. The reason we want to analyze the raw data is because we want to emphasize genes that are showing a large response. Similarly, we want to demphasize genes that are not doing much in response to the exposure condition. If we scale these data, we will reduce this needed variability. So here, we first move the sample column to row names tox &lt;- tox %&gt;% column_to_rownames(&quot;Sample&quot;) Then, we can run PCA on this tox dataframe tox_pca &lt;- princomp(tox) Looking at the scree plot, we see the first two principal components capture most of the variation (~93%) fviz_eig(tox_pca) Plot the samples by principal components # Get the percent variation captured by each component pca_percent &lt;- round(100*tox_pca$sdev^2/sum(tox_pca$sdev^2),1) # Make dataframe for PCA plot generation using first three components tox_pca_df &lt;- data.frame(PC1 = tox_pca$scores[,1], PC2 = tox_pca$scores[,2]) # Plot the first two components tox_pca_plt &lt;- ggplot(tox_pca_df, aes(PC1,PC2))+ geom_hline(yintercept = 0, size=0.3)+ geom_vline(xintercept = 0, size=0.3)+ geom_point(size=3, color=&quot;deeppink3&quot;) + geom_text(aes(label=rownames(pca_df)), fontface=&quot;bold&quot;, position=position_jitter(width=0.25,height=0.25))+ labs(x=paste0(&quot;PC1 (&quot;,pca_percent[1],&quot;%)&quot;), y=paste0(&quot;PC2 (&quot;,pca_percent[2],&quot;%)&quot;))+ ggtitle(&quot;GbE Sample PCA by Toxicity Profiles&quot;) # Changing the colors of the titles and axis text tox_pca_plt &lt;- tox_pca_plt + theme(plot.title=element_text(color=&quot;deeppink3&quot;, face=&quot;bold&quot;), axis.title.x=element_text(color=&quot;deeppink3&quot;, face=&quot;bold&quot;), axis.title.y=element_text(color=&quot;deeppink3&quot;, face=&quot;bold&quot;)) tox_pca_plt This plot tells us a lot about sample groupings based on toxicity profiles! With this, we can answer Environmental Health Question 5: (5) When viewing the variability between toxicity profiles, how many groupings of potentially ‘sufficiently similar’ Ginkgo biloba samples do you see? Answer: Approximately 3 (though could argue +1/-1): top left group; top right group; GbE_M and GbE_W Creating a Heat Map of the Mixtures Toxicity Data As an alternative way of viewing the toxicity profile data, we can make a heat map of the tox data tox_hm &lt;- pheatmap(tox, main=&quot;GbE Sample Heatmap by Toxicity Profiles&quot;, cluster_rows=TRUE, cluster_cols = FALSE, angle_col = 45, fontsize_col = 7, treeheight_row = 60) This plot tells us a lot about the individual genes that differentiate the sample groupings With this, we can answer Environmental Health Question 6: (6) Based on the toxicity analysis, which genes do you think are important in differentiating between the different Ginkgo biloba samples? Answer: It looks like the CYP enzyme genes, particularly CYP2B6, are highly up-regulated in response to several of these sample exposures, and thus dictate a lot of these groupings. Comparing Results from the Chemistry vs. Toxicity Sufficient Similarity Analyses Let’s view the PCA plots for both datasets together, side-by-side pca_compare &lt;- grid.arrange(chem_pca_plt,tox_pca_plt, nrow=1) Let’s also view the PCA plots for both datasets together, top-to-bottom, to visualize the trends along both axes better between these two views pca_compare &lt;- grid.arrange(chem_pca_plt,tox_pca_plt) Visual representation of some of the major grouping similarities vs differences Here is an edited version of the above figures, highlighting with colored circles some chemical groups of interest identified through chemistry vs toxicity-based sufficient similarity analyses: These plots can help us answer Environmental Health Question 7: (7) Were similar chemical groups identified when looking at just the chemistry vs. just the toxicity? How could this impact regulatory action, if we only had one of these datasets? Answer: There are some similarities between groupings, though there are also notable differences. For example, samples GbE_A, GbE_B, GbE_C, GbE_F, and GbE_H group together from the chemistry and toxicity similarity analyses. Though samples GbE_G, GbE_W, GbE_N, and others clearly demonstrate differences in grouping assignments. These differences could impact the accuracy of how regulatory decisions are made, where if regulation was dictated solely on the chemistry (without toxicity data) and/or vice versa, we may miss important information that could aid in accurate health risk evaluations. Concluding Remarks In conclusion, we evaluate the similarity between variable lots of Ginkgo biloba, and identified sample groupings that could be used for chemical risk assessment purposes. Together, this example highlights the utility of sufficient similarity analyses to address environmental health research questions. For more information and additional examples in environmental health research, see the following relevant publications implementing sufficient similarity methods to address complex mixtures: Catlin NR, Collins BJ, Auerbach SS, Ferguson SS, Harnly JM, Gennings C, Waidyanatha S, Rice GE, Smith-Roe SL, Witt KL, Rider CV. How similar is similar enough? A sufficient similarity case study with Ginkgo biloba extract. Food Chem Toxicol. 2018 Aug;118:328-339. PMID: 29752982. Collins BJ, Kerns SP, Aillon K, Mueller G, Rider CV, DeRose EF, London RE, Harnly JM, Waidyanatha S. Comparison of phytochemical composition of Ginkgo biloba extracts using a combination of non-targeted and targeted analytical approaches. Anal Bioanal Chem. 2020 Oct;412(25):6789-6809. PMID: 32865633. Ryan KR, Huang MC, Ferguson SS, Waidyanatha S, Ramaiahgari S, Rice JR, Dunlap PE, Auerbach SS, Mutlu E, Cristy T, Peirfelice J, DeVito MJ, Smith-Roe SL, Rider CV. Evaluating Sufficient Similarity of Botanical Dietary Supplements: Combining Chemical and In Vitro Biological Data. Toxicol Sci. 2019 Dec 1;172(2):316-329. PMID: 31504990. Rice GE, Teuschler LK, Bull RJ, Simmons JE, Feder PI. Evaluating the similarity of complex drinking-water disinfection by-product mixtures: overview of the issues. J Toxicol Environ Health A. 2009;72(7):429-36. PMID: 19267305. "],["omics-analyses-and-systems-biology.html", "-Omics Analyses and Systems Biology", " -Omics Analyses and Systems Biology This training module was developed by Lauren Koval, Dr. Kyle Roell, and Dr. Julia E. Rager Fall 2021 "],["toxicokinetic-modeling.html", "Toxicokinetic Modeling", " Toxicokinetic Modeling This training module was developed by Dr. Caroline Ring The script for this training module requires EPA clearance prior to posting online. "],["read-across-toxicity-predictions.html", "Read-Across Toxicity Predictions", " Read-Across Toxicity Predictions This training module was developed by Dr. Grace Patlewicz and Dr. Julia E. Rager The script for this training module requires EPA clearance prior to posting online. "],["environmental-health-databases-comparative-toxicogenomics-database.html", "Environmental Health Databases: Comparative Toxicogenomics Database Introduction to Training Module CTD Data in R Identifying Genes under Epigenetic Control Concluding Remarks", " Environmental Health Databases: Comparative Toxicogenomics Database This training module was developed by Lauren Koval, Dr. Kyle Roell, and Dr. Julia E. Rager Fall 2021 Background on Training Module Introduction to Comparative Toxicogenomics Database (CTD) CTD is a publicly available, online database that provides manually curated information about chemical-gene/protein interactions, chemical-disease and gene-disease relationships. CTD also recently incorporated curation of exposure data and chemical-phenotype relationships. CTD is located at: http://ctdbase.org/. Here is a screenshot of the CTD homepage (as of August 5, 2021): Introduction to Training Module In this activity, we will be using CTD to access and download data to perform data organization and analysis as an applications-based example towards environmental health research. This activity represents a demonstration of basic data manipulation, filtering, and organization steps in R, while highlighting the utility of CTD to identify novel genomic/epigenomic relationships to environmental exposures. Example visualizations are also included in this training module’s script, providing visualizations of gene list comparison results. Training Module’s Environmental Health Questions This training module was specifically developed to answer the following environmental health questions: Which genes show altered expression in response to arsenic exposure? Of the genes showing altered expression, which may be under epigenetic control? Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;) if (!requireNamespace(&quot;VennDiagram&quot;)) install.packages(&quot;VennDiagram&quot;) if (!requireNamespace(&quot;grid&quot;)) install.packages(&quot;grid&quot;) Loading R packages required for this session library(tidyverse) library(VennDiagram) library(grid) Set your working directory setwd(&quot;/filepath to where your input files are&quot;) CTD Data in R Organizing Example Dataset from CTD CTD requires manual querying of its database, outside of the R scripting environment. Because of this, let’s first manually pull the data we need for this example analysis. We can answer both of the example questions by pulling all chemical-gene relationship data for arsenic, which we can do by following the below steps: Navigate to the main CTD website: http://ctdbase.org/. Select at the top, ‘Search’ -&gt; ‘Chemical-Gene Interactions’. Select to query all chemical-gene interaction data for arsenic. Note that there are lots of results, represented by many many rows of data! Scroll to the bottom of the webpage and select to download as ‘CSV’. This is the file that we can now use to import into the R environment and analyze! Note that the data pulled here represent data available on August 1, 2021 Loading the Example CTD Dataset into R Read in the csv file of the results from CTD query ctd &lt;- read_csv(&quot;Module3_1/Module3_1_CTDOutput_ArsenicGene_Interactions.csv&quot;) Data Viewing Let’s first see how many rows and columns of data this file contains dim(ctd) ## [1] 6280 9 This dataset includes 6280 observations (represented by rows) linking arsenic exposure to gene-level alterations With information spanning across 9 columns Let’s also see what kind of data are organized within the columns colnames(ctd) ## [1] &quot;Chemical Name&quot; &quot;Chemical ID&quot; &quot;CAS RN&quot; ## [4] &quot;Gene Symbol&quot; &quot;Gene ID&quot; &quot;Interaction&quot; ## [7] &quot;Interaction Actions&quot; &quot;Reference Count&quot; &quot;Organism Count&quot; ctd[1:9,1:5] # viewing the first five rows of data, across all 9 columns ## # A tibble: 9 x 5 ## `Chemical Name` `Chemical ID` `CAS RN` `Gene Symbol` `Gene ID` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Arsenic D001151 7440-38-2 AACSP1 729522 ## 2 Arsenic D001151 7440-38-2 AADACL2 344752 ## 3 Arsenic D001151 7440-38-2 AAGAB 79719 ## 4 Arsenic D001151 7440-38-2 AAK1 22848 ## 5 Arsenic D001151 7440-38-2 AAMDC 28971 ## 6 Arsenic D001151 7440-38-2 AAR2 25980 ## 7 Arsenic D001151 7440-38-2 AASS 10157 ## 8 Arsenic D001151 7440-38-2 ABCA1 19 ## 9 Arsenic D001151 7440-38-2 ABCA12 26154 Filtering the Data for Genes with Altered Expression To identify genes with altered expression in association with arsenic, we can leverage the results of our CTD query and filter this dataset to include only the rows that contain the term “expression” in the “Interaction Actions” column exp_filt &lt;- ctd %&gt;% filter(grepl(&quot;expression&quot;, `Interaction Actions`)) We now have 2586 observations, representing instances of arsenic exposure causing a changes in a target gene’s expression levels dim(exp_filt) ## [1] 2586 9 Let’s see how many unique genes this represents length(unique(exp_filt$`Gene Symbol`)) ## [1] 1878 This reflects 1878 unique genes that show altered expression in association with arsenic Let’s make a separate dataframe that includes only the unique genes, based on the “Gene Symbol” column exp_genes &lt;- exp_filt %&gt;% distinct(`Gene Symbol`, .keep_all=TRUE) exp_genes &lt;- exp_genes[,4] # removing columns besides gene identifier exp_genes[1:10,] # viewing the first 10 genes listed ## # A tibble: 10 x 1 ## `Gene Symbol` ## &lt;chr&gt; ## 1 AADACL2 ## 2 AAK1 ## 3 AASS ## 4 ABCA12 ## 5 ABCC1 ## 6 ABCC2 ## 7 ABCC3 ## 8 ABCC4 ## 9 ABCG4 ## 10 ABHD12B This now provides us a list of 1878 genes showing altered expression in association with arsenic Technical notes on running the distinct function within tidyverse: By default, the distinct function keeps the first instance of a duplicated value. This does have implications if the rest of the values in the rows differ. You will only retain the data associated with the first instance of the duplicated value (which is why we just retained the gene column here). It may be useful to first find the rows with the duplicate value and verify that results are as you would expect before removing observations. For example, in this dataset, expression levels can increase or decrease. If you were looking for just increases in expression, and there were genes that showed increased and decreased expression across different samples, using the distinct function just on “Gene Symbol” would not give you the results you wanted. If the first instance of the gene symbol noted decreased expression, that gene would not be returned in the results even though it might be one you would want. For this example case, we only care about expression change, regardless of direction, so this is not an issue. The distinct function can also take multiple columns to consider jointly as the value to check for duplicates if you are concerned about this. With this, we can answer Environmental Health Question #1: (1) Which genes show altered expression in response to arsenic exposure? Answer: This list of 1878 genes have published evidence supporting their altered expression levels associated with arsenic exposure. Identifying Genes under Epigenetic Control For this dataset, let’s focus on gene-level methylation as a marker of epigenetic regulation Let’s return to our main dataframe, representing the results of the CTD query, and filter these results for only the rows that contain the term “methylation” in the “Interaction Actions” column met_filt &lt;- ctd %&gt;% filter(grepl(&quot;methylation&quot;,`Interaction Actions`)) We now have 3211 observations, representing instances of arsenic exposure causing a changes in a target gene’s methylation levels dim(met_filt) ## [1] 3211 9 Let’s see how many unique genes this represents length(unique(met_filt$`Gene Symbol`)) ## [1] 3142 This reflects 3142 unique genes that show altered methylation in association with arsenic Let’s make a separate dataframe that includes only the unique genes, based on the “Gene Symbol” column met_genes &lt;- met_filt %&gt;% distinct(`Gene Symbol`, .keep_all=TRUE) met_genes &lt;- met_genes[,4] # removing columns besides gene identifier This now provides us a list of 3142 genes showing altered methylation in association with arsenic With this list of genes with altered methylation, we can now compare it to previous list of genes with altered expression to yeild our final list of genes of interest. To achieve this last step, we present two different methods to carry out list comparisons below. Method 1 for list comparisons: Merging Merge the expression results with the methylation resuts on the Gene Symbol column found in both datasets. merge_df &lt;- merge(exp_genes, met_genes, by = &quot;Gene Symbol&quot;) We end up with 315 rows reflecting the 315 genes that show altered expression and altered methylation Let’s view these genes: merge_df[1:315,] ## [1] &quot;ABCC4&quot; &quot;ABHD17A&quot; &quot;ABLIM2&quot; &quot;ACAD9&quot; &quot;ACKR2&quot; &quot;ACP3&quot; ## [7] &quot;ADAMTS1&quot; &quot;AFF1&quot; &quot;AGO2&quot; &quot;ALDH3B2&quot; &quot;ANPEP&quot; &quot;AOPEP&quot; ## [13] &quot;AP3D1&quot; &quot;APBB3&quot; &quot;APP&quot; &quot;AQP1&quot; &quot;ARF1&quot; &quot;ARID5B&quot; ## [19] &quot;AS3MT&quot; &quot;ASAP1&quot; &quot;ATF2&quot; &quot;ATG7&quot; &quot;ATP6V1C2&quot; &quot;ATXN1&quot; ## [25] &quot;ATXN7&quot; &quot;BACH1&quot; &quot;BCAR1&quot; &quot;BCL2&quot; &quot;BCL6&quot; &quot;BDNF&quot; ## [31] &quot;BECN1&quot; &quot;BMI1&quot; &quot;BMPR1A&quot; &quot;C1GALT1C1&quot; &quot;C1S&quot; &quot;C2CD3&quot; ## [37] &quot;CAMP&quot; &quot;CARD18&quot; &quot;CASP8&quot; &quot;CASTOR1&quot; &quot;CBR4&quot; &quot;CBS&quot; ## [43] &quot;CCDC68&quot; &quot;CCL14&quot; &quot;CCL20&quot; &quot;CCL24&quot; &quot;CCR2&quot; &quot;CD2&quot; ## [49] &quot;CD27&quot; &quot;CD40&quot; &quot;CDC42&quot; &quot;CDH1&quot; &quot;CDK2&quot; &quot;CDK4&quot; ## [55] &quot;CDK5&quot; &quot;CDK6&quot; &quot;CDKN1B&quot; &quot;CDKN2A&quot; &quot;CELF1&quot; &quot;CENPM&quot; ## [61] &quot;CEP72&quot; &quot;CERK&quot; &quot;CES4A&quot; &quot;CFAP300&quot; &quot;CHORDC1&quot; &quot;CLEC4D&quot; ## [67] &quot;CLIC5&quot; &quot;CMBL&quot; &quot;CNTNAP2&quot; &quot;CRCP&quot; &quot;CREBBP&quot; &quot;CUX2&quot; ## [73] &quot;CYP1B1&quot; &quot;CYP26B1&quot; &quot;CYP2U1&quot; &quot;DAPK1&quot; &quot;DAXX&quot; &quot;DCAF7&quot; ## [79] &quot;DDB2&quot; &quot;DHX32&quot; &quot;DLK1&quot; &quot;DNMT1&quot; &quot;DSG1&quot; &quot;DYNC2I2&quot; ## [85] &quot;ECHS1&quot; &quot;EDAR&quot; &quot;EFCAB2&quot; &quot;EHMT2&quot; &quot;EML2&quot; &quot;EPHA1&quot; ## [91] &quot;EPHA2&quot; &quot;EPM2AIP1&quot; &quot;ERBB4&quot; &quot;ERCC2&quot; &quot;ERN2&quot; &quot;ESR1&quot; ## [97] &quot;ETFB&quot; &quot;ETFDH&quot; &quot;F3&quot; &quot;FAM25A&quot; &quot;FAM43A&quot; &quot;FAM50B&quot; ## [103] &quot;FAM53C&quot; &quot;FAS&quot; &quot;FBLN2&quot; &quot;FBXO32&quot; &quot;FGF2&quot; &quot;FGFR3&quot; ## [109] &quot;FGGY&quot; &quot;FOSB&quot; &quot;FPR2&quot; &quot;FTH1P3&quot; &quot;FTL&quot; &quot;GAK&quot; ## [115] &quot;GAS1&quot; &quot;GFRA1&quot; &quot;GGACT&quot; &quot;GLI2&quot; &quot;GLI3&quot; &quot;GNPDA1&quot; ## [121] &quot;GOLGA4&quot; &quot;GSTM3&quot; &quot;GTSE1&quot; &quot;H2AC6&quot; &quot;H6PD&quot; &quot;HAPLN2&quot; ## [127] &quot;HCRT&quot; &quot;HDAC4&quot; &quot;HGF&quot; &quot;HLA-DQA1&quot; &quot;HOTAIR&quot; &quot;HSD17B2&quot; ## [133] &quot;HSPA1B&quot; &quot;HSPA1L&quot; &quot;HYAL1&quot; &quot;IER3&quot; &quot;IFNAR2&quot; &quot;IFNG&quot; ## [139] &quot;IGF1&quot; &quot;IKBKB&quot; &quot;IL10&quot; &quot;IL16&quot; &quot;IL1R1&quot; &quot;IL1RAP&quot; ## [145] &quot;IL20RA&quot; &quot;INPP4B&quot; &quot;IRF1&quot; &quot;ITGA8&quot; &quot;ITGAM&quot; &quot;ITGB1&quot; ## [151] &quot;JMJD6&quot; &quot;JUP&quot; &quot;KCNQ1&quot; &quot;KEAP1&quot; &quot;KLC1&quot; &quot;KLHL21&quot; ## [157] &quot;KRT1&quot; &quot;KRT18&quot; &quot;KRT27&quot; &quot;LAMB1&quot; &quot;LCE2B&quot; &quot;LEPR&quot; ## [163] &quot;LGALS7&quot; &quot;LMF1&quot; &quot;LMNA&quot; &quot;LRP8&quot; &quot;LRRC20&quot; &quot;MALAT1&quot; ## [169] &quot;MAOA&quot; &quot;MAP2&quot; &quot;MAP2K6&quot; &quot;MAP3K8&quot; &quot;MAPT&quot; &quot;MARVELD3&quot; ## [175] &quot;MBNL2&quot; &quot;MEF2C&quot; &quot;MEG3&quot; &quot;MGMT&quot; &quot;MICB&quot; &quot;MLC1&quot; ## [181] &quot;MLH1&quot; &quot;MMP19&quot; &quot;MOSMO&quot; &quot;MPG&quot; &quot;MRAP&quot; &quot;MSH2&quot; ## [187] &quot;MSI2&quot; &quot;MT1M&quot; &quot;MTOR&quot; &quot;MUC1&quot; &quot;MYH14&quot; &quot;MYL9&quot; ## [193] &quot;MYRIP&quot; &quot;NCL&quot; &quot;NEBL&quot; &quot;NEDD4&quot; &quot;NES&quot; &quot;NEU1&quot; ## [199] &quot;NFE2L2&quot; &quot;NLRP3&quot; &quot;NOS2&quot; &quot;NPM1&quot; &quot;NRF1&quot; &quot;NRG1&quot; ## [205] &quot;NRP2&quot; &quot;NTM&quot; &quot;NUAK2&quot; &quot;NUP62CL&quot; &quot;OASL&quot; &quot;OCLN&quot; ## [211] &quot;OSBPL5&quot; &quot;PALS1&quot; &quot;PCSK6&quot; &quot;PDZD2&quot; &quot;PECAM1&quot; &quot;PFKFB3&quot; ## [217] &quot;PGAP2&quot; &quot;PGK1&quot; &quot;PIAS1&quot; &quot;PLA2G4D&quot; &quot;PLCD1&quot; &quot;PLEC&quot; ## [223] &quot;PLEKHA6&quot; &quot;PLEKHG3&quot; &quot;PPFIA4&quot; &quot;PPFIBP2&quot; &quot;PPTC7&quot; &quot;PRDX1&quot; ## [229] &quot;PRKCQ&quot; &quot;PRMT6&quot; &quot;PRR5L&quot; &quot;PRSS3&quot; &quot;PTGS2&quot; &quot;PTPRE&quot; ## [235] &quot;PVT1&quot; &quot;PYROXD2&quot; &quot;RAB11FIP3&quot; &quot;RAMP1&quot; &quot;RAP1GAP2&quot; &quot;RAPGEF1&quot; ## [241] &quot;RASAL2&quot; &quot;RELCH&quot; &quot;RGMA&quot; &quot;RHEBL1&quot; &quot;RHOH&quot; &quot;RIPOR1&quot; ## [247] &quot;RNF213&quot; &quot;RNF216&quot; &quot;ROBO1&quot; &quot;S100P&quot; &quot;S1PR1&quot; &quot;SBF1&quot; ## [253] &quot;SBNO2&quot; &quot;SCGB3A1&quot; &quot;SCHIP1&quot; &quot;SELENOW&quot; &quot;SEMA5B&quot; &quot;SGMS1&quot; ## [259] &quot;SH2B2&quot; &quot;SKP2&quot; &quot;SLC22A5&quot; &quot;SLC44A2&quot; &quot;SLC6A6&quot; &quot;SNCA&quot; ## [265] &quot;SNHG32&quot; &quot;SNX1&quot; &quot;SORL1&quot; &quot;SPHK1&quot; &quot;SPINK1&quot; &quot;SPSB1&quot; ## [271] &quot;SPTBN1&quot; &quot;SQSTM1&quot; &quot;SRGAP1&quot; &quot;SSU72&quot; &quot;STAT3&quot; &quot;STK17B&quot; ## [277] &quot;STX1A&quot; &quot;STX3&quot; &quot;SULT2B1&quot; &quot;TCEA3&quot; &quot;TERT&quot; &quot;TGFB1&quot; ## [283] &quot;TGFB3&quot; &quot;TGFBR2&quot; &quot;THNSL2&quot; &quot;TIMP2&quot; &quot;TLR10&quot; &quot;TMEM86A&quot; ## [289] &quot;TNFRSF10B&quot; &quot;TNFRSF10D&quot; &quot;TNFRSF1B&quot; &quot;TNFSF10&quot; &quot;TNNC2&quot; &quot;TP53&quot; ## [295] &quot;TRIB1&quot; &quot;TRNP1&quot; &quot;TSC22D3&quot; &quot;TSLP&quot; &quot;TXNRD1&quot; &quot;UAP1&quot; ## [301] &quot;UBE2J2&quot; &quot;ULK1&quot; &quot;USP36&quot; &quot;VAV3&quot; &quot;VWF&quot; &quot;WDR26&quot; ## [307] &quot;WDR55&quot; &quot;WNK1&quot; &quot;WWTR1&quot; &quot;XDH&quot; &quot;ZBTB25&quot; &quot;ZEB1&quot; ## [313] &quot;ZNF200&quot; &quot;ZNF267&quot; &quot;ZNF696&quot; With this, we can answer Environmental Health Question #2: (2) Of the genes showing altered expression, which may be under epigenetic control? Answer: We identified 315 genes with altered expression resulting from arsenic exposure, that also demonstrate epigenetic modifications from arsenic. These genes include many high interest molecules involved in regulating cell health, including several cyclin dependent kinases (e.g., CDK2, CDK4, CDK5, CDK6), molecules involved in oxidative stress (e.g., FOSB, NOS2), and cytokines involved in inflammatory response pathways (e.g., IFNG, IL10, IL16, IL1R1, IR1RAP, TGFB1, TGFB3). Method 2 for list comparisons: Intersection For further training, shown here is another method for pulling this list of interest, through the use of the ‘intersection’ function Obtain a list of the overlapping genes in the overall expression results and the methylation results inxn &lt;- intersect(exp_filt$`Gene Symbol`,met_filt$`Gene Symbol`) Again, we end up with a list of 315 unique genes that show altered expression and altered methylation This list can be viewed on its own or converted to a dataframe (df) inxn_df &lt;- data.frame(genes=inxn) This list can also be conveniently used to filter the original query results inxn_df_all_data &lt;- ctd %&gt;% filter(`Gene Symbol` %in% inxn) Note that in this last case, the same 315 genes are present, but this time the results contain all records from the original query results, hence the 875 rows (875 records observations reflecting the 315 genes) summary(unique(sort(inxn_df_all_data$`Gene Symbol`))==sort(merge_df$`Gene Symbol`)) ## Mode TRUE ## logical 315 dim(inxn_df_all_data) ## [1] 875 9 Visually we can represent this as a Venn diagram Here, we use the “VennDiagram” R package. #Use the data we previously used for intersection in the venn diagram function venn.plt = venn.diagram( x = list(exp_filt$`Gene Symbol`, met_filt$`Gene Symbol`), category.names = c(&quot;Altered Expression&quot; , &quot;Altered Methylation&quot;), filename = &quot;venn_diagram.png&quot;, #change font size, type, and position cat.cex = 1.15, cat.fontface = &quot;bold&quot;, cat.default.pos = &quot;outer&quot;, cat.pos = c(-27, 27), cat.dist = c(0.055, 0.055), #change color of ovals col=c(&quot;#440154ff&quot;, &#39;#21908dff&#39;), fill = c(alpha(&quot;#440154ff&quot;,0.3), alpha(&#39;#21908dff&#39;,0.3)), ) Concluding Remarks In conclusion, we identified 315 genes that show altered expression in response to arsenic exposure that may be under epigenetic control. These genes represent critical mediators of oxidative stress and inflammation, among other important cellular processes. Results yeilded an important list of genes representing potential targets for further evaluation, to better understand mechanism of environmental exposure-induced disease. Together, this example highlights the utility of CTD to address environmental health research questions. For more information, see the recently updated primary CTD publication: Davis AP, Grondin CJ, Johnson RJ, Sciaky D, Wiegers J, Wiegers TC, Mattingly CJ. Comparative Toxicogenomics Database (CTD): update 2021. Nucleic Acids Res. 2021 Jan 8;49(D1):D1138-D1143. PMID: 33068428. Additional case studies relevant to environmental health research include the following: An example publication leveraging CTD findings to identify mechanisms of metals-induced birth defects: Ahir BK, Sanders AP, Rager JE, Fry RC. Systems biology and birth defects prevention: blockade of the glucocorticoid receptor prevents arsenic-induced birth defects. Environ Health Perspect. 2013 Mar;121(3):332-8. PMID: 23458687. An example publication leveraging CTD to help fill data gaps on data poor chemicals, in combination with ToxCast/Tox21 data streams, to elucidate environmental influences on disease pathways: Kosnik MB, Planchart A, Marvel SW, Reif DM, Mattingly CJ. Integration of curated and high-throughput screening data to elucidate environmental influences on disease pathways. Comput Toxicol. 2019 Nov;12:100094. PMID: 31453412. An example publication leveraging CTD to extract chemical-disease relationships used to derive new chemical risk values, with the goal of prioritizing connections between environmental factors, genetic variants, and human diseases: Kosnik MB, Reif DM. Determination of chemical-disease risk values to prioritize connections between environmental factors, genetic variants, and human diseases. Toxicol Appl Pharmacol. 2019 Sep 15;379:114674. PMID: 31323264. "],["environmental-health-databases-gene-expression-omnibus.html", "Environmental Health Databases: Gene Expression Omnibus Introduction to Training Module GEO Data in R Visualizing Data Statistical Analyses Concluding Remarks", " Environmental Health Databases: Gene Expression Omnibus This training module was developed by Dr. Kyle Roell and Dr. Julia E. Rager Fall 2021 Background on Training Module Introduction to the Environmental Health Database, Gene Expression Omnibus (GEO) GEO is a publicly available database repository of high-throughput gene expression data and hybridization arrays, chips, and microarrays that span genome-wide endpoints of genomics, transcriptomics, and epigenomics. The repository is organized and managed by the The National Center for Biotechnology Information (NCBI), which seeks to advance science and health by providing access to biomedical and genomic information. The three overall goals of GEO are to: (1) Provide a robust, versatile database in which to efficiently store high-throughput functional genomic data, (2) Offer simple submission procedures and formats that support complete and well-annotated data deposits from the research community, and (3) Provide user-friendly mechanisms that allow users to query, locate, review and download studies and gene expression profiles of interest. Of high relevance to environmental health, data organized within GEO can be pulled and analyzed to address new environmental health questions, leveraging previously generated data. For example, we have pulled gene expression data from acute myeloid leukemia patients and re-analyzed these data to elucidate new mechanisms of epigenetically-regulated networks involved in cancer, that in turn, may be modified by environmental insults, as previously published in Rager et al. 2012. We have also pulled and analyzed gene expression data from published studies evaluating toxicity resulting from hexavalent chromium exposure, to further substantiate the role of epigenetic mediators in hexavelent chromium-induced carcinogenesis (see Rager et al. 2019). This training exercise leverages an additional dataset that we published and deposited through GEO to evaluate the effects of formaldehyde inhalation exposure, as detailed below. Introduction to Training Module This training module provides an overview on pulling and analyzing data deposited in GEO. As an example, data are pulled from the published GEO dataset recorded through the online series GSE42394. This series representsAffymetrix rat genome-wide microarray data generated from our previous study, aimed at evaluating the transcriptomic effects of formaldehyde across three tissues: the nose, blood, and bone marrow. For the purposes of this training module, we will focus on evaluating gene expression profiles from nasal samples after 7 days of exposure, collected from rats exposed to 2 ppm formaldehyde via inhalation. These findings, in addition to other epigenomic endpoint measures, have been previously published (see Rager et al. 2014). This training module specifically guides trainees through the loading of required packages and data, including the manual upload of GEO data as well as the upload/organization of data leveraging the GEOquery package. Data are then further organized and combined with gene annotation information through the merging of platform annotation files. Example visualizations are then produced, including boxplots to evaluate the overall distribution of expression data across samples, as well as heat map visualizations that compare unscaled versus scaled gene expression values. Statistical analyses are then included to identify which genes are significantly altered in expression upon exposure to formaldehyde. Together, this training module serves as a simple example showing methods to access and download GEO data and to perform data organization, analysis, and visualization tasks through applications-based questions. Training Module’s Environmental Health Questions This training module was specifically developed to answer the following environmental health questions: What kind of molecular identifiers are commonly used in microarray-based -omics technologies? How can we convert platform-specific molecular identifiers used in -omics study designs to gene-level information? Why do we often scale gene expression signatures prior to heat map visualizations? What genes are altered in expression by formaldehyde inhalation exposure? What are the potential biological consequences of these gene-level perturbations? Script Preparations Cleaning the global environment rm(list=ls()) Installing required R packages If you already have these packages installed, you can skip this step, or you can run the below code which checks installation status for you if (!requireNamespace(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;); if (!requireNamespace(&quot;reshape2&quot;)) install.packages(&quot;reshape2&quot;); # GEOquery, this will install BiocManager if you don&#39;t have it installed if (!requireNamespace(&quot;BiocManager&quot;)) install.packages(&quot;BiocManager&quot;); BiocManager::install(&quot;GEOquery&quot;); ## Warning: package(s) not installed when version(s) same as current; use `force = TRUE` to ## re-install: &#39;GEOquery&#39; Loading R packages required for this session library(tidyverse) library(reshape2) library(GEOquery) For more information on the tidyverse package, see its associated CRAN webpage, primary webpage, and peer-reviewed article released in 2018. For more information on the reshape2 package, see its associated CRAN webpage, R Documentation, and helpful website providing an introduction to the reshape2 package. For more information on the GEOquery package, see its associated Bioconductor website and R Documentation file. Set your working directory setwd(&quot;/filepath to where your input files are&quot;) Loading and Organizing the Example Dataset Let’s start by loading the GEO dataset needed for this training module. As explained in the introduction, this module walks through two methods of uploading GEO data: manual option vs automatic option using the GEOquery package. These two methods are detailed below. GEO Data in R 1. Manually Downloading and Uploading GEO Files In this first method, we will navigate to the datasets within the GEO website, manually download its associated text data file, save it in our working directory, and then upload it into our global environment in R. For the purposes of this training exercise, we manually downloaded the GEO series matrix file from the GEO series webpage, located at: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE42394. The specific file that was downloaded was noted as GSE42394_series_matrix.txt, pulled by clicking on the link indicated by the red arrow from the GEO series webpage: For simplicity, we also have already pre-filtered this file for the samples we are interested in, focusing on the rat nasal gene expression data after 7 days of exposure to gaseous formaldehyde. This filtered file was saved as: GSE42394_series_matrix_filtered.txt At this point, we can simply read in this pre-filtered text file for the purposes of this training module geodata_manual &lt;- read.table(file=&quot;Module3_2/Module3_2_GSE42394_series_matrix_filtered.txt&quot;, header=T) Because this is a manual approach, we have to also manually define the treated and untreated samples (based on manually opening the surrounding metadata from the GEO webpage) Manually defining treated and untreated for these samples of interest: exposed_manual &lt;- c(&quot;GSM1150940&quot;, &quot;GSM1150941&quot;, &quot;GSM1150942&quot;) unexposed_manual &lt;- c(&quot;GSM1150937&quot;, &quot;GSM1150938&quot;, &quot;GSM1150939&quot;) 2. Uploading and Organizing GEO Files through the GEOquery Package In this second method, we will leverage the GEOquery package, which allows for easier downloading and reading in of data from GEO without having to manually download raw text files, and manually assign sample attributes (e.g., exposed vs unexposed). This package is set-up to automatically merge sample information from GEO metadata files with raw genome-wide datasets. Let’s first use the getGEO function (from the GEOquery package) to load data from our series matrix Note that this line of code may take a couple of minutes geo.getGEO.data &lt;- getGEO(filename=&#39;Module3_2/Module3_2_GSE42394_series_matrix.txt&#39;) One of the reasons the getGEO package so helpful is that we can automatically link a dataset with nicely organized sample information using the pData() function sampleInfo &lt;- pData(geo.getGEO.data) Let’s view this sample information / metadata file, first by viewing what the column headers are colnames(sampleInfo) ## [1] &quot;title&quot; &quot;geo_accession&quot; ## [3] &quot;status&quot; &quot;submission_date&quot; ## [5] &quot;last_update_date&quot; &quot;type&quot; ## [7] &quot;channel_count&quot; &quot;source_name_ch1&quot; ## [9] &quot;organism_ch1&quot; &quot;characteristics_ch1&quot; ## [11] &quot;characteristics_ch1.1&quot; &quot;characteristics_ch1.2&quot; ## [13] &quot;characteristics_ch1.3&quot; &quot;characteristics_ch1.4&quot; ## [15] &quot;characteristics_ch1.5&quot; &quot;treatment_protocol_ch1&quot; ## [17] &quot;growth_protocol_ch1&quot; &quot;molecule_ch1&quot; ## [19] &quot;extract_protocol_ch1&quot; &quot;label_ch1&quot; ## [21] &quot;label_protocol_ch1&quot; &quot;taxid_ch1&quot; ## [23] &quot;hyb_protocol&quot; &quot;scan_protocol&quot; ## [25] &quot;description&quot; &quot;data_processing&quot; ## [27] &quot;platform_id&quot; &quot;contact_name&quot; ## [29] &quot;contact_email&quot; &quot;contact_department&quot; ## [31] &quot;contact_institute&quot; &quot;contact_address&quot; ## [33] &quot;contact_city&quot; &quot;contact_zip/postal_code&quot; ## [35] &quot;contact_country&quot; &quot;supplementary_file&quot; ## [37] &quot;data_row_count&quot; &quot;age:ch1&quot; ## [39] &quot;cell type:ch1&quot; &quot;gender:ch1&quot; ## [41] &quot;strain:ch1&quot; &quot;time:ch1&quot; ## [43] &quot;treatment:ch1&quot; Then viewing the first five columns sampleInfo[1:10,1:5] ## title geo_accession ## GSM1150937 Nose_7DayControl_Rep1 [Affymetrix] GSM1150937 ## GSM1150938 Nose_7DayControl_Rep2 [Affymetrix] GSM1150938 ## GSM1150939 Nose_7DayControl_Rep3 [Affymetrix] GSM1150939 ## GSM1150940 Nose_7DayExposed_Rep1 [Affymetrix] GSM1150940 ## GSM1150941 Nose_7DayExposed_Rep2 [Affymetrix] GSM1150941 ## GSM1150942 Nose_7DayExposed_Rep3 [Affymetrix] GSM1150942 ## GSM1150943 WhiteBloodCells_7DayControl_Rep1 [Affymetrix] GSM1150943 ## GSM1150944 WhiteBloodCells_7DayControl_Rep2 [Affymetrix] GSM1150944 ## GSM1150945 WhiteBloodCells_7DayControl_Rep3 [Affymetrix] GSM1150945 ## GSM1150946 WhiteBloodCells_7DayExposed_Rep1 [Affymetrix] GSM1150946 ## status submission_date last_update_date ## GSM1150937 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150938 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150939 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150940 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150941 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150942 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150943 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150944 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150945 Public on Jan 07 2014 May 29 2013 Jan 07 2014 ## GSM1150946 Public on Jan 07 2014 May 29 2013 Jan 07 2014 This shows that each sample is provided with a unique number starting with “GSM”, and these are described by information summarized in the “title” column. We can also see that these data were made public on Jan 7, 2014. Let’s view the next five columns sampleInfo[1:10,6:10] ## type channel_count source_name_ch1 ## GSM1150937 RNA 1 Nasal epithelial cells, 7 day, unexposed ## GSM1150938 RNA 1 Nasal epithelial cells, 7 day, unexposed ## GSM1150939 RNA 1 Nasal epithelial cells, 7 day, unexposed ## GSM1150940 RNA 1 Nasal epithelial cells, 7 day, exposed ## GSM1150941 RNA 1 Nasal epithelial cells, 7 day, exposed ## GSM1150942 RNA 1 Nasal epithelial cells, 7 day, exposed ## GSM1150943 RNA 1 Circulating white blood cells, 7 day, unexposed ## GSM1150944 RNA 1 Circulating white blood cells, 7 day, unexposed ## GSM1150945 RNA 1 Circulating white blood cells, 7 day, unexposed ## GSM1150946 RNA 1 Circulating white blood cells, 7 day, exposed ## organism_ch1 characteristics_ch1 ## GSM1150937 Rattus norvegicus gender: male ## GSM1150938 Rattus norvegicus gender: male ## GSM1150939 Rattus norvegicus gender: male ## GSM1150940 Rattus norvegicus gender: male ## GSM1150941 Rattus norvegicus gender: male ## GSM1150942 Rattus norvegicus gender: male ## GSM1150943 Rattus norvegicus gender: male ## GSM1150944 Rattus norvegicus gender: male ## GSM1150945 Rattus norvegicus gender: male ## GSM1150946 Rattus norvegicus gender: male We can see that information is provided here surrounding the type of sample that was analyzed (i.e., RNA), more information on the collected samples within the column ‘source_name_ch1’, and the organism (rat) is provided in the ‘organism_ch1’ column. More detailed metadata information is provided throughout this file, as seen when viewing the column headers above Now, we can use this information to define the samples we want to analyze. Note that this is the same step we did manually above. In this training exercise, we are focusing on responses in the nose, so we can easily filter for cell type = Nasal epithelial cells (specifically in the “cell type:ch1” variable) We are also focusing on responses collected after 7 days of exposure, which we can filter for using time = 7 day (specifically in the “time:ch1” variable). We will also define exposed and unexposed samples using the variable “treatment:ch1”. First, let’s subset the sampleInfo dataframe to just keep the samples we’re interested in # Define a vector variable (here we call it &#39;keep&#39;) that will store rows we want to keep keep &lt;- rownames(sampleInfo[which(sampleInfo$`cell type:ch1`==&quot;Nasal epithelial cells&quot; &amp; sampleInfo$`time:ch1`==&quot;7 day&quot;),]) # Then subset the sample info for just those samples we defined in keep variable sampleInfo &lt;- sampleInfo[keep,] Next, we can pull the exposed and unexposed animal IDs. Let’s first see how these are labeled within the “treatment:ch1” variable unique(sampleInfo$`treatment:ch1`) ## [1] &quot;unexposed&quot; &quot;2 ppm formaldehyde&quot; And then search for the rows of data, pulling the sample animal IDs (which are in the variable ‘geo_accession’) exposedIDs &lt;- sampleInfo[which(sampleInfo$`treatment:ch1`==&quot;2 ppm formaldehyde&quot;), &quot;geo_accession&quot;] unexposedIDs &lt;- sampleInfo[which(sampleInfo$`treatment:ch1`==&quot;unexposed&quot;), &quot;geo_accession&quot;] The next step is to pull the expression data we want to use in our analyses. The GEOquery function, exprs(), allows us to easily pull these data. Here, we can pull the data we’re interested in using the exprs() function, while defining the data we want to pull based off our previously generated ‘keep’ vector. #As a reminder, this is what the &#39;keep&#39; vector includes (i.e., animal IDs that we&#39;re interested in) keep ## [1] &quot;GSM1150937&quot; &quot;GSM1150938&quot; &quot;GSM1150939&quot; &quot;GSM1150940&quot; &quot;GSM1150941&quot; ## [6] &quot;GSM1150942&quot; #Using the exprs() function geodata &lt;- exprs(geo.getGEO.data[,keep]) Let’s view the full dataset as is now head(geodata) ## GSM1150937 GSM1150938 GSM1150939 GSM1150940 GSM1150941 GSM1150942 ## 10700001 5786.60 5830.08 5637.34 5313.33 5557.04 5469.90 ## 10700002 192.92 206.86 220.83 183.12 177.16 198.64 ## 10700003 1820.98 1795.79 1735.70 1578.02 1681.58 1632.20 ## 10700004 66.95 65.61 64.41 60.19 60.41 60.67 ## 10700005 770.07 753.41 731.20 684.53 657.25 667.66 ## 10700006 5.80 5.35 5.48 5.58 5.39 5.35 This now represents a matrix of data, with animal IDs as column headers and expression levels within the matrix. Simplifying column names These column names are not the easiest to interpret, so let’s rename these columns to indicate which animals were from the exposed vs. unexposed groups. We need to first convert our expression dataset to a dataframe so we can edit columns names, and continue with downstream data manipulations that require dataframe formats geodata &lt;- data.frame(geodata) Let’s remind ourselves what the column names are colnames(geodata) ## [1] &quot;GSM1150937&quot; &quot;GSM1150938&quot; &quot;GSM1150939&quot; &quot;GSM1150940&quot; &quot;GSM1150941&quot; ## [6] &quot;GSM1150942&quot; Which ones of these are exposed vs unexposed animals can be determined by viewing our previously defined vectors exposedIDs ## [1] &quot;GSM1150940&quot; &quot;GSM1150941&quot; &quot;GSM1150942&quot; unexposedIDs ## [1] &quot;GSM1150937&quot; &quot;GSM1150938&quot; &quot;GSM1150939&quot; With this we can tell that the first three listed IDs are from unexposed animals, and the last three IDs are from exposed animals Let’s simplify the names of these columns to indicate exposure status and replicate number colnames(geodata) &lt;- c(&quot;Control_1&quot;, &quot;Control_2&quot;, &quot;Control_3&quot;, &quot;Exposed_1&quot;, &quot;Exposed_2&quot;, &quot;Exposed_3&quot;) And we’ll now need to re-define our ‘exposed’ vs ‘unexposed’ vectors for downstream script exposedIDs &lt;- c(&quot;Exposed_1&quot;, &quot;Exposed_2&quot;, &quot;Exposed_3&quot;) unexposedIDs &lt;- c(&quot;Control_1&quot;, &quot;Control_2&quot;, &quot;Control_3&quot;) Viewing the data again head(geodata) ## Control_1 Control_2 Control_3 Exposed_1 Exposed_2 Exposed_3 ## 10700001 5786.60 5830.08 5637.34 5313.33 5557.04 5469.90 ## 10700002 192.92 206.86 220.83 183.12 177.16 198.64 ## 10700003 1820.98 1795.79 1735.70 1578.02 1681.58 1632.20 ## 10700004 66.95 65.61 64.41 60.19 60.41 60.67 ## 10700005 770.07 753.41 731.20 684.53 657.25 667.66 ## 10700006 5.80 5.35 5.48 5.58 5.39 5.35 These data are now looking easier to interpret/analyze. Still, the row identifiers include 8 digit numbers starting with “107…”. We know that this dataset is a gene expression dataset, but these identifiers, in themselves, don’t tell us much about what genes these are referring to. These numeric IDs specifically represent microarray probesetIDs, that were produced by the Affymetrix platform used in the original study. But how can we tell which genes are represented by these data?! Adding Gene Symbol Information to -Omic Data Sets through Platform Annotation Files Each -omics dataset contained within GEO points to a specific platform that was used to obtain measurements. In instances where we want more information surrounding the molecular identifiers, we can merge the platform-specific annotation file with the molecular IDs given in the full dataset. For example, let’s pull the platform-specific annotation file for this experiment. Let’s revisit the website that contained the original dataset on GEO Scroll down to where it lists “Platforms”, and there is a hyperlinked platform number “GPL6247” (see arrow below) Click on this, and you will be navigated to a different GEO website describing the Affymetrix rat array platform that was used in this analysis Note that this website also includes information on when this array became available, links to other experiments that have used this platform within GEO, and much more Here, we’re interested in pulling the corresponding gene symbol information for the probeset IDs To do so, scroll to the bottom, and click “Annotation SOFT table…” and download the corresponding .gz file within your working directory Unzip this, and you will find the master annotation file: “GPL6247.annot” In this exercise, we’ve already done these steps and unzipped the file in our working directory. So at this point, we can simply read in this annotation dataset, still using the GEOquery function to help automate geo.annot &lt;- GEOquery::getGEO(filename=&quot;Module3_2/Module3_2_GPL6247.annot&quot;) Now we can use the Table function from GEOquery to pull data from the annotation dataset id.gene.table = GEOquery::Table(geo.annot)[,c(&quot;ID&quot;, &quot;Gene symbol&quot;)] id.gene.table[1:10,1:2] ## ID Gene symbol ## 1 10701620 Vom2r67///Vom2r5///Vom2r6///Vom2r4 ## 2 10701630 ## 3 10701632 ## 4 10701636 ## 5 10701643 ## 6 10701648 Vom2r5 ## 7 10701654 Vom2r6 ## 8 10701663 ## 9 10701666 ## 10 10701668 Vom2r65///Vom2r1 With these two columns of data, we now have the needed IDs and gene symbols to match with our dataset. Within the full dataset, we need to add a new column for the probeset ID, taken from the rownames, in preparation for the merging step geodata$ID = rownames(geodata) We can now merge the gene symbol information by ID with our expression data geodata_genes = merge(geodata, id.gene.table, by=&quot;ID&quot;) head(geodata_genes) ## ID Control_1 Control_2 Control_3 Exposed_1 Exposed_2 Exposed_3 ## 1 10700001 5786.60 5830.08 5637.34 5313.33 5557.04 5469.90 ## 2 10700002 192.92 206.86 220.83 183.12 177.16 198.64 ## 3 10700003 1820.98 1795.79 1735.70 1578.02 1681.58 1632.20 ## 4 10700004 66.95 65.61 64.41 60.19 60.41 60.67 ## 5 10700005 770.07 753.41 731.20 684.53 657.25 667.66 ## 6 10700006 5.80 5.35 5.48 5.58 5.39 5.35 ## Gene symbol ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 Note that many of the probeset IDs do not map to full gene symbols, which is shown here by viewing the top few rows - this is expected in genome-wide analyses based on microarray platforms. Let’s look at the first 25 unique genes in these data UniqueGenes &lt;- unique(geodata_genes$`Gene symbol`) UniqueGenes[1:25] ## [1] &quot;&quot; ## [2] &quot;Vom2r67///Vom2r5///Vom2r6///Vom2r4&quot; ## [3] &quot;Vom2r5&quot; ## [4] &quot;Vom2r6&quot; ## [5] &quot;Vom2r65///Vom2r1&quot; ## [6] &quot;Vom2r65///Vom2r5///Vom2r1///Vom2r6///Vom2r4&quot; ## [7] &quot;Vom2r65///Vom2r5///Vom2r6///Vom2r4&quot; ## [8] &quot;Raet1e&quot; ## [9] &quot;Lrp11&quot; ## [10] &quot;Katna1&quot; ## [11] &quot;Ppil4&quot; ## [12] &quot;Zc3h12d&quot; ## [13] &quot;Shprh&quot; ## [14] &quot;Fbxo30&quot; ## [15] &quot;Epm2a&quot; ## [16] &quot;Sf3b5&quot; ## [17] &quot;Plagl1&quot; ## [18] &quot;Fuca2&quot; ## [19] &quot;Adat2&quot; ## [20] &quot;Hivep2&quot; ## [21] &quot;Nmbr&quot; ## [22] &quot;Cited2&quot; ## [23] &quot;Txlnb&quot; ## [24] &quot;Reps1&quot; ## [25] &quot;Perp&quot; Again, you can see that the first value listed is blank, representing probesetIDs that do not match to fully annotated gene symbols. Though the rest pertain for gene symbols annotated to the rat genome. You can also see that some gene symbols have multiple entries, separated by “///” To simplify identifiers, we can pull just the first gene symbol, and remove the rest by using gsub geodata_genes$`Gene symbol` = gsub(&quot;///.*&quot;, &quot;&quot;, geodata_genes$`Gene symbol`) Let’s alphabetize by main expression dataframe by gene symbol geodata_genes &lt;- geodata_genes[order(geodata_genes$`Gene symbol`),] And then re-view these data geodata_genes[1:5,] ## ID Control_1 Control_2 Control_3 Exposed_1 Exposed_2 Exposed_3 ## 1 10700001 5786.60 5830.08 5637.34 5313.33 5557.04 5469.90 ## 2 10700002 192.92 206.86 220.83 183.12 177.16 198.64 ## 3 10700003 1820.98 1795.79 1735.70 1578.02 1681.58 1632.20 ## 4 10700004 66.95 65.61 64.41 60.19 60.41 60.67 ## 5 10700005 770.07 753.41 731.20 684.53 657.25 667.66 ## Gene symbol ## 1 ## 2 ## 3 ## 4 ## 5 In preparation for the visualization steps below, let’s reset the probeset IDs to rownames rownames(geodata_genes) = geodata_genes$ID # Can then remove this column within the dataframe geodata_genes$ID &lt;- NULL Finally let’s rearrange this dataset to include gene symbols as the first column, right after rownames (probeset IDs) geodata_genes &lt;- geodata_genes[,c(ncol(geodata_genes),1:(ncol(geodata_genes)-1))] geodata_genes[1:5,] ## Gene symbol Control_1 Control_2 Control_3 Exposed_1 Exposed_2 ## 10700001 5786.60 5830.08 5637.34 5313.33 5557.04 ## 10700002 192.92 206.86 220.83 183.12 177.16 ## 10700003 1820.98 1795.79 1735.70 1578.02 1681.58 ## 10700004 66.95 65.61 64.41 60.19 60.41 ## 10700005 770.07 753.41 731.20 684.53 657.25 ## Exposed_3 ## 10700001 5469.90 ## 10700002 198.64 ## 10700003 1632.20 ## 10700004 60.67 ## 10700005 667.66 dim(geodata_genes) ## [1] 29214 7 Note that this dataset includes expression measures across 29,214 probes, representing 14,019 unique genes. For simplicity in the final excercises, let’s just filter for rows representing mapped genes geodata_genes &lt;- geodata_genes[!(geodata_genes$`Gene symbol` == &quot;&quot;), ] dim(geodata_genes) ## [1] 16024 7 Note that this dataset now includes 16,024 rows with mapped gene symbol identifiers With this, we can now answer Environmental Health Question #1: (1) What kind of molecular identifiers are commonly used in microarray-based -omics technologies? Answer: Platform-specific probeset IDs. We can also answer Environmental Health Question #2: (2) How can we convert platform-specific molecular identifiers used in -omics study designs to gene-level information? Answer: We can merge platform-specific IDs with gene-level information using annotation files. Visualizing Data Visualizing Gene Expression Data using Boxplots and Heat Maps To visualize the -omics data, we can generate boxplots, heatmaps, any many other types of visualizations Here, we provide an example to plot a boxplot, which can be used to visualize the variability amongst samples We also provide an example to plot a heat map, compared unscaled vs scaled gene expression profiles These visualizations can be useful to both simply visualize the data as well as identify patterns across samples or genes Boxplot Visualizations For this example, let’s simply use R’s built in boxplot function We only want to use columns with our expression data (2 to 7), so let’s pull those columns when running the boxplot function There seem to be a lot of variability within each sample’s range of expression levels, with many outliers. This makes sense given that we are analyzing the expression levels across the rat’s entire genome, where some genes won’t be expressed at all while others will be highly expressed due to biological and/or potential technical variability. To show plots without outliers, we can simply use outline=F Heatmap Visualizations Heatmaps are also useful when evaluating large datasets. There are many different packages you can use to generate heat maps. Here, we use the superheat package. It also takes awhile to plot all genes across the genome, so to save time for this training module, let’s randomly select 100 rows to plot. This produces a heat map with sample IDs along the x-axis and probeset IDs along the y-axis. Here, the values being displayed represent normalized expression values. One way to improve our ability to distinguish differences between samples is to scale expression values across probes. Scaling data Z-score is a very common method of scaling that transforms data points to reflect the number of standard deviations they are from the overall mean. Z-score scaling data results in the overall transformation of a dataset to have an overall mean = 0 and standard deviation = 1. Let’s see what happens when we scale this gene expression dataset by z-score across each probe. This can be easily done using the scale function. This specific scale function works by centering and scaling across columns, but since we want use it across probesets (organized as rows), we need to first transpose our dataset, then running the scale function geodata_genes_scaled = scale(t(geodata_genes[,2:7]), center=T, scale=T) Now we can transpose it back to the original format (i.e., before it was transposed) geodata_genes_scaled = t(geodata_genes_scaled) And then view what the normalized and now scaled expression data look like for now a random subset of 100 probesets (representing genes) With these data now scaled, we can more easily visualize patterns between samples. We can also answer Environmental Health Question #3: (3) Why do we often scale gene expression signatures prior to heat map visualizations? Answer: To better visualize patterns in expression signatures between samples. Now, with these data nicely organized, we can see how statistics can help find which genes show trends in expression associated with formaldehyde exposure. Statistical Analyses Statistical Analyses to Identify Genes altered by Formaldehyde A simple way to identify differences between formaldehyde-exposed and unexposed samples is to use a t-test. Because there are so many tests being performed, one for each gene, it is also important to carry out multiple test corrections through a p-value adjustment method. We need to run a t-test for each row of our dataset. This exercise demonstrates two different methods to run a t-test: + Method 1: using a ‘for loop’ + Method 2: using the apply function (more computationally efficient) Method 1 (m1): ‘For Loop’ Let’s first re-save the molecular probe IDs to a column within the dataframe, since we need those values in the loop function geodata_genes$ID = rownames(geodata_genes) We also need to initially create an empty dataframe to eventually store p-values pValue_m1 = matrix(0, nrow=nrow(geodata_genes), ncol=3) colnames(pValue_m1) = c(&quot;ID&quot;, &quot;pval&quot;, &quot;padj&quot;) head(pValue_m1) ## ID pval padj ## [1,] 0 0 0 ## [2,] 0 0 0 ## [3,] 0 0 0 ## [4,] 0 0 0 ## [5,] 0 0 0 ## [6,] 0 0 0 You can see the empty dataframe that was generated through this code Then we can loop through the entire dataset to acquire p-values from t-test statistics, comparing n=3 exposed vs n=3 unexposed samples for (i in 1:nrow(geodata_genes)) { #Get the ID ID.i = geodata_genes[i, &quot;ID&quot;]; #Run the t-test and get the p-value pval.i = t.test(geodata_genes[i,exposedIDs], geodata_genes[i,unexposedIDs])$p.value; #Store the data in the empty dataframe pValue_m1[i,&quot;ID&quot;] = ID.i; pValue_m1[i,&quot;pval&quot;] = pval.i } View the results pValue_m1[1:5,1:2] # note that we&#39;re not pulling the last column (padj) since we haven&#39;t calculated these yet ## ID pval ## [1,] &quot;10903987&quot; &quot;0.0812802229304083&quot; ## [2,] &quot;10714794&quot; &quot;0.757311314118124&quot; ## [3,] &quot;10858408&quot; &quot;0.390952310869689&quot; ## [4,] &quot;10872252&quot; &quot;0.0548937136005506&quot; ## [5,] &quot;10905819&quot; &quot;0.173539535577791&quot; Method 2 (m2): Apply Function For the second method, we can use the apply to do calculate resulting t-test p-values more efficiently (labeled pValue_m2 &lt;- apply(geodata_genes[,2:7], 1, function(x) t.test(x[unexposedIDs],x[exposedIDs])$p.value) names(pValue_m2) = geodata_genes[,&quot;ID&quot;] We can convert the results into a dataframe to make it similar to m1 matrix we created above pValue_m2 = data.frame(pValue_m2) # Now create an ID column pValue_m2$ID = rownames(pValue_m2) Then we can view at the two datasets to see they result in the same pvalues head(pValue_m1) ## ID pval padj ## [1,] &quot;10903987&quot; &quot;0.0812802229304083&quot; &quot;0&quot; ## [2,] &quot;10714794&quot; &quot;0.757311314118124&quot; &quot;0&quot; ## [3,] &quot;10858408&quot; &quot;0.390952310869689&quot; &quot;0&quot; ## [4,] &quot;10872252&quot; &quot;0.0548937136005506&quot; &quot;0&quot; ## [5,] &quot;10905819&quot; &quot;0.173539535577791&quot; &quot;0&quot; ## [6,] &quot;10907585&quot; &quot;0.215200167867295&quot; &quot;0&quot; head(pValue_m2) ## pValue_m2 ID ## 10903987 0.08128022 10903987 ## 10714794 0.75731131 10714794 ## 10858408 0.39095231 10858408 ## 10872252 0.05489371 10872252 ## 10905819 0.17353954 10905819 ## 10907585 0.21520017 10907585 We can see from these results that both methods (m1 and m2) generate the same statistical p-values Interpreting Results Let’s again merge these data with the gene symbols to tell which genes are significant First, let’s convert to a dataframe and then merge as before, for one of the above methods as an example (m1) pValue_m1 &lt;- data.frame(pValue_m1) pValue_m1 &lt;- merge(pValue_m1, id.gene.table, by=&quot;ID&quot;) We can also add a multiple test correction by applying a false discovery rate-adjusted p-value; here, using the Benjamini Hochberg (BH) method pValue_m1[,&quot;padj&quot;] &lt;- p.adjust(pValue_m1[,&quot;pval&quot;], method=c(&quot;fdr&quot;)) Now, we can sort these statistical results by adjusted p-values pValue_m1.sorted &lt;- pValue_m1[order(pValue_m1[,&#39;padj&#39;]),] head(pValue_m1.sorted) ## ID pval padj Gene symbol ## 9143 10837582 4.57288413593085e-07 0.00732759 Olr633 ## 5640 10783648 1.93688668590855e-06 0.01551834 Slc7a8 ## 8 10701699 0.0166773380386967 0.13089115 Lrp11 ## 17 10701817 0.0131845685452954 0.13089115 Fuca2 ## 19 10701830 0.00586885826460337 0.13089115 Hivep2 ## 23 10701880 0.00749149990409956 0.13089115 Reps1 Pulling just the significant genes using an adjusted p-value threshold of 0.05 adj.pval.sig &lt;- pValue_m1[which(pValue_m1[,&#39;padj&#39;] &lt; .05),] adj.pval.sig # viewing these genes ## ID pval padj Gene symbol ## 5640 10783648 1.93688668590855e-06 0.01551834 Slc7a8 ## 9143 10837582 4.57288413593085e-07 0.00732759 Olr633 With this, we can answer Environmental Health Question #4: (4) What genes are altered in expression by formaldehyde inhalation exposure? Answer: Olr633 and Slc7a8. With this, we can answer Environmental Health Question #5: (5) What are the potential biological consequences of these gene-level perturbations? Answer: Olr633 stands for ‘olfactory receptor 633’. Olr633 is up-regulated in expression, meaning that formaldehyde inhalation exposure has a smell that resulted in ‘activated’ olfactory receptors in the nose of these exposed rats. Slc7a8 stands for ‘solute carrier family 7 member 8’. Slc7a8 is down-regulated in expression, and it plays a role in many biological processes, that when altered, can lead to changes in cellular homeostasis and disease. Finally, let’s plot these using a mini heatmap. Note that we can use probesetIDs, then gene symbols, in rownames to have them show in heatmap labels. Note that this statistical filter is pretty strict when comparing only n=3 vs n=3 biological replicates. If we loosen the statistical criteria to p-value &lt; 0.05, this is what we can find: pval.sig = pValue_m1[which(pValue_m1[,&#39;pval&#39;] &lt; .05),] nrow(pval.sig) ## [1] 5327 5327 genes with significantly altered expression! Note that other filters are commonly applied to further focus these lists (e.g., background and fold change filters) prior to statistical evaluation, which can impact the final results. See Rager et al. 2013 for further statistical approaches and visualizations. Concluding Remarks In conclusion, this training module provides an overview of pulling, organizing, visualizing, and analyzing -omics data from the online repository, Gene Expression Omnibus (GEO). Trainees are guided through the overall organization of an example high dimensional dataset, focusing on transcriptomic responses in the nasal epithelium of rats exposed to formaldehyde. Data are visualized and then analyzed using standard two-group comparisons. Findings are interpreted for biological relevance, yielding insight into the effects resulting from formaldehyde exposure. For additional case studies that leverage GEO, see the following publications that also address environmental health questions from our research group: Rager JE, Fry RC. The aryl hydrocarbon receptor pathway: a key component of the microRNA-mediated AML signalisome. Int J Environ Res Public Health. 2012 May;9(5):1939-53. doi: 10.3390/ijerph9051939. Epub 2012 May 18. PMID: 22754483; PMCID: PMC3386597. Rager JE, Suh M, Chappell GA, Thompson CM, Proctor DM. Review of transcriptomic responses to hexavalent chromium exposure in lung cells supports a role of epigenetic mediators in carcinogenesis. Toxicol Lett. 2019 May 1;305:40-50. PMID: 30690063. "],["database-integration-air-quality-study-mortality-and-environmental-justice-data.html", "Database Integration: Air Quality Study, Mortality, and Environmental Justice Data", " Database Integration: Air Quality Study, Mortality, and Environmental Justice Data The development of this training module was led by Dr. Cavin Ward-Caviness. The script for this training module requires EPA clearance prior to posting online. "],["r-programming-resources.html", "R Programming Resources:", " R Programming Resources: Coursera provides online courses for many technical topics, including several on R programming. Datacamp provides online courses for learning R, Python, statistics, and more. R for Data Science, developed by Hadley Wickham and Garrett Grolemund, is an online resource that also comes in the format of a book, that teaches participants how to do data science using R. R Graphics Cookbook, developed by Winston Chang, is a practical guide that provides more than 150 “recipes” to demonstrate generating graphics in R quickly. R for Graduate Students, developed by a PhD student, Wendy Huynh, who taught herself R as a needed component of her research while obtaining a PhD and wanted to share her experience and lessons learned. Reproducible Medical Research with R, developed by Dr. Higgins as an online resource for those in the medical field interested in analyzing the data to better understand health, disease, or the delivery of care. "],["r-packages-resources.html", "R Packages Resources:", " R Packages Resources: R Comprehensive R Archive Network (CRAN) website Bioconductor: Open Source Software for Bioinformatics website "],["community-discussions-on-r-and-r-packages.html", "Community Discussions on R and R Packages:", " Community Discussions on R and R Packages: Stack Overflow online discussion forums. Discussion forums within Bioconductor, where you can communicate directly with package developers. "],["data-science-and-statistical-analysis-resources.html", "Data Science and Statistical Analysis Resources:", " Data Science and Statistical Analysis Resources: The Elements of Statistical Learning, written by Trevor Hastie, Robert Tibshirani, and Jerome Friedman. Towards Data Science, developed by Mason Adair, Jobelle Braun, Nick Cohn and Thibaut Dubernet. "]]
